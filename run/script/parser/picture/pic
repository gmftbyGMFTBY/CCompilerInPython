[node|0]: [begin]
FUNC_DEF -> · INIT_STMT ;, char
TYPE_SPEC -> · float, ID
CMPL_UNIT -> · FUNC_LIST, #
TYPE_SPEC -> · int, ID
FUNC_DEF -> · INIT_STMT ;, #
FUNC_DEF -> · INIT_STMT ;, float
FUNC_LIST -> · FUNC_DEF FUNC_LIST, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, char
TYPE_SPEC -> · void, ID
TYPE_SPEC -> · char, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> · INIT_STMT ;, double
FUNC_LIST -> ·, #
FUNC_DEF -> · INIT_STMT ;, void
PROGRAM -> · CMPL_UNIT, #
FUNC_DEF -> · INIT_STMT ;, int
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, double
INIT_STMT -> · TYPE_SPEC ID, ;
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, float
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, void

[node|1]: [begin]
PROGRAM -> CMPL_UNIT ·, #

[node|2]: [begin]
TYPE_SPEC -> int ·, ID

[node|3]: [begin]
TYPE_SPEC -> void ·, ID

[node|4]: [begin]
FUNC_DEF -> · INIT_STMT ;, char
TYPE_SPEC -> · float, ID
TYPE_SPEC -> · int, ID
FUNC_DEF -> · INIT_STMT ;, #
FUNC_DEF -> · INIT_STMT ;, float
FUNC_LIST -> · FUNC_DEF FUNC_LIST, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, char
TYPE_SPEC -> · void, ID
TYPE_SPEC -> · char, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> · INIT_STMT ;, double
FUNC_LIST -> ·, #
FUNC_DEF -> · INIT_STMT ;, void
FUNC_DEF -> · INIT_STMT ;, int
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, double
INIT_STMT -> · TYPE_SPEC ID, ;
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, float
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, void
FUNC_LIST -> FUNC_DEF · FUNC_LIST, #

[node|5]: [begin]
CMPL_UNIT -> FUNC_LIST ·, #

[node|6]: [begin]
FUNC_DEF -> INIT_STMT · ;, int
FUNC_DEF -> INIT_STMT · ;, float
FUNC_DEF -> INIT_STMT · ;, double
FUNC_DEF -> INIT_STMT · ;, void
FUNC_DEF -> INIT_STMT · ;, char
FUNC_DEF -> INIT_STMT · ;, #

[node|7]: [begin]
TYPE_SPEC -> double ·, ID

[node|8]: [begin]
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, void
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, char
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, double
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, #
INIT_STMT -> TYPE_SPEC · ID = EXPR, ;
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, float
INIT_STMT -> TYPE_SPEC · ID, ;

[node|9]: [begin]
TYPE_SPEC -> float ·, ID

[node|10]: [begin]
TYPE_SPEC -> char ·, ID

[node|11]: [begin]
FUNC_LIST -> FUNC_DEF FUNC_LIST ·, #

[node|12]: [begin]
FUNC_DEF -> INIT_STMT ; ·, #
FUNC_DEF -> INIT_STMT ; ·, char
FUNC_DEF -> INIT_STMT ; ·, double
FUNC_DEF -> INIT_STMT ; ·, int
FUNC_DEF -> INIT_STMT ; ·, void
FUNC_DEF -> INIT_STMT ; ·, float

[node|13]: [begin]
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, void
INIT_STMT -> TYPE_SPEC ID · = EXPR, ;
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, char
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, double
INIT_STMT -> TYPE_SPEC ID ·, ;
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, float

[node|14]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
INIT_STMT -> TYPE_SPEC ID = · EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
EXPR -> · TERM EXPR2, ;
FACTOR -> · CONST, *

[node|15]: [begin]
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, char
TYPE_SPEC -> · float, ID
ARG_LIST -> · ARGUMENT , ARG_LIST, )
TYPE_SPEC -> · int, ID
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, float
ARG_LIST -> · ARGUMENT, )
ARGUMENT -> · TYPE_SPEC ID, ,
ARGUMENT -> · TYPE_SPEC ID, )
TYPE_SPEC -> · void, ID
TYPE_SPEC -> · char, ID
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, double
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, void
TYPE_SPEC -> · double, ID
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, int
ARG_LIST -> ·, )

[node|16]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), *
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> ( · EXPR ), -
FACTOR -> ( · EXPR ), /
FACTOR -> ( · EXPR ), ;
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> ( · EXPR ), +
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|17]: [begin]
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, ;

[node|18]: [begin]
INIT_STMT -> TYPE_SPEC ID = EXPR ·, ;

[node|19]: [begin]
EXPR -> TERM · EXPR2, ;
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, ;

[node|20]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), ;
CALL_STMT -> ID · ( PARG_LIST ), +
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, +
FACTOR -> ID ·, ;
FACTOR -> ID ·, /
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), -

[node|21]: [begin]
TERM2 -> · / FACTOR TERM2, ;
TERM -> FACTOR · TERM2, +
TERM2 -> ·, +
TERM -> FACTOR · TERM2, ;
TERM2 -> · * FACTOR TERM2, -
TERM -> FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, ;
TERM2 -> · * FACTOR TERM2, +
TERM2 -> ·, -

[node|22]: [begin]
FACTOR -> CONST ·, +
FACTOR -> CONST ·, *
FACTOR -> CONST ·, /
FACTOR -> CONST ·, -
FACTOR -> CONST ·, ;

[node|23]: [begin]
ARG_LIST -> ARGUMENT ·, )
ARG_LIST -> ARGUMENT · , ARG_LIST, )

[node|24]: [begin]
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, double
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, char
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, float
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, void

[node|25]: [begin]
ARGUMENT -> TYPE_SPEC · ID, ,
ARGUMENT -> TYPE_SPEC · ID, )

[node|26]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), *
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> ( · EXPR ), /
FACTOR -> ( · EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> ( · EXPR ), +
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
FACTOR -> ( · EXPR ), )
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|27]: [begin]
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, )

[node|28]: [begin]
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), /
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), ;

[node|29]: [begin]
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> ·, )
EXPR -> TERM · EXPR2, )

[node|30]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), )
CALL_STMT -> ID · ( PARG_LIST ), +
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, +
FACTOR -> ID ·, )
FACTOR -> ID ·, /
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), -

[node|31]: [begin]
TERM2 -> · / FACTOR TERM2, )
TERM -> FACTOR · TERM2, +
TERM2 -> ·, +
TERM2 -> ·, )
TERM2 -> · * FACTOR TERM2, -
TERM -> FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, )
TERM -> FACTOR · TERM2, )
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> ·, -

[node|32]: [begin]
FACTOR -> CONST ·, )
FACTOR -> CONST ·, +
FACTOR -> CONST ·, *
FACTOR -> CONST ·, -
FACTOR -> CONST ·, /

[node|33]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
EXPR2 -> + · TERM EXPR2, ;
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CONST, *

[node|34]: [begin]
EXPR -> TERM EXPR2 ·, ;

[node|35]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
EXPR2 -> - · TERM EXPR2, ;
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CONST, *

[node|36]: [begin]
PARG_LIST -> · PARG, )
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), ;
CALL_STMT -> ID ( · PARG_LIST ), *
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), -
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), /
PARG_LIST -> ·, )

[node|37]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
TERM2 -> * · FACTOR TERM2, -
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
TERM2 -> * · FACTOR TERM2, ;
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · CONST, *

[node|38]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
TERM2 -> / · FACTOR TERM2, ;
FACTOR -> · CALL_STMT, *
TERM2 -> / · FACTOR TERM2, +
TERM2 -> / · FACTOR TERM2, -
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · CONST, *

[node|39]: [begin]
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, ;
TERM -> FACTOR TERM2 ·, +

[node|40]: [begin]
ARG_LIST -> ARGUMENT , · ARG_LIST, )
TYPE_SPEC -> · float, ID
ARG_LIST -> · ARGUMENT , ARG_LIST, )
TYPE_SPEC -> · int, ID
ARG_LIST -> · ARGUMENT, )
ARGUMENT -> · TYPE_SPEC ID, ,
ARGUMENT -> · TYPE_SPEC ID, )
TYPE_SPEC -> · void, ID
TYPE_SPEC -> · char, ID
TYPE_SPEC -> · double, ID
ARG_LIST -> ·, )

[node|41]: [begin]
CODE_BLOCK -> · { STMT_LIST }, #
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, float
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, double
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, #
CODE_BLOCK -> · { STMT_LIST }, char
CODE_BLOCK -> · { STMT_LIST }, int
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, char
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, void
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, double
CODE_BLOCK -> · { STMT_LIST }, void
CODE_BLOCK -> · { STMT_LIST }, float

[node|42]: [begin]
ARGUMENT -> TYPE_SPEC ID ·, )
ARGUMENT -> TYPE_SPEC ID ·, ,

[node|43]: [begin]
FACTOR -> ( EXPR · ), )
FACTOR -> ( EXPR · ), /
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), *

[node|44]: [begin]
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, ;
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, *

[node|45]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
EXPR2 -> + · TERM EXPR2, )
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|46]: [begin]
EXPR -> TERM EXPR2 ·, )

[node|47]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR2 -> - · TERM EXPR2, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|48]: [begin]
PARG_LIST -> · PARG, )
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), )
CALL_STMT -> ID ( · PARG_LIST ), *
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), -
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), /
PARG_LIST -> ·, )

[node|49]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
TERM2 -> * · FACTOR TERM2, -
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ( EXPR ), -
FACTOR -> · ID, +
TERM2 -> * · FACTOR TERM2, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|50]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ( EXPR ), -
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
TERM2 -> / · FACTOR TERM2, +
TERM2 -> / · FACTOR TERM2, -
TERM2 -> / · FACTOR TERM2, )
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|51]: [begin]
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, )
TERM -> FACTOR TERM2 ·, +

[node|52]: [begin]
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> + TERM · EXPR2, ;
EXPR2 -> · - TERM EXPR2, ;

[node|53]: [begin]
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> - TERM · EXPR2, ;
EXPR2 -> · - TERM EXPR2, ;

[node|54]: [begin]
PARG_LIST -> PARG · , PARG_LIST, )
PARG_LIST -> PARG ·, )

[node|55]: [begin]
PARG -> ID ·, )
PARG -> ID ·, ,

[node|56]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), ;
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), -

[node|57]: [begin]
TERM2 -> · / FACTOR TERM2, ;
TERM2 -> * FACTOR · TERM2, +
TERM2 -> ·, +
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> * FACTOR · TERM2, ;
TERM2 -> ·, ;
TERM2 -> · * FACTOR TERM2, +
TERM2 -> * FACTOR · TERM2, -
TERM2 -> ·, -

[node|58]: [begin]
TERM2 -> · / FACTOR TERM2, ;
TERM2 -> ·, +
TERM2 -> / FACTOR · TERM2, ;
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, ;
TERM2 -> · * FACTOR TERM2, +
TERM2 -> ·, -

[node|59]: [begin]
ARG_LIST -> ARGUMENT , ARG_LIST ·, )

[node|60]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
CODE_BLOCK -> { · STMT_LIST }, #
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> { · STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
CODE_BLOCK -> { · STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
CODE_BLOCK -> { · STMT_LIST }, char
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> { · STMT_LIST }, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
CODE_BLOCK -> { · STMT_LIST }, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|61]: [begin]
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, double
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, void
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, char
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, #
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, int
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, float

[node|62]: [begin]
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, )
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, *

[node|63]: [begin]
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> ·, )
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> + TERM · EXPR2, )

[node|64]: [begin]
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> - TERM · EXPR2, )
EXPR2 -> ·, )
EXPR2 -> · - TERM EXPR2, )

[node|65]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), )

[node|66]: [begin]
TERM2 -> · / FACTOR TERM2, )
TERM2 -> * FACTOR · TERM2, +
TERM2 -> ·, +
TERM2 -> * FACTOR · TERM2, )
TERM2 -> ·, )
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, )
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, -
TERM2 -> * FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> ·, -

[node|67]: [begin]
TERM2 -> · / FACTOR TERM2, )
TERM2 -> ·, +
TERM2 -> ·, )
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, )
TERM2 -> · / FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, -
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · / FACTOR TERM2, -
TERM2 -> / FACTOR · TERM2, )
TERM2 -> · * FACTOR TERM2, +
TERM2 -> ·, -

[node|68]: [begin]
EXPR2 -> + TERM EXPR2 ·, ;

[node|69]: [begin]
EXPR2 -> - TERM EXPR2 ·, ;

[node|70]: [begin]
PARG_LIST -> · PARG, )
PARG -> · ID, ,
PARG_LIST -> PARG , · PARG_LIST, )
PARG -> · ID, )
PARG_LIST -> · PARG , PARG_LIST, )
PARG_LIST -> ·, )

[node|71]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, ;
CALL_STMT -> ID ( PARG_LIST ) ·, +

[node|72]: [begin]
TERM2 -> * FACTOR TERM2 ·, ;
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, +

[node|73]: [begin]
TERM2 -> / FACTOR TERM2 ·, ;
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, -

[node|74]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
STMT_LIST -> ITER_STMT · STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|75]: [begin]
STMT_LIST -> ASSIGN_STMT · ; STMT_LIST, }

[node|76]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
RTN_STMT -> return · EXPR, ;
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
EXPR -> · TERM EXPR2, ;
FACTOR -> · CONST, *

[node|77]: [begin]
STMT_LIST -> INIT_STMT · ; STMT_LIST, }

[node|78]: [begin]
CODE_BLOCK -> { STMT_LIST · }, int
CODE_BLOCK -> { STMT_LIST · }, float
CODE_BLOCK -> { STMT_LIST · }, void
CODE_BLOCK -> { STMT_LIST · }, char
CODE_BLOCK -> { STMT_LIST · }, #
CODE_BLOCK -> { STMT_LIST · }, double

[node|79]: [begin]
STMT_LIST -> EXPR · ; STMT_LIST, }

[node|80]: [begin]
ITER_STMT -> while · ( STMT ) STMT, return
ITER_STMT -> while · ( STMT ) CODE_BLOCK, char
ITER_STMT -> while · ( STMT ) STMT, for
ITER_STMT -> while · ( STMT ) STMT, CONST
ITER_STMT -> while · ( STMT ) CODE_BLOCK, int
ITER_STMT -> while · ( STMT ) CODE_BLOCK, }
ITER_STMT -> while · ( STMT ) STMT, ID
ITER_STMT -> while · ( STMT ) CODE_BLOCK, return
ITER_STMT -> while · ( STMT ) CODE_BLOCK, double
ITER_STMT -> while · ( STMT ) STMT, while
ITER_STMT -> while · ( STMT ) STMT, char
ITER_STMT -> while · ( STMT ) CODE_BLOCK, (
ITER_STMT -> while · ( STMT ) CODE_BLOCK, for
ITER_STMT -> while · ( STMT ) CODE_BLOCK, CONST
ITER_STMT -> while · ( STMT ) CODE_BLOCK, float
ITER_STMT -> while · ( STMT ) STMT, if
ITER_STMT -> while · ( STMT ) STMT, void
ITER_STMT -> while · ( STMT ) STMT, double
ITER_STMT -> while · ( STMT ) CODE_BLOCK, while
ITER_STMT -> while · ( STMT ) STMT, (
ITER_STMT -> while · ( STMT ) STMT, float
ITER_STMT -> while · ( STMT ) CODE_BLOCK, if
ITER_STMT -> while · ( STMT ) STMT, int
ITER_STMT -> while · ( STMT ) CODE_BLOCK, void
ITER_STMT -> while · ( STMT ) STMT, }
ITER_STMT -> while · ( STMT ) CODE_BLOCK, ID

[node|81]: [begin]
STMT_LIST -> RTN_STMT · ; STMT_LIST, }

[node|82]: [begin]
INIT_STMT -> TYPE_SPEC · ID = EXPR, ;
INIT_STMT -> TYPE_SPEC · ID, ;

[node|83]: [begin]
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> if · ( STMT ) STMT ;, float
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, return
IF_STMT -> if · ( STMT ) CODE_BLOCK, while
IF_STMT -> if · ( STMT ) STMT ;, while
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> if · ( STMT ) CODE_BLOCK, (
IF_STMT -> if · ( STMT ) STMT ;, (
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> if · ( STMT ) CODE_BLOCK, return
IF_STMT -> if · ( STMT ) CODE_BLOCK, float
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, for
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, double
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, return
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, ID
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, CONST
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> if · ( STMT ) CODE_BLOCK, int
IF_STMT -> if · ( STMT ) CODE_BLOCK, double
IF_STMT -> if · ( STMT ) CODE_BLOCK, CONST
IF_STMT -> if · ( STMT ) STMT ;, CONST
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, void
IF_STMT -> if · ( STMT ) CODE_BLOCK, }
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> if · ( STMT ) CODE_BLOCK, for
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> if · ( STMT ) STMT ;, return
IF_STMT -> if · ( STMT ) STMT ;, for
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> if · ( STMT ) STMT ;, void
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, while
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, char
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> if · ( STMT ) CODE_BLOCK, char
IF_STMT -> if · ( STMT ) STMT ;, char
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> if · ( STMT ) STMT ;, ID
IF_STMT -> if · ( STMT ) CODE_BLOCK, ID
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, char
IF_STMT -> if · ( STMT ) CODE_BLOCK, void
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> if · ( STMT ) STMT ;, if
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, double
IF_STMT -> if · ( STMT ) STMT ;, int
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, (
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, char
IF_STMT -> if · ( STMT ) STMT ;, }
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, void
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> if · ( STMT ) STMT ;, double
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> if · ( STMT ) CODE_BLOCK, if
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, for

[node|84]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), ;
CALL_STMT -> ID · ( PARG_LIST ), +
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, +
FACTOR -> ID ·, ;
FACTOR -> ID ·, /
ASSIGN_STMT -> ID · = EXPR, ;
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), -

[node|85]: [begin]
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, }
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, CONST
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, return
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, void
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, return
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, char
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, float
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, (

[node|86]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
STMT_LIST -> IF_STMT · STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|87]: [begin]
EXPR2 -> + TERM EXPR2 ·, )

[node|88]: [begin]
EXPR2 -> - TERM EXPR2 ·, )

[node|89]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, )
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, +

[node|90]: [begin]
TERM2 -> * FACTOR TERM2 ·, )
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, +

[node|91]: [begin]
TERM2 -> / FACTOR TERM2 ·, )
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, -

[node|92]: [begin]
PARG_LIST -> PARG , PARG_LIST ·, )

[node|93]: [begin]
STMT_LIST -> ITER_STMT STMT_LIST ·, }

[node|94]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
STMT_LIST -> ASSIGN_STMT ; · STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|95]: [begin]
RTN_STMT -> return EXPR ·, ;

[node|96]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
STMT_LIST -> INIT_STMT ; · STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|97]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, float
CODE_BLOCK -> { STMT_LIST } ·, char
CODE_BLOCK -> { STMT_LIST } ·, double
CODE_BLOCK -> { STMT_LIST } ·, void
CODE_BLOCK -> { STMT_LIST } ·, int
CODE_BLOCK -> { STMT_LIST } ·, #

[node|98]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
STMT_LIST -> EXPR ; · STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|99]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
ITER_STMT -> while ( · STMT ) STMT, CONST
ITER_STMT -> while ( · STMT ) CODE_BLOCK, double
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
ITER_STMT -> while ( · STMT ) CODE_BLOCK, CONST
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
ITER_STMT -> while ( · STMT ) STMT, char
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
ITER_STMT -> while ( · STMT ) CODE_BLOCK, char
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
ITER_STMT -> while ( · STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
ITER_STMT -> while ( · STMT ) CODE_BLOCK, int
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
ITER_STMT -> while ( · STMT ) CODE_BLOCK, for
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
ITER_STMT -> while ( · STMT ) CODE_BLOCK, return
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
ITER_STMT -> while ( · STMT ) STMT, ID
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
ITER_STMT -> while ( · STMT ) STMT, return
ITER_STMT -> while ( · STMT ) CODE_BLOCK, }
ITER_STMT -> while ( · STMT ) STMT, void
FACTOR -> · ( EXPR ), )
EXPR -> · TERM EXPR2, !=
ITER_STMT -> while ( · STMT ) STMT, float
ITER_STMT -> while ( · STMT ) STMT, while
ITER_STMT -> while ( · STMT ) CODE_BLOCK, while
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
ITER_STMT -> while ( · STMT ) STMT, if
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ITER_STMT -> while ( · STMT ) STMT, int
FACTOR -> · CALL_STMT, !=
ITER_STMT -> while ( · STMT ) CODE_BLOCK, void
CALL_STMT -> · ID ( PARG_LIST ), +
ITER_STMT -> while ( · STMT ) STMT, }
ITER_STMT -> while ( · STMT ) CODE_BLOCK, ID
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
ITER_STMT -> while ( · STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
ITER_STMT -> while ( · STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), ==
ITER_STMT -> while ( · STMT ) STMT, double
FACTOR -> · CALL_STMT, >=
ITER_STMT -> while ( · STMT ) STMT, (
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
ITER_STMT -> while ( · STMT ) CODE_BLOCK, if
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, >

[node|100]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
STMT_LIST -> RTN_STMT ; · STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|101]: [begin]
INIT_STMT -> TYPE_SPEC ID · = EXPR, ;
INIT_STMT -> TYPE_SPEC ID ·, ;

[node|102]: [begin]
IF_STMT -> if ( · STMT ) CODE_BLOCK, float
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, float
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, int
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
IF_STMT -> if ( · STMT ) CODE_BLOCK, ID
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> if ( · STMT ) STMT ;, void
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> if ( · STMT ) CODE_BLOCK, int
EXPR -> · TERM EXPR2, ==
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, double
FACTOR -> · ( EXPR ), *
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, }
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
IF_STMT -> if ( · STMT ) STMT ;, for
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, ID
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
IF_STMT -> if ( · STMT ) STMT ;, (
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, )
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, double
FACTOR -> · CONST, !=
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, CONST
FACTOR -> · ID, )
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, return
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, void
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, (
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, }
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, float
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
IF_STMT -> if ( · STMT ) STMT ;, char
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, char
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, while
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
IF_STMT -> if ( · STMT ) STMT ;, CONST
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, (
TERM -> · FACTOR TERM2 , +
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, CONST
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
IF_STMT -> if ( · STMT ) CODE_BLOCK, return
IF_STMT -> if ( · STMT ) STMT ;, return
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, }
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> if ( · STMT ) CODE_BLOCK, for
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, return
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, void
STMT -> · IF_STMT, )
IF_STMT -> if ( · STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, }
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, for
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, for
FACTOR -> · CALL_STMT, ==
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, ID
FACTOR -> · ( EXPR ), )
IF_STMT -> if ( · STMT ) CODE_BLOCK, char
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, void
EXPR -> · TERM EXPR2, !=
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, return
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> if ( · STMT ) STMT ;, ID
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, (
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
IF_STMT -> if ( · STMT ) STMT ;, double
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, char
TERM -> · FACTOR TERM2 , >=
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, for
IF_STMT -> if ( · STMT ) CODE_BLOCK, void
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> if ( · STMT ) CODE_BLOCK, CONST
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> if ( · STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, ID
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
IF_STMT -> if ( · STMT ) STMT ;, if
FACTOR -> · CONST, )
IF_STMT -> if ( · STMT ) CODE_BLOCK, while
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, CONST
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, while
IF_STMT -> if ( · STMT ) CODE_BLOCK, }
FACTOR -> · ( EXPR ), ==
IF_STMT -> if ( · STMT ) CODE_BLOCK, if
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, ID
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
IF_STMT -> if ( · STMT ) STMT ;, }
ASSIGN_STMT -> · ID = EXPR, )
IF_STMT -> if ( · STMT ) CODE_BLOCK, (
IF_STMT -> if ( · STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, if
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, char
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, int
EXPR -> · TERM EXPR2, >
IF_STMT -> if ( · STMT ) STMT ;, float

[node|103]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
ASSIGN_STMT -> ID = · EXPR, ;
EXPR -> · TERM EXPR2, ;
FACTOR -> · CONST, *

[node|104]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, ID
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, char
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, return
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, CONST
STMT -> · IF_STMT, ;
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, float
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, void
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, return
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, }
FACTOR -> · CONST, *
JUST_STMT -> · EXPR >= EXPR, ;
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, CONST
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, ID
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, char
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, while
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, (
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, if
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, }
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, while
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, float
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, void
FACTOR -> · CALL_STMT, >=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, for
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, int
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|105]: [begin]
STMT_LIST -> IF_STMT STMT_LIST ·, }

[node|106]: [begin]
STMT_LIST -> ASSIGN_STMT ; STMT_LIST ·, }

[node|107]: [begin]
STMT_LIST -> INIT_STMT ; STMT_LIST ·, }

[node|108]: [begin]
STMT_LIST -> EXPR ; STMT_LIST ·, }

[node|109]: [begin]
STMT -> ITER_STMT ·, )

[node|110]: [begin]
FACTOR -> ( · EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), *
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> ( · EXPR ), !=
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> ( · EXPR ), /
FACTOR -> ( · EXPR ), -
FACTOR -> · CONST, )
FACTOR -> ( · EXPR ), <
FACTOR -> ( · EXPR ), >=
FACTOR -> · ID, )
FACTOR -> ( · EXPR ), +
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> ( · EXPR ), >
FACTOR -> · ( EXPR ), *
FACTOR -> ( · EXPR ), <=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
FACTOR -> ( · EXPR ), )
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|111]: [begin]
STMT -> ASSIGN_STMT ·, )

[node|112]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
RTN_STMT -> return · EXPR, )
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|113]: [begin]
ITER_STMT -> while ( STMT · ) STMT, return
ITER_STMT -> while ( STMT · ) STMT, ID
ITER_STMT -> while ( STMT · ) STMT, void
ITER_STMT -> while ( STMT · ) CODE_BLOCK, }
ITER_STMT -> while ( STMT · ) STMT, if
ITER_STMT -> while ( STMT · ) CODE_BLOCK, CONST
ITER_STMT -> while ( STMT · ) CODE_BLOCK, for
ITER_STMT -> while ( STMT · ) CODE_BLOCK, int
ITER_STMT -> while ( STMT · ) STMT, int
ITER_STMT -> while ( STMT · ) STMT, }
ITER_STMT -> while ( STMT · ) CODE_BLOCK, void
ITER_STMT -> while ( STMT · ) STMT, char
ITER_STMT -> while ( STMT · ) CODE_BLOCK, ID
ITER_STMT -> while ( STMT · ) CODE_BLOCK, return
ITER_STMT -> while ( STMT · ) STMT, float
ITER_STMT -> while ( STMT · ) CODE_BLOCK, while
ITER_STMT -> while ( STMT · ) STMT, double
ITER_STMT -> while ( STMT · ) STMT, (
ITER_STMT -> while ( STMT · ) CODE_BLOCK, double
ITER_STMT -> while ( STMT · ) STMT, while
ITER_STMT -> while ( STMT · ) CODE_BLOCK, float
ITER_STMT -> while ( STMT · ) CODE_BLOCK, (
ITER_STMT -> while ( STMT · ) CODE_BLOCK, char
ITER_STMT -> while ( STMT · ) STMT, for
ITER_STMT -> while ( STMT · ) STMT, CONST
ITER_STMT -> while ( STMT · ) CODE_BLOCK, if

[node|114]: [begin]
STMT -> INIT_STMT ·, )

[node|115]: [begin]
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, >=
FACTOR -> CALL_STMT ·, ==
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, )
FACTOR -> CALL_STMT ·, !=
FACTOR -> CALL_STMT ·, <
FACTOR -> CALL_STMT ·, <=
FACTOR -> CALL_STMT ·, >

[node|116]: [begin]
STMT -> EXPR ·, )
JUST_STMT -> EXPR · > EXPR, )
JUST_STMT -> EXPR · >= EXPR, )
JUST_STMT -> EXPR · == EXPR, )
JUST_STMT -> EXPR · <= EXPR, )
JUST_STMT -> EXPR · != EXPR, )
JUST_STMT -> EXPR · < EXPR, )

[node|117]: [begin]
ITER_STMT -> while · ( STMT ) STMT, )
ITER_STMT -> while · ( STMT ) CODE_BLOCK, )

[node|118]: [begin]
STMT -> RTN_STMT ·, )

[node|119]: [begin]
INIT_STMT -> TYPE_SPEC · ID, )
INIT_STMT -> TYPE_SPEC · ID = EXPR, )

[node|120]: [begin]
EXPR -> TERM · EXPR2, <=
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · + TERM EXPR2, ==
EXPR -> TERM · EXPR2, >
EXPR2 -> ·, <=
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> ·, !=
EXPR -> TERM · EXPR2, )
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> ·, <
EXPR -> TERM · EXPR2, >=
EXPR2 -> ·, >=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, >=
EXPR -> TERM · EXPR2, ==
EXPR -> TERM · EXPR2, <
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> ·, >
EXPR2 -> ·, ==
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, !=
EXPR -> TERM · EXPR2, !=
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> ·, )
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, <

[node|121]: [begin]
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, )
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> if · ( STMT ) CODE_BLOCK, )
IF_STMT -> if · ( STMT ) STMT ;, )
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, )
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, )

[node|122]: [begin]
FACTOR -> ID ·, >
CALL_STMT -> ID · ( PARG_LIST ), )
FACTOR -> ID ·, <=
ASSIGN_STMT -> ID · = EXPR, )
CALL_STMT -> ID · ( PARG_LIST ), <=
FACTOR -> ID ·, )
CALL_STMT -> ID · ( PARG_LIST ), >
CALL_STMT -> ID · ( PARG_LIST ), /
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), <
FACTOR -> ID ·, *
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), ==
FACTOR -> ID ·, !=
CALL_STMT -> ID · ( PARG_LIST ), +
CALL_STMT -> ID · ( PARG_LIST ), >=
FACTOR -> ID ·, >=
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), !=
FACTOR -> ID ·, ==
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, <
FACTOR -> ID ·, /

[node|123]: [begin]
TERM2 -> · / FACTOR TERM2, )
TERM2 -> ·, >
TERM2 -> ·, <=
TERM2 -> ·, !=
TERM -> FACTOR · TERM2, >=
TERM2 -> · * FACTOR TERM2, <=
TERM -> FACTOR · TERM2, +
TERM2 -> ·, +
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> ·, )
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, >
TERM -> FACTOR · TERM2, <
TERM2 -> · / FACTOR TERM2, ==
TERM -> FACTOR · TERM2, )
TERM2 -> · * FACTOR TERM2, )
TERM -> FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, +
TERM -> FACTOR · TERM2, !=
TERM2 -> · / FACTOR TERM2, >=
TERM -> FACTOR · TERM2, <=
TERM -> FACTOR · TERM2, >
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · * FACTOR TERM2, >
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, <
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · * FACTOR TERM2, >=
TERM -> FACTOR · TERM2, ==
TERM2 -> ·, -

[node|124]: [begin]
STMT -> JUST_STMT ·, )

[node|125]: [begin]
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, )
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, )

[node|126]: [begin]
FACTOR -> CONST ·, >
FACTOR -> CONST ·, )
FACTOR -> CONST ·, +
FACTOR -> CONST ·, ==
FACTOR -> CONST ·, >=
FACTOR -> CONST ·, *
FACTOR -> CONST ·, -
FACTOR -> CONST ·, /
FACTOR -> CONST ·, <=
FACTOR -> CONST ·, <
FACTOR -> CONST ·, !=

[node|127]: [begin]
STMT -> IF_STMT ·, )

[node|128]: [begin]
STMT_LIST -> RTN_STMT ; STMT_LIST ·, }

[node|129]: [begin]
IF_STMT -> if ( STMT · ) STMT ;, double
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, if
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, return
IF_STMT -> if ( STMT · ) STMT ;, float
IF_STMT -> if ( STMT · ) CODE_BLOCK, float
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, float
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, void
IF_STMT -> if ( STMT · ) STMT ;, while
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, double
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, for
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, (
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, double
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, double
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, (
IF_STMT -> if ( STMT · ) STMT ;, char
IF_STMT -> if ( STMT · ) CODE_BLOCK, double
IF_STMT -> if ( STMT · ) CODE_BLOCK, (
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, float
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, void
IF_STMT -> if ( STMT · ) CODE_BLOCK, void
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, (
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, float
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, int
IF_STMT -> if ( STMT · ) CODE_BLOCK, int
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, }
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, }
IF_STMT -> if ( STMT · ) CODE_BLOCK, }
IF_STMT -> if ( STMT · ) STMT ;, ID
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, int
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, while
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, }
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, char
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, for
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, void
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, CONST
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, int
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, CONST
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, return
IF_STMT -> if ( STMT · ) STMT ;, }
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, char
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> if ( STMT · ) CODE_BLOCK, for
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, ID
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, for
IF_STMT -> if ( STMT · ) CODE_BLOCK, CONST
IF_STMT -> if ( STMT · ) STMT ;, int
IF_STMT -> if ( STMT · ) CODE_BLOCK, return
IF_STMT -> if ( STMT · ) CODE_BLOCK, ID
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, ID
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, return
IF_STMT -> if ( STMT · ) STMT ;, void
IF_STMT -> if ( STMT · ) STMT ;, if
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, while
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, ID
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, char
IF_STMT -> if ( STMT · ) STMT ;, return
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, if
IF_STMT -> if ( STMT · ) CODE_BLOCK, if
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, char
IF_STMT -> if ( STMT · ) STMT ;, for
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, while
IF_STMT -> if ( STMT · ) STMT ;, (
IF_STMT -> if ( STMT · ) STMT ;, CONST
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, if
IF_STMT -> if ( STMT · ) CODE_BLOCK, while
IF_STMT -> if ( STMT · ) CODE_BLOCK, char
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, if

[node|130]: [begin]
ASSIGN_STMT -> ID = EXPR ·, ;

[node|131]: [begin]
STMT -> ITER_STMT ·, ;

[node|132]: [begin]
FACTOR -> ( · EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), *
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> ( · EXPR ), !=
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> ( · EXPR ), /
FACTOR -> ( · EXPR ), -
FACTOR -> ( · EXPR ), ;
FACTOR -> · CONST, )
FACTOR -> ( · EXPR ), <
FACTOR -> ( · EXPR ), >=
FACTOR -> · ID, )
FACTOR -> ( · EXPR ), +
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> ( · EXPR ), >
FACTOR -> · ( EXPR ), *
FACTOR -> ( · EXPR ), <=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|133]: [begin]
STMT -> ASSIGN_STMT ·, ;

[node|134]: [begin]
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, ID
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, ID
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, char
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, if
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, }
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, for
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, CONST
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, int
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, void
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, double
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, return
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, float
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, float
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, while
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, (
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, (
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, char
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, CONST
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, void
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, return

[node|135]: [begin]
STMT -> INIT_STMT ·, ;

[node|136]: [begin]
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, >=
FACTOR -> CALL_STMT ·, ==
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, !=
FACTOR -> CALL_STMT ·, <
FACTOR -> CALL_STMT ·, <=
FACTOR -> CALL_STMT ·, >
FACTOR -> CALL_STMT ·, ;

[node|137]: [begin]
JUST_STMT -> EXPR · > EXPR, ;
STMT -> EXPR ·, ;
JUST_STMT -> EXPR · != EXPR, ;
JUST_STMT -> EXPR · < EXPR, ;
JUST_STMT -> EXPR · <= EXPR, ;
JUST_STMT -> EXPR · == EXPR, ;
JUST_STMT -> EXPR · >= EXPR, ;

[node|138]: [begin]
ITER_STMT -> while · ( STMT ) CODE_BLOCK, ;
ITER_STMT -> while · ( STMT ) STMT, ;

[node|139]: [begin]
STMT -> RTN_STMT ·, ;

[node|140]: [begin]
EXPR -> TERM · EXPR2, <=
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> ·, <=
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> ·, !=
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> ·, <
EXPR -> TERM · EXPR2, >=
EXPR2 -> ·, >=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, >=
EXPR -> TERM · EXPR2, ==
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> ·, >
EXPR2 -> ·, ==
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, !=
EXPR -> TERM · EXPR2, !=
EXPR -> TERM · EXPR2, ;
EXPR -> TERM · EXPR2, >
EXPR2 -> · - TERM EXPR2, ;
EXPR -> TERM · EXPR2, <
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, <

[node|141]: [begin]
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, ;
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, ;
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, ;
IF_STMT -> if · ( STMT ) CODE_BLOCK, ;
IF_STMT -> if · ( STMT ) STMT ;, ;

[node|142]: [begin]
FACTOR -> ID ·, >
FACTOR -> ID ·, <=
CALL_STMT -> ID · ( PARG_LIST ), <=
CALL_STMT -> ID · ( PARG_LIST ), >
ASSIGN_STMT -> ID · = EXPR, ;
CALL_STMT -> ID · ( PARG_LIST ), /
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), <
CALL_STMT -> ID · ( PARG_LIST ), ;
FACTOR -> ID ·, *
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), ==
FACTOR -> ID ·, !=
CALL_STMT -> ID · ( PARG_LIST ), +
CALL_STMT -> ID · ( PARG_LIST ), >=
FACTOR -> ID ·, >=
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), !=
FACTOR -> ID ·, ==
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, ;
FACTOR -> ID ·, <
FACTOR -> ID ·, /

[node|143]: [begin]
TERM2 -> ·, >
TERM2 -> ·, <=
TERM2 -> · / FACTOR TERM2, ;
TERM2 -> ·, !=
TERM -> FACTOR · TERM2, >=
TERM2 -> · * FACTOR TERM2, <=
TERM -> FACTOR · TERM2, +
TERM2 -> ·, +
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, >
TERM -> FACTOR · TERM2, <
TERM -> FACTOR · TERM2, ;
TERM2 -> · * FACTOR TERM2, -
TERM -> FACTOR · TERM2, -
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, +
TERM -> FACTOR · TERM2, !=
TERM2 -> · / FACTOR TERM2, >=
TERM -> FACTOR · TERM2, <=
TERM -> FACTOR · TERM2, >
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · * FACTOR TERM2, >
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, <
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> ·, ;
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, >=
TERM -> FACTOR · TERM2, ==
TERM2 -> ·, -

[node|144]: [begin]
STMT -> JUST_STMT ·, ;

[node|145]: [begin]
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, ;

[node|146]: [begin]
FACTOR -> CONST ·, >
FACTOR -> CONST ·, +
FACTOR -> CONST ·, ==
FACTOR -> CONST ·, >=
FACTOR -> CONST ·, *
FACTOR -> CONST ·, -
FACTOR -> CONST ·, /
FACTOR -> CONST ·, <=
FACTOR -> CONST ·, <
FACTOR -> CONST ·, !=
FACTOR -> CONST ·, ;

[node|147]: [begin]
STMT -> IF_STMT ·, ;

[node|148]: [begin]
FACTOR -> ( EXPR · ), >=
FACTOR -> ( EXPR · ), )
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), /
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), ==
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), <
FACTOR -> ( EXPR · ), !=
FACTOR -> ( EXPR · ), <=
FACTOR -> ( EXPR · ), >

[node|149]: [begin]
RTN_STMT -> return EXPR ·, )

[node|150]: [begin]
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
STMT -> · ASSIGN_STMT, char
IF_STMT -> · if ( STMT ) STMT ;, while
INIT_STMT -> · TYPE_SPEC ID = EXPR, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
STMT -> · JUST_STMT, for
STMT -> · JUST_STMT, (
TERM -> · FACTOR TERM2 , char
ITER_STMT -> while ( STMT ) · CODE_BLOCK, double
FACTOR -> · ID, char
CODE_BLOCK -> · { STMT_LIST }, double
INIT_STMT -> · TYPE_SPEC ID, for
ITER_STMT -> · while ( STMT ) STMT, double
CODE_BLOCK -> · { STMT_LIST }, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
JUST_STMT -> · EXPR > EXPR, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ASSIGN_STMT -> · ID = EXPR, double
INIT_STMT -> · TYPE_SPEC ID, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
TERM -> · FACTOR TERM2 , return
TERM -> · FACTOR TERM2 , }
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT -> · IF_STMT, for
EXPR -> · TERM EXPR2, >=
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR == EXPR, }
FACTOR -> · CALL_STMT, float
STMT -> · ITER_STMT, void
EXPR -> · TERM EXPR2, CONST
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
JUST_STMT -> · EXPR <= EXPR, CONST
EXPR -> · TERM EXPR2, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
JUST_STMT -> · EXPR >= EXPR, ID
EXPR -> · TERM EXPR2, ID
FACTOR -> · CALL_STMT, void
JUST_STMT -> · EXPR <= EXPR, while
FACTOR -> · ( EXPR ), <
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
FACTOR -> · CALL_STMT, }
ITER_STMT -> · while ( STMT ) STMT, float
STMT -> · JUST_STMT, void
STMT -> · INIT_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
STMT -> · RTN_STMT, for
ITER_STMT -> while ( STMT ) · CODE_BLOCK, ID
JUST_STMT -> · EXPR >= EXPR, return
STMT -> · IF_STMT, if
ITER_STMT -> while ( STMT ) · STMT, CONST
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · ITER_STMT, float
FACTOR -> · CONST, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · while ( STMT ) STMT, for
STMT -> · EXPR, for
EXPR -> · TERM EXPR2, <=
INIT_STMT -> · TYPE_SPEC ID, char
RTN_STMT -> · return EXPR, int
ITER_STMT -> while ( STMT ) · CODE_BLOCK, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
JUST_STMT -> · EXPR < EXPR, return
RTN_STMT -> · return EXPR, ID
JUST_STMT -> · EXPR <= EXPR, return
FACTOR -> · CALL_STMT, return
FACTOR -> · CALL_STMT, ==
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) STMT ;, void
STMT -> · ASSIGN_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
JUST_STMT -> · EXPR == EXPR, float
STMT -> · EXPR, if
RTN_STMT -> · return EXPR, (
STMT -> · RTN_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
JUST_STMT -> · EXPR > EXPR, double
CODE_BLOCK -> · { STMT_LIST }, return
RTN_STMT -> · return EXPR, if
STMT -> · EXPR, (
IF_STMT -> · if ( STMT ) STMT ;, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
TERM -> · FACTOR TERM2 , void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
INIT_STMT -> · TYPE_SPEC ID, (
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> while ( STMT ) · STMT, if
STMT -> · EXPR, while
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
JUST_STMT -> · EXPR < EXPR, void
STMT -> · ASSIGN_STMT, if
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR <= EXPR, if
JUST_STMT -> · EXPR != EXPR, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> while ( STMT ) · STMT, while
STMT -> · EXPR, ID
RTN_STMT -> · return EXPR, double
STMT -> · ITER_STMT, return
IF_STMT -> · if ( STMT ) STMT ;, char
STMT -> · ASSIGN_STMT, while
CALL_STMT -> · ID ( PARG_LIST ), int
EXPR -> · TERM EXPR2, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
FACTOR -> · ID, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
JUST_STMT -> · EXPR > EXPR, CONST
EXPR -> · TERM EXPR2, >
IF_STMT -> · if ( STMT ) STMT ;, return
CODE_BLOCK -> · { STMT_LIST }, ID
TYPE_SPEC -> · float, ID
STMT -> · INIT_STMT, while
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
STMT -> · IF_STMT, (
INIT_STMT -> · TYPE_SPEC ID = EXPR, char
JUST_STMT -> · EXPR == EXPR, return
JUST_STMT -> · EXPR > EXPR, float
JUST_STMT -> · EXPR == EXPR, void
ITER_STMT -> while ( STMT ) · CODE_BLOCK, float
JUST_STMT -> · EXPR <= EXPR, for
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
FACTOR -> · ( EXPR ), char
CODE_BLOCK -> · { STMT_LIST }, (
JUST_STMT -> · EXPR < EXPR, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
STMT -> · IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
FACTOR -> · CONST, float
STMT -> · EXPR, int
FACTOR -> · CALL_STMT, ID
EXPR -> · TERM EXPR2, void
STMT -> · ITER_STMT, CONST
CODE_BLOCK -> · { STMT_LIST }, if
ITER_STMT -> while ( STMT ) · STMT, for
FACTOR -> · ( EXPR ), for
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
JUST_STMT -> · EXPR <= EXPR, void
STMT -> · ASSIGN_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
IF_STMT -> · if ( STMT ) STMT ;, double
JUST_STMT -> · EXPR >= EXPR, char
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, (
IF_STMT -> · if ( STMT ) STMT ;, if
ASSIGN_STMT -> · ID = EXPR, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
TERM -> · FACTOR TERM2 , !=
EXPR -> · TERM EXPR2, while
JUST_STMT -> · EXPR < EXPR, for
ITER_STMT -> while ( STMT ) · CODE_BLOCK, int
JUST_STMT -> · EXPR != EXPR, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
FACTOR -> · CALL_STMT, if
TERM -> · FACTOR TERM2 , for
STMT -> · INIT_STMT, int
TERM -> · FACTOR TERM2 , >
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
JUST_STMT -> · EXPR == EXPR, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
JUST_STMT -> · EXPR < EXPR, float
STMT -> · JUST_STMT, ID
STMT -> · IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
STMT -> · RTN_STMT, ID
FACTOR -> · CONST, void
JUST_STMT -> · EXPR > EXPR, return
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) STMT ;, float
FACTOR -> · ( EXPR ), while
FACTOR -> · CONST, <
ASSIGN_STMT -> · ID = EXPR, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
INIT_STMT -> · TYPE_SPEC ID = EXPR, (
STMT -> · IF_STMT, char
STMT -> · ASSIGN_STMT, ID
JUST_STMT -> · EXPR != EXPR, while
ASSIGN_STMT -> · ID = EXPR, void
JUST_STMT -> · EXPR == EXPR, ID
JUST_STMT -> · EXPR <= EXPR, ID
RTN_STMT -> · return EXPR, return
TYPE_SPEC -> · void, ID
RTN_STMT -> · return EXPR, void
STMT -> · INIT_STMT, (
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
FACTOR -> · CALL_STMT, for
ITER_STMT -> while ( STMT ) · STMT, char
STMT -> · INIT_STMT, char
JUST_STMT -> · EXPR != EXPR, CONST
STMT -> · JUST_STMT, }
EXPR -> · TERM EXPR2, !=
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
JUST_STMT -> · EXPR < EXPR, while
CODE_BLOCK -> · { STMT_LIST }, char
INIT_STMT -> · TYPE_SPEC ID = EXPR, ID
JUST_STMT -> · EXPR != EXPR, char
STMT -> · EXPR, }
FACTOR -> · CALL_STMT, *
STMT -> · INIT_STMT, for
TERM -> · FACTOR TERM2 , int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
JUST_STMT -> · EXPR <= EXPR, double
JUST_STMT -> · EXPR > EXPR, void
STMT -> · EXPR, void
FACTOR -> · CONST, >
JUST_STMT -> · EXPR > EXPR, for
EXPR -> · TERM EXPR2, <
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
FACTOR -> · CONST, ID
FACTOR -> · CALL_STMT, !=
STMT -> · RTN_STMT, void
CALL_STMT -> · ID ( PARG_LIST ), +
JUST_STMT -> · EXPR >= EXPR, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
TERM -> · FACTOR TERM2 , if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
FACTOR -> · CONST, int
STMT -> · EXPR, char
INIT_STMT -> · TYPE_SPEC ID, double
INIT_STMT -> · TYPE_SPEC ID, void
STMT -> · ASSIGN_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
RTN_STMT -> · return EXPR, while
FACTOR -> · ( EXPR ), int
INIT_STMT -> · TYPE_SPEC ID, if
STMT -> · RTN_STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
FACTOR -> · ( EXPR ), void
JUST_STMT -> · EXPR != EXPR, int
JUST_STMT -> · EXPR <= EXPR, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
STMT -> · ITER_STMT, for
JUST_STMT -> · EXPR > EXPR, int
FACTOR -> · ( EXPR ), CONST
INIT_STMT -> · TYPE_SPEC ID = EXPR, int
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
STMT -> · ASSIGN_STMT, CONST
ASSIGN_STMT -> · ID = EXPR, char
JUST_STMT -> · EXPR <= EXPR, }
STMT -> · ASSIGN_STMT, void
CALL_STMT -> · ID ( PARG_LIST ), CONST
ITER_STMT -> while ( STMT ) · STMT, int
CALL_STMT -> · ID ( PARG_LIST ), (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
JUST_STMT -> · EXPR != EXPR, (
FACTOR -> · ID, CONST
JUST_STMT -> · EXPR < EXPR, char
ITER_STMT -> while ( STMT ) · CODE_BLOCK, while
ASSIGN_STMT -> · ID = EXPR, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
JUST_STMT -> · EXPR > EXPR, while
FACTOR -> · CONST, }
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
INIT_STMT -> · TYPE_SPEC ID, return
ITER_STMT -> · while ( STMT ) STMT, if
STMT -> · JUST_STMT, double
TERM -> · FACTOR TERM2 , while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
STMT -> · RTN_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
JUST_STMT -> · EXPR < EXPR, CONST
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
TERM -> · FACTOR TERM2 , CONST
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT -> · JUST_STMT, char
ITER_STMT -> while ( STMT ) · CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ;, ID
STMT -> · RTN_STMT, return
STMT -> · ITER_STMT, if
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
STMT -> · ITER_STMT, double
STMT -> · INIT_STMT, ID
STMT -> · RTN_STMT, if
JUST_STMT -> · EXPR == EXPR, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
ITER_STMT -> while ( STMT ) · STMT, float
JUST_STMT -> · EXPR < EXPR, }
STMT -> · ASSIGN_STMT, return
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, float
ITER_STMT -> while ( STMT ) · CODE_BLOCK, char
STMT -> · JUST_STMT, if
JUST_STMT -> · EXPR != EXPR, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
JUST_STMT -> · EXPR == EXPR, CONST
STMT -> · ITER_STMT, ID
FACTOR -> · CALL_STMT, CONST
FACTOR -> · ( EXPR ), float
ITER_STMT -> while ( STMT ) · CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
CODE_BLOCK -> · { STMT_LIST }, void
STMT -> · RTN_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
JUST_STMT -> · EXPR == EXPR, while
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
JUST_STMT -> · EXPR >= EXPR, for
FACTOR -> · CALL_STMT, <
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
STMT -> · INIT_STMT, return
ITER_STMT -> · while ( STMT ) STMT, (
STMT -> · INIT_STMT, void
JUST_STMT -> · EXPR >= EXPR, float
STMT -> · INIT_STMT, CONST
RTN_STMT -> · return EXPR, char
IF_STMT -> · if ( STMT ) STMT ;, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, }
JUST_STMT -> · EXPR != EXPR, if
JUST_STMT -> · EXPR >= EXPR, (
INIT_STMT -> · TYPE_SPEC ID = EXPR, void
FACTOR -> · CONST, >=
FACTOR -> · ID, }
RTN_STMT -> · return EXPR, for
FACTOR -> · ID, <=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
FACTOR -> · CONST, if
JUST_STMT -> · EXPR != EXPR, return
TERM -> · FACTOR TERM2 , ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
STMT -> · ITER_STMT, while
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
JUST_STMT -> · EXPR >= EXPR, if
EXPR -> · TERM EXPR2, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
CALL_STMT -> · ID ( PARG_LIST ), ID
JUST_STMT -> · EXPR != EXPR, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
JUST_STMT -> · EXPR >= EXPR, double
CODE_BLOCK -> · { STMT_LIST }, while
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
STMT -> · EXPR, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
STMT -> · IF_STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
TERM -> · FACTOR TERM2 , (
JUST_STMT -> · EXPR > EXPR, (
STMT -> · IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
ITER_STMT -> while ( STMT ) · STMT, }
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · JUST_STMT, return
ASSIGN_STMT -> · ID = EXPR, for
EXPR -> · TERM EXPR2, return
RTN_STMT -> · return EXPR, }
STMT -> · RTN_STMT, int
FACTOR -> · ID, !=
STMT -> · INIT_STMT, float
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, float
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), return
ITER_STMT -> while ( STMT ) · STMT, double
ITER_STMT -> while ( STMT ) · STMT, void
JUST_STMT -> · EXPR > EXPR, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
STMT -> · ITER_STMT, (
CALL_STMT -> · ID ( PARG_LIST ), ==
STMT -> · IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ;, CONST
INIT_STMT -> · TYPE_SPEC ID = EXPR, CONST
CODE_BLOCK -> · { STMT_LIST }, for
ITER_STMT -> · while ( STMT ) STMT, return
FACTOR -> · CONST, for
FACTOR -> · ID, >=
STMT -> · IF_STMT, return
STMT -> · IF_STMT, void
ASSIGN_STMT -> · ID = EXPR, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
JUST_STMT -> · EXPR < EXPR, ID
STMT -> · EXPR, float
JUST_STMT -> · EXPR >= EXPR, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, <=
FACTOR -> · ID, if
ITER_STMT -> while ( STMT ) · STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
JUST_STMT -> · EXPR == EXPR, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
INIT_STMT -> · TYPE_SPEC ID, int
JUST_STMT -> · EXPR >= EXPR, while
ITER_STMT -> while ( STMT ) · CODE_BLOCK, CONST
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
ASSIGN_STMT -> · ID = EXPR, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
FACTOR -> · CONST, (
JUST_STMT -> · EXPR <= EXPR, char
FACTOR -> · ID, double
ITER_STMT -> while ( STMT ) · STMT, return
JUST_STMT -> · EXPR >= EXPR, CONST
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ASSIGN_STMT -> · ID = EXPR, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
TERM -> · FACTOR TERM2 , <
INIT_STMT -> · TYPE_SPEC ID = EXPR, double
JUST_STMT -> · EXPR <= EXPR, int
STMT -> · ITER_STMT, char
EXPR -> · TERM EXPR2, int
CALL_STMT -> · ID ( PARG_LIST ), float
TYPE_SPEC -> · int, ID
JUST_STMT -> · EXPR == EXPR, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
STMT -> · INIT_STMT, double
FACTOR -> · CONST, !=
STMT -> · JUST_STMT, CONST
INIT_STMT -> · TYPE_SPEC ID, float
RTN_STMT -> · return EXPR, CONST
FACTOR -> · CALL_STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID, CONST
STMT -> · JUST_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ( EXPR ), if
FACTOR -> · ID, >
JUST_STMT -> · EXPR <= EXPR, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
FACTOR -> · ( EXPR ), >=
CALL_STMT -> · ID ( PARG_LIST ), if
JUST_STMT -> · EXPR < EXPR, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
TERM -> · FACTOR TERM2 , float
STMT -> · IF_STMT, CONST
JUST_STMT -> · EXPR == EXPR, char
INIT_STMT -> · TYPE_SPEC ID = EXPR, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
TERM -> · FACTOR TERM2 , double
STMT -> · ITER_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
JUST_STMT -> · EXPR == EXPR, int
FACTOR -> · ID, int
STMT -> · IF_STMT, while
FACTOR -> · ID, *
TYPE_SPEC -> · char, ID
STMT -> · ASSIGN_STMT, int
ITER_STMT -> while ( STMT ) · CODE_BLOCK, void
ITER_STMT -> · while ( STMT ) STMT, }
STMT -> · RTN_STMT, char
CODE_BLOCK -> · { STMT_LIST }, }
ITER_STMT -> while ( STMT ) · CODE_BLOCK, }
FACTOR -> · ID, (
STMT -> · JUST_STMT, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
FACTOR -> · CONST, double
STMT -> · RTN_STMT, CONST
STMT -> · ASSIGN_STMT, (
RTN_STMT -> · return EXPR, float
ITER_STMT -> while ( STMT ) · STMT, (
ASSIGN_STMT -> · ID = EXPR, (
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
INIT_STMT -> · TYPE_SPEC ID = EXPR, for
CODE_BLOCK -> · { STMT_LIST }, CONST
FACTOR -> · CONST, CONST
TERM -> · FACTOR TERM2 , >=
STMT -> · JUST_STMT, while
JUST_STMT -> · EXPR < EXPR, int
STMT -> · ITER_STMT, int
JUST_STMT -> · EXPR < EXPR, if
CALL_STMT -> · ID ( PARG_LIST ), double
STMT -> · EXPR, CONST
JUST_STMT -> · EXPR != EXPR, double
FACTOR -> · ID, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
EXPR -> · TERM EXPR2, }
STMT -> · RTN_STMT, }
ITER_STMT -> · while ( STMT ) STMT, char
TERM -> · FACTOR TERM2 , ==
INIT_STMT -> · TYPE_SPEC ID, while
FACTOR -> · ( EXPR ), double
ITER_STMT -> · while ( STMT ) STMT, ID
ASSIGN_STMT -> · ID = EXPR, int
JUST_STMT -> · EXPR >= EXPR, void
FACTOR -> · ID, <
ITER_STMT -> while ( STMT ) · CODE_BLOCK, return
ASSIGN_STMT -> · ID = EXPR, ID
JUST_STMT -> · EXPR > EXPR, char
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT -> · ASSIGN_STMT, double
INIT_STMT -> · TYPE_SPEC ID, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
FACTOR -> · ( EXPR ), }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
STMT -> · INIT_STMT, if
EXPR -> · TERM EXPR2, double
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, if
CALL_STMT -> · ID ( PARG_LIST ), }
JUST_STMT -> · EXPR > EXPR, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
TERM -> · FACTOR TERM2 , -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
FACTOR -> · ID, return
STMT -> · EXPR, double

[node|151]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
JUST_STMT -> EXPR < · EXPR, )
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|152]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
JUST_STMT -> EXPR <= · EXPR, )
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|153]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
JUST_STMT -> EXPR >= · EXPR, )
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|154]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
JUST_STMT -> EXPR == · EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|155]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
JUST_STMT -> EXPR > · EXPR, )
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|156]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
JUST_STMT -> EXPR != · EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|157]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
EXPR -> · TERM EXPR2, !=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , >=
ITER_STMT -> while ( · STMT ) STMT, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
ITER_STMT -> while ( · STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, >

[node|158]: [begin]
INIT_STMT -> TYPE_SPEC ID ·, )
INIT_STMT -> TYPE_SPEC ID · = EXPR, )

[node|159]: [begin]
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
EXPR2 -> + · TERM EXPR2, <=
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
EXPR2 -> + · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, <=
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, !=
EXPR2 -> + · TERM EXPR2, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , >
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TERM -> · FACTOR TERM2 , <=
EXPR2 -> + · TERM EXPR2, <
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
EXPR2 -> + · TERM EXPR2, !=
FACTOR -> · CONST, >
EXPR2 -> + · TERM EXPR2, >=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR2 -> + · TERM EXPR2, >
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · ( EXPR ), <=
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=

[node|160]: [begin]
EXPR -> TERM EXPR2 ·, <
EXPR -> TERM EXPR2 ·, )
EXPR -> TERM EXPR2 ·, >=
EXPR -> TERM EXPR2 ·, <=
EXPR -> TERM EXPR2 ·, !=
EXPR -> TERM EXPR2 ·, >
EXPR -> TERM EXPR2 ·, ==

[node|161]: [begin]
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, <=
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, !=
EXPR2 -> - · TERM EXPR2, <
EXPR2 -> - · TERM EXPR2, >
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , >
FACTOR -> · ID, >
EXPR2 -> - · TERM EXPR2, !=
FACTOR -> · ( EXPR ), >=
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
EXPR2 -> - · TERM EXPR2, <=
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
EXPR2 -> - · TERM EXPR2, >=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR2 -> - · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · ( EXPR ), <=
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), !=
EXPR2 -> - · TERM EXPR2, ==
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=

[node|162]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
IF_STMT -> if ( · STMT ) STMT ;, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
IF_STMT -> if ( · STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), )
EXPR -> · TERM EXPR2, !=
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, )
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, )
EXPR -> · TERM EXPR2, >

[node|163]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
ASSIGN_STMT -> ID = · EXPR, )
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|164]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), <=
PARG_LIST -> · PARG, )
CALL_STMT -> ID ( · PARG_LIST ), )
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), *
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), !=
CALL_STMT -> ID ( · PARG_LIST ), >=
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), ==
PARG_LIST -> ·, )
CALL_STMT -> ID ( · PARG_LIST ), -
CALL_STMT -> ID ( · PARG_LIST ), /
CALL_STMT -> ID ( · PARG_LIST ), >
CALL_STMT -> ID ( · PARG_LIST ), <

[node|165]: [begin]
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, <
FACTOR -> · CALL_STMT, <=
TERM2 -> * · FACTOR TERM2, ==
FACTOR -> · CONST, /
FACTOR -> · CONST, -
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, *
FACTOR -> · CONST, !=
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, <=
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · ID, <=
FACTOR -> · CONST, )
TERM2 -> * · FACTOR TERM2, >=
TERM2 -> * · FACTOR TERM2, -
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), !=
FACTOR -> · ( EXPR ), <=
TERM2 -> * · FACTOR TERM2, <
FACTOR -> · CALL_STMT, ==
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
TERM2 -> * · FACTOR TERM2, <=
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
TERM2 -> * · FACTOR TERM2, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, -
TERM2 -> * · FACTOR TERM2, >
FACTOR -> · ( EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, >=
FACTOR -> · ( EXPR ), *
FACTOR -> · ID, >
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), >=
CALL_STMT -> · ID ( PARG_LIST ), ==
CALL_STMT -> · ID ( PARG_LIST ), >
TERM2 -> * · FACTOR TERM2, !=
FACTOR -> · CONST, ==
FACTOR -> · CONST, >
FACTOR -> · ID, >=
FACTOR -> · ID, ==
FACTOR -> · CONST, *
FACTOR -> · CONST, >=

[node|166]: [begin]
FACTOR -> · CALL_STMT, !=
TERM2 -> / · FACTOR TERM2, ==
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, <
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
FACTOR -> · CONST, /
FACTOR -> · CONST, -
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, *
FACTOR -> · CONST, !=
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, <=
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, <
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
TERM2 -> / · FACTOR TERM2, !=
FACTOR -> · ID, <=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CALL_STMT, ==
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), )
FACTOR -> · ( EXPR ), <
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, >=
FACTOR -> · ID, >
TERM2 -> / · FACTOR TERM2, >
TERM2 -> / · FACTOR TERM2, <=
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), >=
TERM2 -> / · FACTOR TERM2, <
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM2 -> / · FACTOR TERM2, +
TERM2 -> / · FACTOR TERM2, -
TERM2 -> / · FACTOR TERM2, )
TERM2 -> / · FACTOR TERM2, >=
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
FACTOR -> · CONST, >
FACTOR -> · ID, >=
FACTOR -> · ID, ==
FACTOR -> · CONST, *
FACTOR -> · CONST, >=

[node|167]: [begin]
TERM -> FACTOR TERM2 ·, >
TERM -> FACTOR TERM2 ·, <=
TERM -> FACTOR TERM2 ·, !=
TERM -> FACTOR TERM2 ·, ==
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, )
TERM -> FACTOR TERM2 ·, <
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, >=

[node|168]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
STMT -> · IF_STMT, ;
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
FACTOR -> · CONST, *
JUST_STMT -> · EXPR >= EXPR, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, )
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|169]: [begin]
CODE_BLOCK -> · { STMT_LIST }, ID
TYPE_SPEC -> · float, ID
IF_STMT -> if ( STMT ) · CODE_BLOCK, if
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
CODE_BLOCK -> · { STMT_LIST }, else
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, for
IF_STMT -> if ( STMT ) · CODE_BLOCK, CONST
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
IF_STMT -> if ( STMT ) · STMT ;, CONST
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, while
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, if
CODE_BLOCK -> · { STMT_LIST }, double
IF_STMT -> if ( STMT ) · STMT ;, void
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CODE_BLOCK -> · { STMT_LIST }, int
IF_STMT -> if ( STMT ) · CODE_BLOCK, while
CALL_STMT -> · ID ( PARG_LIST ), *
CODE_BLOCK -> · { STMT_LIST }, (
IF_STMT -> if ( STMT ) · CODE_BLOCK, double
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, }
IF_STMT -> if ( STMT ) · STMT ;, float
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, return
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, void
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, if
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, return
STMT -> · INIT_STMT, ;
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, void
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, int
CODE_BLOCK -> · { STMT_LIST }, if
STMT -> · IF_STMT, ;
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, CONST
JUST_STMT -> · EXPR <= EXPR, ;
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, float
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, (
IF_STMT -> if ( STMT ) · CODE_BLOCK, char
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, return
FACTOR -> · CONST, *
IF_STMT -> if ( STMT ) · STMT ;, for
JUST_STMT -> · EXPR >= EXPR, ;
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, while
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> if ( STMT ) · CODE_BLOCK, return
IF_STMT -> if ( STMT ) · CODE_BLOCK, void
IF_STMT -> if ( STMT ) · STMT ;, }
TERM -> · FACTOR TERM2 , !=
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, char
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
IF_STMT -> if ( STMT ) · STMT ;, double
CODE_BLOCK -> · { STMT_LIST }, void
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, while
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, for
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
IF_STMT -> if ( STMT ) · CODE_BLOCK, float
FACTOR -> · ID, >
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, ID
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
IF_STMT -> if ( STMT ) · CODE_BLOCK, (
STMT -> · EXPR, ;
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if ( STMT ) · STMT ;, if
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> if ( STMT ) · STMT ;, return
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, (
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, float
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, void
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, double
FACTOR -> · ID, *
IF_STMT -> if ( STMT ) · CODE_BLOCK, }
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, float
FACTOR -> · CALL_STMT, ==
CODE_BLOCK -> · { STMT_LIST }, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, ID
EXPR -> · TERM EXPR2, !=
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, int
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, CONST
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, if
CODE_BLOCK -> · { STMT_LIST }, char
CODE_BLOCK -> · { STMT_LIST }, while
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, }
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, int
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
CODE_BLOCK -> · { STMT_LIST }, CONST
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, CONST
TERM -> · FACTOR TERM2 , >=
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, int
IF_STMT -> if ( STMT ) · STMT ;, ID
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, }
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CODE_BLOCK -> · { STMT_LIST }, return
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, return
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> if ( STMT ) · CODE_BLOCK, int
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, if
IF_STMT -> if ( STMT ) · CODE_BLOCK, for
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, CONST
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, char
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
IF_STMT -> if ( STMT ) · STMT ;, int
FACTOR -> · ( EXPR ), !=
IF_STMT -> if ( STMT ) · CODE_BLOCK, ID
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, ID
IF_STMT -> if ( STMT ) · STMT ;, (
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, char
CODE_BLOCK -> · { STMT_LIST }, float
FACTOR -> · CONST, +
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, char
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, ID
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
IF_STMT -> if ( STMT ) · STMT ;, char
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, double
IF_STMT -> if ( STMT ) · STMT ;, while
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, for
CALL_STMT -> · ID ( PARG_LIST ), ==
CODE_BLOCK -> · { STMT_LIST }, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, double
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|170]: [begin]
FACTOR -> ( EXPR · ), >=
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), /
FACTOR -> ( EXPR · ), ==
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), <
FACTOR -> ( EXPR · ), !=
FACTOR -> ( EXPR · ), ;
FACTOR -> ( EXPR · ), <=
FACTOR -> ( EXPR · ), >

[node|171]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, float
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, void
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, double
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, for
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, CONST
STMT -> · IF_STMT, ;
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, ID
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, while
FACTOR -> · CONST, *
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, char
JUST_STMT -> · EXPR >= EXPR, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, (
TERM -> · FACTOR TERM2 , !=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, int
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, float
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, return
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, CONST
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, ID
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, }
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, return
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, void
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, double
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, }
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, for
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, if
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|172]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> EXPR < · EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
EXPR -> · TERM EXPR2, ;
FACTOR -> · CONST, *

[node|173]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
JUST_STMT -> EXPR <= · EXPR, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
EXPR -> · TERM EXPR2, ;
FACTOR -> · CONST, *

[node|174]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> EXPR >= · EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
EXPR -> · TERM EXPR2, ;
FACTOR -> · CONST, *

[node|175]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
JUST_STMT -> EXPR == · EXPR, ;
EXPR -> · TERM EXPR2, ;
FACTOR -> · CONST, *

[node|176]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> EXPR > · EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
EXPR -> · TERM EXPR2, ;
FACTOR -> · CONST, *

[node|177]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
JUST_STMT -> EXPR != · EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
EXPR -> · TERM EXPR2, ;
FACTOR -> · CONST, *

[node|178]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
EXPR -> · TERM EXPR2, !=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
ITER_STMT -> while ( · STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
ITER_STMT -> while ( · STMT ) STMT, ;
EXPR -> · TERM EXPR2, >

[node|179]: [begin]
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
EXPR2 -> + · TERM EXPR2, <=
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
EXPR2 -> + · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, <=
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
EXPR2 -> + · TERM EXPR2, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TERM -> · FACTOR TERM2 , <=
EXPR2 -> + · TERM EXPR2, <
TERM -> · FACTOR TERM2 , +
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · CALL_STMT, *
EXPR2 -> + · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · CONST, >
EXPR2 -> + · TERM EXPR2, >=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR2 -> + · TERM EXPR2, >
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), <=
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=

[node|180]: [begin]
EXPR -> TERM EXPR2 ·, <
EXPR -> TERM EXPR2 ·, ;
EXPR -> TERM EXPR2 ·, >=
EXPR -> TERM EXPR2 ·, <=
EXPR -> TERM EXPR2 ·, !=
EXPR -> TERM EXPR2 ·, >
EXPR -> TERM EXPR2 ·, ==

[node|181]: [begin]
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, <=
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
EXPR2 -> - · TERM EXPR2, <
EXPR2 -> - · TERM EXPR2, >
EXPR2 -> - · TERM EXPR2, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
TERM -> · FACTOR TERM2 , >
FACTOR -> · ID, >
EXPR2 -> - · TERM EXPR2, !=
FACTOR -> · ( EXPR ), >=
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
EXPR2 -> - · TERM EXPR2, <=
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR2 -> - · TERM EXPR2, >=
FACTOR -> · ( EXPR ), ;
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), <=
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), !=
EXPR2 -> - · TERM EXPR2, ==
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=

[node|182]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, ;
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
IF_STMT -> if ( · STMT ) STMT ;, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, ;
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
EXPR -> · TERM EXPR2, !=
IF_STMT -> if ( · STMT ) CODE_BLOCK, ;
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , >=
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, ;
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, >

[node|183]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), <=
PARG_LIST -> · PARG, )
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), *
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), !=
CALL_STMT -> ID ( · PARG_LIST ), >=
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), ==
PARG_LIST -> ·, )
CALL_STMT -> ID ( · PARG_LIST ), -
CALL_STMT -> ID ( · PARG_LIST ), /
CALL_STMT -> ID ( · PARG_LIST ), ;
CALL_STMT -> ID ( · PARG_LIST ), >
CALL_STMT -> ID ( · PARG_LIST ), <

[node|184]: [begin]
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, <
FACTOR -> · CALL_STMT, <=
TERM2 -> * · FACTOR TERM2, ==
FACTOR -> · CONST, /
FACTOR -> · CONST, -
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, *
FACTOR -> · CONST, !=
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · ID, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · ID, <=
FACTOR -> · CONST, ;
TERM2 -> * · FACTOR TERM2, >=
TERM2 -> * · FACTOR TERM2, -
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), !=
FACTOR -> · ( EXPR ), <=
TERM2 -> * · FACTOR TERM2, <
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
TERM2 -> * · FACTOR TERM2, <=
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), >=
TERM2 -> * · FACTOR TERM2, ;
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, -
TERM2 -> * · FACTOR TERM2, >
FACTOR -> · ( EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
FACTOR -> · ( EXPR ), ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · ( EXPR ), *
FACTOR -> · ID, >
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), >=
CALL_STMT -> · ID ( PARG_LIST ), ==
CALL_STMT -> · ID ( PARG_LIST ), ;
CALL_STMT -> · ID ( PARG_LIST ), >
TERM2 -> * · FACTOR TERM2, !=
FACTOR -> · CONST, ==
FACTOR -> · CONST, >
FACTOR -> · ID, >=
FACTOR -> · ID, ==
FACTOR -> · CONST, *
FACTOR -> · CONST, >=

[node|185]: [begin]
FACTOR -> · CALL_STMT, !=
TERM2 -> / · FACTOR TERM2, ==
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, <
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
FACTOR -> · CONST, /
FACTOR -> · CONST, -
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, *
FACTOR -> · CONST, !=
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, <=
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, <
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
TERM2 -> / · FACTOR TERM2, !=
FACTOR -> · ID, <=
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), <
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), >=
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
FACTOR -> · ( EXPR ), ;
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, >=
FACTOR -> · ID, >
TERM2 -> / · FACTOR TERM2, >
TERM2 -> / · FACTOR TERM2, <=
TERM2 -> / · FACTOR TERM2, ;
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), >=
TERM2 -> / · FACTOR TERM2, <
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM2 -> / · FACTOR TERM2, +
TERM2 -> / · FACTOR TERM2, -
TERM2 -> / · FACTOR TERM2, >=
CALL_STMT -> · ID ( PARG_LIST ), ;
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
FACTOR -> · CONST, >
FACTOR -> · ID, >=
FACTOR -> · ID, ==
FACTOR -> · CONST, *
FACTOR -> · CONST, >=

[node|186]: [begin]
TERM -> FACTOR TERM2 ·, >
TERM -> FACTOR TERM2 ·, <=
TERM -> FACTOR TERM2 ·, !=
TERM -> FACTOR TERM2 ·, ==
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, ;
TERM -> FACTOR TERM2 ·, <
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, >=

[node|187]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
STMT -> · IF_STMT, ;
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
FACTOR -> · CONST, *
JUST_STMT -> · EXPR >= EXPR, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, ;
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|188]: [begin]
FACTOR -> ( EXPR ) ·, <=
FACTOR -> ( EXPR ) ·, !=
FACTOR -> ( EXPR ) ·, >
FACTOR -> ( EXPR ) ·, ==
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, <
FACTOR -> ( EXPR ) ·, )
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, >=
FACTOR -> ( EXPR ) ·, *

[node|189]: [begin]
STMT -> ITER_STMT ·, char
STMT -> ITER_STMT ·, void
STMT -> ITER_STMT ·, float
STMT -> ITER_STMT ·, double
STMT -> ITER_STMT ·, return
STMT -> ITER_STMT ·, if
STMT -> ITER_STMT ·, }
STMT -> ITER_STMT ·, for
STMT -> ITER_STMT ·, CONST
STMT -> ITER_STMT ·, int
STMT -> ITER_STMT ·, while
STMT -> ITER_STMT ·, (
STMT -> ITER_STMT ·, ID

[node|190]: [begin]
FACTOR -> ( · EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), void
FACTOR -> ( · EXPR ), *
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> ( · EXPR ), int
FACTOR -> · ID, *
FACTOR -> ( · EXPR ), }
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> ( · EXPR ), !=
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> ( · EXPR ), -
FACTOR -> ( · EXPR ), /
FACTOR -> ( · EXPR ), char
FACTOR -> · CONST, )
FACTOR -> ( · EXPR ), <
FACTOR -> ( · EXPR ), >=
FACTOR -> · ID, )
FACTOR -> ( · EXPR ), +
FACTOR -> ( · EXPR ), (
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> ( · EXPR ), float
FACTOR -> · ID, +
FACTOR -> ( · EXPR ), return
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> ( · EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> ( · EXPR ), for
FACTOR -> ( · EXPR ), CONST
FACTOR -> ( · EXPR ), >
FACTOR -> · ( EXPR ), *
FACTOR -> ( · EXPR ), <=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
FACTOR -> ( · EXPR ), if
FACTOR -> ( · EXPR ), ID
FACTOR -> ( · EXPR ), while
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|191]: [begin]
STMT -> ASSIGN_STMT ·, }
STMT -> ASSIGN_STMT ·, for
STMT -> ASSIGN_STMT ·, CONST
STMT -> ASSIGN_STMT ·, while
STMT -> ASSIGN_STMT ·, ID
STMT -> ASSIGN_STMT ·, float
STMT -> ASSIGN_STMT ·, return
STMT -> ASSIGN_STMT ·, void
STMT -> ASSIGN_STMT ·, char
STMT -> ASSIGN_STMT ·, if
STMT -> ASSIGN_STMT ·, double
STMT -> ASSIGN_STMT ·, int
STMT -> ASSIGN_STMT ·, (

[node|192]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, if
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
RTN_STMT -> return · EXPR, void
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
TERM -> · FACTOR TERM2 , CONST
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
EXPR -> · TERM EXPR2, void
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
RTN_STMT -> return · EXPR, for
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, int
FACTOR -> · CALL_STMT, while
RTN_STMT -> return · EXPR, (
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
EXPR -> · TERM EXPR2, CONST
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, char
EXPR -> · TERM EXPR2, ID
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
RTN_STMT -> return · EXPR, char
FACTOR -> · ( EXPR ), if
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , float
RTN_STMT -> return · EXPR, CONST
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
RTN_STMT -> return · EXPR, return
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
RTN_STMT -> return · EXPR, while
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
RTN_STMT -> return · EXPR, ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
RTN_STMT -> return · EXPR, double
TERM -> · FACTOR TERM2 , (
FACTOR -> · CONST, CONST
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR -> · TERM EXPR2, }
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
EXPR -> · TERM EXPR2, return
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
RTN_STMT -> return · EXPR, if
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR -> · TERM EXPR2, float
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
RTN_STMT -> return · EXPR, }
CALL_STMT -> · ID ( PARG_LIST ), void
RTN_STMT -> return · EXPR, int
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST
RTN_STMT -> return · EXPR, float

[node|193]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
CODE_BLOCK -> { · STMT_LIST }, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
CODE_BLOCK -> { · STMT_LIST }, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
CODE_BLOCK -> { · STMT_LIST }, if
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> { · STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
CODE_BLOCK -> { · STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
CODE_BLOCK -> { · STMT_LIST }, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
CODE_BLOCK -> { · STMT_LIST }, (
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
CODE_BLOCK -> { · STMT_LIST }, char
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
CODE_BLOCK -> { · STMT_LIST }, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> { · STMT_LIST }, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
CODE_BLOCK -> { · STMT_LIST }, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
CODE_BLOCK -> { · STMT_LIST }, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
CODE_BLOCK -> { · STMT_LIST }, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|194]: [begin]
ITER_STMT -> while ( STMT ) STMT ·, CONST
ITER_STMT -> while ( STMT ) STMT ·, float
ITER_STMT -> while ( STMT ) STMT ·, for
ITER_STMT -> while ( STMT ) STMT ·, while
ITER_STMT -> while ( STMT ) STMT ·, }
ITER_STMT -> while ( STMT ) STMT ·, int
ITER_STMT -> while ( STMT ) STMT ·, char
ITER_STMT -> while ( STMT ) STMT ·, ID
ITER_STMT -> while ( STMT ) STMT ·, (
ITER_STMT -> while ( STMT ) STMT ·, double
ITER_STMT -> while ( STMT ) STMT ·, if
ITER_STMT -> while ( STMT ) STMT ·, void
ITER_STMT -> while ( STMT ) STMT ·, return

[node|195]: [begin]
STMT -> INIT_STMT ·, CONST
STMT -> INIT_STMT ·, while
STMT -> INIT_STMT ·, float
STMT -> INIT_STMT ·, for
STMT -> INIT_STMT ·, }
STMT -> INIT_STMT ·, int
STMT -> INIT_STMT ·, char
STMT -> INIT_STMT ·, (
STMT -> INIT_STMT ·, ID
STMT -> INIT_STMT ·, double
STMT -> INIT_STMT ·, if
STMT -> INIT_STMT ·, void
STMT -> INIT_STMT ·, return

[node|196]: [begin]
FACTOR -> CALL_STMT ·, return
FACTOR -> CALL_STMT ·, >=
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, (
FACTOR -> CALL_STMT ·, while
FACTOR -> CALL_STMT ·, <=
FACTOR -> CALL_STMT ·, >
FACTOR -> CALL_STMT ·, if
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, void
FACTOR -> CALL_STMT ·, ==
FACTOR -> CALL_STMT ·, ID
FACTOR -> CALL_STMT ·, char
FACTOR -> CALL_STMT ·, !=
FACTOR -> CALL_STMT ·, <
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, }
FACTOR -> CALL_STMT ·, for
FACTOR -> CALL_STMT ·, CONST
FACTOR -> CALL_STMT ·, int
FACTOR -> CALL_STMT ·, double
FACTOR -> CALL_STMT ·, float

[node|197]: [begin]
JUST_STMT -> EXPR · == EXPR, CONST
JUST_STMT -> EXPR · <= EXPR, }
JUST_STMT -> EXPR · != EXPR, ID
JUST_STMT -> EXPR · < EXPR, if
JUST_STMT -> EXPR · < EXPR, int
JUST_STMT -> EXPR · != EXPR, int
STMT -> EXPR ·, CONST
JUST_STMT -> EXPR · >= EXPR, void
JUST_STMT -> EXPR · >= EXPR, for
STMT -> EXPR ·, float
JUST_STMT -> EXPR · == EXPR, (
JUST_STMT -> EXPR · < EXPR, double
STMT -> EXPR ·, void
JUST_STMT -> EXPR · != EXPR, float
JUST_STMT -> EXPR · > EXPR, for
JUST_STMT -> EXPR · == EXPR, char
JUST_STMT -> EXPR · <= EXPR, void
JUST_STMT -> EXPR · != EXPR, return
JUST_STMT -> EXPR · >= EXPR, double
JUST_STMT -> EXPR · != EXPR, for
JUST_STMT -> EXPR · == EXPR, ID
JUST_STMT -> EXPR · >= EXPR, char
STMT -> EXPR ·, for
STMT -> EXPR ·, double
JUST_STMT -> EXPR · == EXPR, }
JUST_STMT -> EXPR · >= EXPR, CONST
JUST_STMT -> EXPR · < EXPR, float
JUST_STMT -> EXPR · == EXPR, double
JUST_STMT -> EXPR · == EXPR, void
STMT -> EXPR ·, }
JUST_STMT -> EXPR · > EXPR, return
JUST_STMT -> EXPR · == EXPR, float
JUST_STMT -> EXPR · < EXPR, return
JUST_STMT -> EXPR · >= EXPR, (
JUST_STMT -> EXPR · < EXPR, void
JUST_STMT -> EXPR · >= EXPR, while
JUST_STMT -> EXPR · <= EXPR, return
JUST_STMT -> EXPR · > EXPR, int
JUST_STMT -> EXPR · > EXPR, CONST
JUST_STMT -> EXPR · == EXPR, while
JUST_STMT -> EXPR · <= EXPR, float
JUST_STMT -> EXPR · >= EXPR, }
JUST_STMT -> EXPR · >= EXPR, int
JUST_STMT -> EXPR · != EXPR, CONST
JUST_STMT -> EXPR · >= EXPR, if
STMT -> EXPR ·, if
STMT -> EXPR ·, return
JUST_STMT -> EXPR · <= EXPR, if
JUST_STMT -> EXPR · != EXPR, char
JUST_STMT -> EXPR · < EXPR, }
JUST_STMT -> EXPR · > EXPR, if
JUST_STMT -> EXPR · > EXPR, char
JUST_STMT -> EXPR · < EXPR, for
JUST_STMT -> EXPR · <= EXPR, while
JUST_STMT -> EXPR · < EXPR, (
JUST_STMT -> EXPR · != EXPR, (
JUST_STMT -> EXPR · <= EXPR, double
JUST_STMT -> EXPR · >= EXPR, float
STMT -> EXPR ·, ID
JUST_STMT -> EXPR · <= EXPR, CONST
JUST_STMT -> EXPR · > EXPR, (
JUST_STMT -> EXPR · <= EXPR, int
JUST_STMT -> EXPR · < EXPR, ID
JUST_STMT -> EXPR · > EXPR, double
JUST_STMT -> EXPR · == EXPR, for
JUST_STMT -> EXPR · > EXPR, void
JUST_STMT -> EXPR · >= EXPR, ID
JUST_STMT -> EXPR · != EXPR, }
STMT -> EXPR ·, (
JUST_STMT -> EXPR · <= EXPR, ID
JUST_STMT -> EXPR · == EXPR, int
JUST_STMT -> EXPR · >= EXPR, return
JUST_STMT -> EXPR · != EXPR, if
JUST_STMT -> EXPR · > EXPR, ID
JUST_STMT -> EXPR · <= EXPR, char
JUST_STMT -> EXPR · > EXPR, while
JUST_STMT -> EXPR · != EXPR, double
STMT -> EXPR ·, int
JUST_STMT -> EXPR · < EXPR, CONST
STMT -> EXPR ·, char
JUST_STMT -> EXPR · > EXPR, }
JUST_STMT -> EXPR · != EXPR, while
JUST_STMT -> EXPR · < EXPR, while
JUST_STMT -> EXPR · <= EXPR, for
JUST_STMT -> EXPR · < EXPR, char
JUST_STMT -> EXPR · <= EXPR, (
JUST_STMT -> EXPR · != EXPR, void
JUST_STMT -> EXPR · == EXPR, if
JUST_STMT -> EXPR · == EXPR, return
JUST_STMT -> EXPR · > EXPR, float
STMT -> EXPR ·, while

[node|198]: [begin]
STMT -> RTN_STMT ·, (
STMT -> RTN_STMT ·, return
STMT -> RTN_STMT ·, ID
STMT -> RTN_STMT ·, double
STMT -> RTN_STMT ·, char
STMT -> RTN_STMT ·, while
STMT -> RTN_STMT ·, for
STMT -> RTN_STMT ·, CONST
STMT -> RTN_STMT ·, }
STMT -> RTN_STMT ·, int
STMT -> RTN_STMT ·, float
STMT -> RTN_STMT ·, if
STMT -> RTN_STMT ·, void

[node|199]: [begin]
INIT_STMT -> TYPE_SPEC · ID, float
INIT_STMT -> TYPE_SPEC · ID, while
INIT_STMT -> TYPE_SPEC · ID = EXPR, char
INIT_STMT -> TYPE_SPEC · ID, (
INIT_STMT -> TYPE_SPEC · ID = EXPR, int
INIT_STMT -> TYPE_SPEC · ID = EXPR, }
INIT_STMT -> TYPE_SPEC · ID, for
INIT_STMT -> TYPE_SPEC · ID, CONST
INIT_STMT -> TYPE_SPEC · ID = EXPR, return
INIT_STMT -> TYPE_SPEC · ID, return
INIT_STMT -> TYPE_SPEC · ID = EXPR, double
INIT_STMT -> TYPE_SPEC · ID, void
INIT_STMT -> TYPE_SPEC · ID = EXPR, (
INIT_STMT -> TYPE_SPEC · ID = EXPR, CONST
INIT_STMT -> TYPE_SPEC · ID = EXPR, for
INIT_STMT -> TYPE_SPEC · ID = EXPR, float
INIT_STMT -> TYPE_SPEC · ID, char
INIT_STMT -> TYPE_SPEC · ID, ID
INIT_STMT -> TYPE_SPEC · ID, if
INIT_STMT -> TYPE_SPEC · ID = EXPR, while
INIT_STMT -> TYPE_SPEC · ID, int
INIT_STMT -> TYPE_SPEC · ID, }
INIT_STMT -> TYPE_SPEC · ID, double
INIT_STMT -> TYPE_SPEC · ID = EXPR, if
INIT_STMT -> TYPE_SPEC · ID = EXPR, void
INIT_STMT -> TYPE_SPEC · ID = EXPR, ID

[node|200]: [begin]
EXPR2 -> ·, while
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> · - TERM EXPR2, ID
EXPR -> TERM · EXPR2, return
EXPR -> TERM · EXPR2, ID
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · + TERM EXPR2, CONST
EXPR2 -> ·, double
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> · + TERM EXPR2, (
EXPR -> TERM · EXPR2, for
EXPR2 -> ·, if
EXPR2 -> ·, }
EXPR2 -> · + TERM EXPR2, char
EXPR2 -> · - TERM EXPR2, >
EXPR -> TERM · EXPR2, !=
EXPR2 -> ·, <=
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> ·, !=
EXPR2 -> ·, >=
EXPR -> TERM · EXPR2, (
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, return
EXPR -> TERM · EXPR2, ==
EXPR2 -> · - TERM EXPR2, float
EXPR -> TERM · EXPR2, float
EXPR2 -> ·, for
EXPR2 -> · + TERM EXPR2, ID
EXPR -> TERM · EXPR2, int
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, CONST
EXPR -> TERM · EXPR2, double
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> ·, ==
EXPR2 -> ·, >
EXPR2 -> ·, return
EXPR -> TERM · EXPR2, >
EXPR -> TERM · EXPR2, <=
EXPR2 -> ·, float
EXPR2 -> · - TERM EXPR2, char
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> ·, (
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> · + TERM EXPR2, >=
EXPR -> TERM · EXPR2, CONST
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, int
EXPR -> TERM · EXPR2, if
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> ·, char
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, ==
EXPR -> TERM · EXPR2, while
EXPR -> TERM · EXPR2, char
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> ·, <
EXPR2 -> ·, ID
EXPR2 -> · - TERM EXPR2, (
EXPR -> TERM · EXPR2, >=
EXPR -> TERM · EXPR2, void
EXPR2 -> ·, CONST
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> · - TERM EXPR2, for
EXPR -> TERM · EXPR2, }
EXPR2 -> ·, void
EXPR2 -> · + TERM EXPR2, while
EXPR -> TERM · EXPR2, <
EXPR2 -> · - TERM EXPR2, <

[node|201]: [begin]
FACTOR -> ID ·, >
FACTOR -> ID ·, <=
CALL_STMT -> ID · ( PARG_LIST ), ID
ASSIGN_STMT -> ID · = EXPR, char
CALL_STMT -> ID · ( PARG_LIST ), CONST
FACTOR -> ID ·, ID
CALL_STMT -> ID · ( PARG_LIST ), <=
ASSIGN_STMT -> ID · = EXPR, ID
CALL_STMT -> ID · ( PARG_LIST ), >
FACTOR -> ID ·, return
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), /
ASSIGN_STMT -> ID · = EXPR, if
FACTOR -> ID ·, for
FACTOR -> ID ·, CONST
CALL_STMT -> ID · ( PARG_LIST ), <
ASSIGN_STMT -> ID · = EXPR, int
CALL_STMT -> ID · ( PARG_LIST ), double
ASSIGN_STMT -> ID · = EXPR, }
CALL_STMT -> ID · ( PARG_LIST ), int
FACTOR -> ID ·, *
ASSIGN_STMT -> ID · = EXPR, double
CALL_STMT -> ID · ( PARG_LIST ), }
FACTOR -> ID ·, -
FACTOR -> ID ·, if
CALL_STMT -> ID · ( PARG_LIST ), float
CALL_STMT -> ID · ( PARG_LIST ), ==
CALL_STMT -> ID · ( PARG_LIST ), void
ASSIGN_STMT -> ID · = EXPR, float
FACTOR -> ID ·, while
FACTOR -> ID ·, !=
CALL_STMT -> ID · ( PARG_LIST ), +
CALL_STMT -> ID · ( PARG_LIST ), (
CALL_STMT -> ID · ( PARG_LIST ), char
CALL_STMT -> ID · ( PARG_LIST ), >=
ASSIGN_STMT -> ID · = EXPR, while
FACTOR -> ID ·, >=
FACTOR -> ID ·, char
FACTOR -> ID ·, +
FACTOR -> ID ·, (
ASSIGN_STMT -> ID · = EXPR, (
CALL_STMT -> ID · ( PARG_LIST ), !=
CALL_STMT -> ID · ( PARG_LIST ), while
FACTOR -> ID ·, void
FACTOR -> ID ·, ==
FACTOR -> ID ·, float
CALL_STMT -> ID · ( PARG_LIST ), if
FACTOR -> ID ·, }
ASSIGN_STMT -> ID · = EXPR, CONST
CALL_STMT -> ID · ( PARG_LIST ), *
ASSIGN_STMT -> ID · = EXPR, for
FACTOR -> ID ·, int
ASSIGN_STMT -> ID · = EXPR, return
FACTOR -> ID ·, double
FACTOR -> ID ·, <
CALL_STMT -> ID · ( PARG_LIST ), for
ASSIGN_STMT -> ID · = EXPR, void
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), return

[node|202]: [begin]
TERM2 -> ·, <=
TERM2 -> ·, while
TERM -> FACTOR · TERM2, while
TERM -> FACTOR · TERM2, float
TERM2 -> · / FACTOR TERM2, ==
TERM -> FACTOR · TERM2, +
TERM2 -> ·, +
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, ID
TERM -> FACTOR · TERM2, >
TERM2 -> ·, CONST
TERM -> FACTOR · TERM2, CONST
TERM2 -> ·, }
TERM2 -> · * FACTOR TERM2, >
TERM2 -> · * FACTOR TERM2, void
TERM2 -> ·, double
TERM2 -> · * FACTOR TERM2, ==
TERM -> FACTOR · TERM2, void
TERM2 -> · * FACTOR TERM2, +
TERM -> FACTOR · TERM2, return
TERM -> FACTOR · TERM2, ==
TERM2 -> ·, !=
TERM2 -> · * FACTOR TERM2, float
TERM -> FACTOR · TERM2, ID
TERM2 -> · / FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, !=
TERM -> FACTOR · TERM2, <
TERM2 -> · / FACTOR TERM2, for
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, +
TERM -> FACTOR · TERM2, !=
TERM2 -> · / FACTOR TERM2, >=
TERM -> FACTOR · TERM2, <=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, if
TERM2 -> · * FACTOR TERM2, ID
TERM -> FACTOR · TERM2, double
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · * FACTOR TERM2, for
TERM2 -> ·, >
TERM2 -> · / FACTOR TERM2, char
TERM2 -> · / FACTOR TERM2, void
TERM2 -> · * FACTOR TERM2, <=
TERM -> FACTOR · TERM2, (
TERM2 -> ·, (
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, return
TERM2 -> ·, float
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, for
TERM -> FACTOR · TERM2, for
TERM2 -> · * FACTOR TERM2, int
TERM2 -> ·, int
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · * FACTOR TERM2, (
TERM2 -> · * FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, <
TERM2 -> ·, -
TERM2 -> · / FACTOR TERM2, if
TERM -> FACTOR · TERM2, >=
TERM2 -> ·, ID
TERM2 -> · / FACTOR TERM2, >
TERM -> FACTOR · TERM2, char
TERM2 -> · / FACTOR TERM2, CONST
TERM2 -> ·, void
TERM2 -> ·, char
TERM -> FACTOR · TERM2, -
TERM -> FACTOR · TERM2, if
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · * FACTOR TERM2, char
TERM2 -> · * FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, (
TERM2 -> · / FACTOR TERM2, double
TERM -> FACTOR · TERM2, }
TERM -> FACTOR · TERM2, int
TERM2 -> · * FACTOR TERM2, if
TERM2 -> · / FACTOR TERM2, float
TERM2 -> · * FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, CONST
TERM2 -> · / FACTOR TERM2, int

[node|203]: [begin]
STMT -> JUST_STMT ·, void
STMT -> JUST_STMT ·, return
STMT -> JUST_STMT ·, char
STMT -> JUST_STMT ·, (
STMT -> JUST_STMT ·, for
STMT -> JUST_STMT ·, ID
STMT -> JUST_STMT ·, double
STMT -> JUST_STMT ·, CONST
STMT -> JUST_STMT ·, }
STMT -> JUST_STMT ·, while
STMT -> JUST_STMT ·, int
STMT -> JUST_STMT ·, float
STMT -> JUST_STMT ·, if

[node|204]: [begin]
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, char
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, if
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, double
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, void
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, int
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, (
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, ID
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, while
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, for
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, CONST
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, }
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, float
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, return

[node|205]: [begin]
FACTOR -> CONST ·, int
FACTOR -> CONST ·, }
FACTOR -> CONST ·, ==
FACTOR -> CONST ·, *
FACTOR -> CONST ·, void
FACTOR -> CONST ·, while
FACTOR -> CONST ·, ID
FACTOR -> CONST ·, <=
FACTOR -> CONST ·, if
FACTOR -> CONST ·, >
FACTOR -> CONST ·, double
FACTOR -> CONST ·, for
FACTOR -> CONST ·, CONST
FACTOR -> CONST ·, return
FACTOR -> CONST ·, float
FACTOR -> CONST ·, +
FACTOR -> CONST ·, char
FACTOR -> CONST ·, (
FACTOR -> CONST ·, >=
FACTOR -> CONST ·, -
FACTOR -> CONST ·, /
FACTOR -> CONST ·, <
FACTOR -> CONST ·, !=

[node|206]: [begin]
STMT -> IF_STMT ·, char
STMT -> IF_STMT ·, if
STMT -> IF_STMT ·, double
STMT -> IF_STMT ·, void
STMT -> IF_STMT ·, int
STMT -> IF_STMT ·, ID
STMT -> IF_STMT ·, for
STMT -> IF_STMT ·, (
STMT -> IF_STMT ·, CONST
STMT -> IF_STMT ·, while
STMT -> IF_STMT ·, }
STMT -> IF_STMT ·, float
STMT -> IF_STMT ·, return

[node|207]: [begin]
JUST_STMT -> EXPR < EXPR ·, )

[node|208]: [begin]
JUST_STMT -> EXPR <= EXPR ·, )

[node|209]: [begin]
JUST_STMT -> EXPR >= EXPR ·, )

[node|210]: [begin]
JUST_STMT -> EXPR == EXPR ·, )

[node|211]: [begin]
JUST_STMT -> EXPR > EXPR ·, )

[node|212]: [begin]
JUST_STMT -> EXPR != EXPR ·, )

[node|213]: [begin]
ITER_STMT -> while ( STMT · ) STMT, )
ITER_STMT -> while ( STMT · ) CODE_BLOCK, )

[node|214]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
INIT_STMT -> TYPE_SPEC ID = · EXPR, )
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|215]: [begin]
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> ·, <=
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> ·, !=
EXPR2 -> + TERM · EXPR2, >
EXPR2 -> ·, <
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> + TERM · EXPR2, ==
EXPR2 -> ·, >=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> + TERM · EXPR2, )
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> + TERM · EXPR2, !=
EXPR2 -> + TERM · EXPR2, <
EXPR2 -> + TERM · EXPR2, <=
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> ·, >
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> + TERM · EXPR2, >=
EXPR2 -> ·, ==
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> ·, )
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, <

[node|216]: [begin]
FACTOR -> ID ·, >
CALL_STMT -> ID · ( PARG_LIST ), )
FACTOR -> ID ·, <=
CALL_STMT -> ID · ( PARG_LIST ), <=
FACTOR -> ID ·, )
CALL_STMT -> ID · ( PARG_LIST ), >
CALL_STMT -> ID · ( PARG_LIST ), /
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), <
FACTOR -> ID ·, *
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), ==
FACTOR -> ID ·, !=
CALL_STMT -> ID · ( PARG_LIST ), +
CALL_STMT -> ID · ( PARG_LIST ), >=
FACTOR -> ID ·, >=
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), !=
FACTOR -> ID ·, ==
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, <
FACTOR -> ID ·, /

[node|217]: [begin]
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> - TERM · EXPR2, ==
EXPR2 -> ·, <=
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> ·, !=
EXPR2 -> - TERM · EXPR2, >
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> ·, <
EXPR2 -> ·, >=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> - TERM · EXPR2, >=
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> ·, >
EXPR2 -> ·, ==
EXPR2 -> - TERM · EXPR2, <=
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> - TERM · EXPR2, <
EXPR2 -> - TERM · EXPR2, !=
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> - TERM · EXPR2, )
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> ·, )
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, <

[node|218]: [begin]
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, )
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, )
IF_STMT -> if ( STMT · ) CODE_BLOCK, )
IF_STMT -> if ( STMT · ) STMT ;, )
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, )

[node|219]: [begin]
ASSIGN_STMT -> ID = EXPR ·, )

[node|220]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), >
CALL_STMT -> ID ( PARG_LIST · ), <=
CALL_STMT -> ID ( PARG_LIST · ), !=
CALL_STMT -> ID ( PARG_LIST · ), <
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), ==
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), )
CALL_STMT -> ID ( PARG_LIST · ), >=

[node|221]: [begin]
TERM2 -> · / FACTOR TERM2, )
TERM2 -> * FACTOR · TERM2, >
TERM2 -> ·, >
TERM2 -> * FACTOR · TERM2, <=
TERM2 -> ·, <=
TERM2 -> ·, !=
TERM2 -> * FACTOR · TERM2, !=
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> * FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> ·, +
TERM2 -> * FACTOR · TERM2, )
TERM2 -> ·, )
TERM2 -> · / FACTOR TERM2, >
TERM2 -> * FACTOR · TERM2, >=
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, )
TERM2 -> * FACTOR · TERM2, ==
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, +
TERM2 -> * FACTOR · TERM2, <
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · * FACTOR TERM2, >
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, <
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> * FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, -

[node|222]: [begin]
TERM2 -> · / FACTOR TERM2, )
TERM2 -> ·, >
TERM2 -> ·, <=
TERM2 -> ·, !=
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, +
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> ·, )
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, >
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, )
TERM2 -> / FACTOR · TERM2, <
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> / FACTOR · TERM2, >
TERM2 -> / FACTOR · TERM2, <=
TERM2 -> / FACTOR · TERM2, !=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · * FACTOR TERM2, >
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · / FACTOR TERM2, -
TERM2 -> / FACTOR · TERM2, )
TERM2 -> / FACTOR · TERM2, >=
TERM2 -> ·, <
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> / FACTOR · TERM2, ==
TERM2 -> ·, -

[node|223]: [begin]
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, )
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, )

[node|224]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
CODE_BLOCK -> { · STMT_LIST }, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
CODE_BLOCK -> { · STMT_LIST }, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
CODE_BLOCK -> { · STMT_LIST }, if
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> { · STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
CODE_BLOCK -> { · STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
CODE_BLOCK -> { · STMT_LIST }, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
CODE_BLOCK -> { · STMT_LIST }, (
CODE_BLOCK -> { · STMT_LIST }, else
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
CODE_BLOCK -> { · STMT_LIST }, char
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
CODE_BLOCK -> { · STMT_LIST }, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> { · STMT_LIST }, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
CODE_BLOCK -> { · STMT_LIST }, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
CODE_BLOCK -> { · STMT_LIST }, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
CODE_BLOCK -> { · STMT_LIST }, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|225]: [begin]
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, int
IF_STMT -> if ( STMT ) STMT · ;, int
IF_STMT -> if ( STMT ) STMT · ;, }
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, void
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, ID
IF_STMT -> if ( STMT ) STMT · ;, void
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) STMT · ;, while
IF_STMT -> if ( STMT ) STMT · ;, ID
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, while
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, char
IF_STMT -> if ( STMT ) STMT · ;, if
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, while
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, if
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, return
IF_STMT -> if ( STMT ) STMT · ;, double
IF_STMT -> if ( STMT ) STMT · ;, CONST
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, float
IF_STMT -> if ( STMT ) STMT · ;, for
IF_STMT -> if ( STMT ) STMT · ;, return
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, (
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, double
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, CONST
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, for
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, for
IF_STMT -> if ( STMT ) STMT · ;, float
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, CONST
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, double
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, (
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, float
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, void
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, return
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, if
IF_STMT -> if ( STMT ) STMT · ;, (
IF_STMT -> if ( STMT ) STMT · ;, char
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, int
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, }
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, char
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, }

[node|226]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, if
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, return
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, double
IF_STMT -> if ( STMT ) CODE_BLOCK ·, ID
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, double
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, void
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, CONST
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, for
IF_STMT -> if ( STMT ) CODE_BLOCK ·, return
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, float
IF_STMT -> if ( STMT ) CODE_BLOCK ·, CONST
IF_STMT -> if ( STMT ) CODE_BLOCK ·, for
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, (
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, float
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, (
IF_STMT -> if ( STMT ) CODE_BLOCK ·, if
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, int
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, char
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, }
IF_STMT -> if ( STMT ) CODE_BLOCK ·, while
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, int
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, }
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, void
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, for
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, CONST
IF_STMT -> if ( STMT ) CODE_BLOCK ·, char
IF_STMT -> if ( STMT ) CODE_BLOCK ·, (
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, return
IF_STMT -> if ( STMT ) CODE_BLOCK ·, void
IF_STMT -> if ( STMT ) CODE_BLOCK ·, float
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, ID
IF_STMT -> if ( STMT ) CODE_BLOCK ·, }
IF_STMT -> if ( STMT ) CODE_BLOCK ·, int
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, while
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, char
IF_STMT -> if ( STMT ) CODE_BLOCK ·, double
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, while
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, if

[node|227]: [begin]
FACTOR -> ( EXPR ) ·, <=
FACTOR -> ( EXPR ) ·, !=
FACTOR -> ( EXPR ) ·, >
FACTOR -> ( EXPR ) ·, ==
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, <
FACTOR -> ( EXPR ) ·, ;
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, >=
FACTOR -> ( EXPR ) ·, *

[node|228]: [begin]
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, void
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, char
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, double
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, CONST
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, ID
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, for
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, double
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, int
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, while
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, char
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, }
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, for
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, CONST
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, ID
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, float
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, return
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, int
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, (
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, }
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, while
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, if
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, if
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, (
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, return
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, float
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, void

[node|229]: [begin]
JUST_STMT -> EXPR < EXPR ·, ;

[node|230]: [begin]
JUST_STMT -> EXPR <= EXPR ·, ;

[node|231]: [begin]
JUST_STMT -> EXPR >= EXPR ·, ;

[node|232]: [begin]
JUST_STMT -> EXPR == EXPR ·, ;

[node|233]: [begin]
JUST_STMT -> EXPR > EXPR ·, ;

[node|234]: [begin]
JUST_STMT -> EXPR != EXPR ·, ;

[node|235]: [begin]
ITER_STMT -> while ( STMT · ) CODE_BLOCK, ;
ITER_STMT -> while ( STMT · ) STMT, ;

[node|236]: [begin]
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> ·, <=
EXPR2 -> ·, !=
EXPR2 -> + TERM · EXPR2, >
EXPR2 -> ·, <
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> + TERM · EXPR2, ;
EXPR2 -> + TERM · EXPR2, ==
EXPR2 -> ·, >=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> + TERM · EXPR2, !=
EXPR2 -> + TERM · EXPR2, <
EXPR2 -> + TERM · EXPR2, <=
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> ·, >
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> ·, ;
EXPR2 -> + TERM · EXPR2, >=
EXPR2 -> ·, ==
EXPR2 -> · - TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, <

[node|237]: [begin]
FACTOR -> ID ·, >
FACTOR -> ID ·, <=
CALL_STMT -> ID · ( PARG_LIST ), <=
CALL_STMT -> ID · ( PARG_LIST ), >
CALL_STMT -> ID · ( PARG_LIST ), /
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), <
CALL_STMT -> ID · ( PARG_LIST ), ;
FACTOR -> ID ·, *
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), ==
FACTOR -> ID ·, !=
CALL_STMT -> ID · ( PARG_LIST ), +
CALL_STMT -> ID · ( PARG_LIST ), >=
FACTOR -> ID ·, >=
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), !=
FACTOR -> ID ·, ==
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, ;
FACTOR -> ID ·, <
FACTOR -> ID ·, /

[node|238]: [begin]
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> - TERM · EXPR2, ==
EXPR2 -> ·, <=
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> - TERM · EXPR2, ;
EXPR2 -> - TERM · EXPR2, >
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> ·, <
EXPR2 -> ·, !=
EXPR2 -> ·, >=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> - TERM · EXPR2, >=
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> ·, >
EXPR2 -> ·, ==
EXPR2 -> ·, ;
EXPR2 -> - TERM · EXPR2, <=
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> - TERM · EXPR2, <
EXPR2 -> - TERM · EXPR2, !=
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> · - TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, <

[node|239]: [begin]
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, ;
IF_STMT -> if ( STMT · ) STMT ;, ;
IF_STMT -> if ( STMT · ) CODE_BLOCK, ;
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, ;
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, ;
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, ;

[node|240]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), >
CALL_STMT -> ID ( PARG_LIST · ), <=
CALL_STMT -> ID ( PARG_LIST · ), ;
CALL_STMT -> ID ( PARG_LIST · ), !=
CALL_STMT -> ID ( PARG_LIST · ), <
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), ==
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), >=

[node|241]: [begin]
TERM2 -> * FACTOR · TERM2, >
TERM2 -> ·, >
TERM2 -> * FACTOR · TERM2, <=
TERM2 -> ·, <=
TERM2 -> ·, !=
TERM2 -> * FACTOR · TERM2, !=
TERM2 -> · / FACTOR TERM2, ;
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> * FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> ·, +
TERM2 -> * FACTOR · TERM2, >=
TERM2 -> ·, >=
TERM2 -> · / FACTOR TERM2, >
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · * FACTOR TERM2, -
TERM2 -> * FACTOR · TERM2, ==
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, +
TERM2 -> * FACTOR · TERM2, <
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · * FACTOR TERM2, >
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, <
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> * FACTOR · TERM2, ;
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> ·, ;
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> * FACTOR · TERM2, -
TERM2 -> ·, -

[node|242]: [begin]
TERM2 -> ·, >
TERM2 -> ·, <=
TERM2 -> · / FACTOR TERM2, ;
TERM2 -> ·, !=
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, +
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, >
TERM2 -> / FACTOR · TERM2, ;
TERM2 -> · * FACTOR TERM2, -
TERM2 -> / FACTOR · TERM2, <
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> / FACTOR · TERM2, >
TERM2 -> / FACTOR · TERM2, <=
TERM2 -> / FACTOR · TERM2, !=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · * FACTOR TERM2, >
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · / FACTOR TERM2, -
TERM2 -> / FACTOR · TERM2, >=
TERM2 -> ·, <
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> ·, ;
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> / FACTOR · TERM2, ==
TERM2 -> ·, -

[node|243]: [begin]
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, ;
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, ;

[node|244]: [begin]
FACTOR -> ( EXPR · ), double
FACTOR -> ( EXPR · ), (
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), >
FACTOR -> ( EXPR · ), while
FACTOR -> ( EXPR · ), CONST
FACTOR -> ( EXPR · ), for
FACTOR -> ( EXPR · ), >=
FACTOR -> ( EXPR · ), return
FACTOR -> ( EXPR · ), ID
FACTOR -> ( EXPR · ), ==
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), void
FACTOR -> ( EXPR · ), if
FACTOR -> ( EXPR · ), int
FACTOR -> ( EXPR · ), }
FACTOR -> ( EXPR · ), char
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), /
FACTOR -> ( EXPR · ), <
FACTOR -> ( EXPR · ), !=
FACTOR -> ( EXPR · ), <=
FACTOR -> ( EXPR · ), float

[node|245]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), void
FACTOR -> ( · EXPR ), *
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> ( · EXPR ), int
FACTOR -> · ID, *
FACTOR -> ( · EXPR ), }
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
FACTOR -> ( · EXPR ), /
FACTOR -> ( · EXPR ), -
FACTOR -> ( · EXPR ), char
FACTOR -> · CONST, )
FACTOR -> · ID, )
FACTOR -> ( · EXPR ), (
FACTOR -> ( · EXPR ), +
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), )
FACTOR -> ( · EXPR ), float
FACTOR -> · ID, +
FACTOR -> ( · EXPR ), return
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> ( · EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> ( · EXPR ), for
FACTOR -> ( · EXPR ), CONST
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
FACTOR -> ( · EXPR ), if
FACTOR -> ( · EXPR ), ID
FACTOR -> ( · EXPR ), while
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, *

[node|246]: [begin]
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, if
FACTOR -> CALL_STMT ·, return
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, ID
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, (
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, }
FACTOR -> CALL_STMT ·, char
FACTOR -> CALL_STMT ·, while
FACTOR -> CALL_STMT ·, double
FACTOR -> CALL_STMT ·, int
FACTOR -> CALL_STMT ·, CONST
FACTOR -> CALL_STMT ·, for
FACTOR -> CALL_STMT ·, void
FACTOR -> CALL_STMT ·, float

[node|247]: [begin]
RTN_STMT -> return EXPR ·, }
RTN_STMT -> return EXPR ·, for
RTN_STMT -> return EXPR ·, CONST
RTN_STMT -> return EXPR ·, while
RTN_STMT -> return EXPR ·, int
RTN_STMT -> return EXPR ·, float
RTN_STMT -> return EXPR ·, (
RTN_STMT -> return EXPR ·, ID
RTN_STMT -> return EXPR ·, char
RTN_STMT -> return EXPR ·, void
RTN_STMT -> return EXPR ·, double
RTN_STMT -> return EXPR ·, return
RTN_STMT -> return EXPR ·, if

[node|248]: [begin]
EXPR2 -> ·, while
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> · - TERM EXPR2, ID
EXPR -> TERM · EXPR2, return
EXPR -> TERM · EXPR2, ID
EXPR2 -> · + TERM EXPR2, CONST
EXPR2 -> ·, double
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> · + TERM EXPR2, (
EXPR -> TERM · EXPR2, for
EXPR2 -> ·, if
EXPR2 -> ·, }
EXPR2 -> · + TERM EXPR2, char
EXPR2 -> · - TERM EXPR2, while
EXPR -> TERM · EXPR2, (
EXPR2 -> · - TERM EXPR2, return
EXPR2 -> · - TERM EXPR2, float
EXPR -> TERM · EXPR2, float
EXPR2 -> ·, for
EXPR2 -> · + TERM EXPR2, ID
EXPR -> TERM · EXPR2, int
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, CONST
EXPR -> TERM · EXPR2, double
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> ·, return
EXPR2 -> ·, float
EXPR2 -> · - TERM EXPR2, char
EXPR2 -> ·, (
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> · + TERM EXPR2, for
EXPR -> TERM · EXPR2, CONST
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, int
EXPR -> TERM · EXPR2, if
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> ·, char
EXPR2 -> ·, int
EXPR -> TERM · EXPR2, while
EXPR -> TERM · EXPR2, char
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> ·, ID
EXPR2 -> · - TERM EXPR2, (
EXPR -> TERM · EXPR2, void
EXPR2 -> ·, CONST
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> · - TERM EXPR2, for
EXPR -> TERM · EXPR2, }
EXPR2 -> ·, void
EXPR2 -> · + TERM EXPR2, while

[node|249]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), ID
FACTOR -> ID ·, ID
CALL_STMT -> ID · ( PARG_LIST ), for
FACTOR -> ID ·, return
CALL_STMT -> ID · ( PARG_LIST ), /
CALL_STMT -> ID · ( PARG_LIST ), -
FACTOR -> ID ·, CONST
FACTOR -> ID ·, for
CALL_STMT -> ID · ( PARG_LIST ), double
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), int
CALL_STMT -> ID · ( PARG_LIST ), }
FACTOR -> ID ·, -
FACTOR -> ID ·, if
CALL_STMT -> ID · ( PARG_LIST ), float
CALL_STMT -> ID · ( PARG_LIST ), void
FACTOR -> ID ·, while
CALL_STMT -> ID · ( PARG_LIST ), (
CALL_STMT -> ID · ( PARG_LIST ), char
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, char
FACTOR -> ID ·, +
FACTOR -> ID ·, (
CALL_STMT -> ID · ( PARG_LIST ), while
FACTOR -> ID ·, void
FACTOR -> ID ·, float
CALL_STMT -> ID · ( PARG_LIST ), if
FACTOR -> ID ·, }
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, int
FACTOR -> ID ·, double
CALL_STMT -> ID · ( PARG_LIST ), CONST
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), return

[node|250]: [begin]
TERM2 -> ·, while
TERM -> FACTOR · TERM2, while
TERM -> FACTOR · TERM2, float
TERM -> FACTOR · TERM2, +
TERM2 -> ·, +
TERM2 -> · / FACTOR TERM2, ID
TERM2 -> ·, CONST
TERM -> FACTOR · TERM2, CONST
TERM2 -> ·, }
TERM2 -> · * FACTOR TERM2, void
TERM2 -> ·, double
TERM -> FACTOR · TERM2, void
TERM2 -> · * FACTOR TERM2, +
TERM -> FACTOR · TERM2, return
TERM2 -> · * FACTOR TERM2, float
TERM -> FACTOR · TERM2, ID
TERM2 -> · / FACTOR TERM2, return
TERM2 -> · / FACTOR TERM2, for
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, if
TERM2 -> · * FACTOR TERM2, ID
TERM -> FACTOR · TERM2, double
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · * FACTOR TERM2, for
TERM2 -> · / FACTOR TERM2, char
TERM2 -> · / FACTOR TERM2, void
TERM -> FACTOR · TERM2, (
TERM2 -> ·, (
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, return
TERM2 -> ·, float
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, for
TERM -> FACTOR · TERM2, for
TERM2 -> · * FACTOR TERM2, int
TERM2 -> ·, int
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · * FACTOR TERM2, (
TERM2 -> · * FACTOR TERM2, double
TERM2 -> ·, -
TERM2 -> · / FACTOR TERM2, if
TERM2 -> ·, ID
TERM2 -> ·, char
TERM -> FACTOR · TERM2, char
TERM2 -> · / FACTOR TERM2, CONST
TERM2 -> ·, void
TERM -> FACTOR · TERM2, -
TERM -> FACTOR · TERM2, if
TERM2 -> · * FACTOR TERM2, char
TERM2 -> · * FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, (
TERM2 -> · / FACTOR TERM2, double
TERM -> FACTOR · TERM2, }
TERM -> FACTOR · TERM2, int
TERM2 -> · * FACTOR TERM2, if
TERM2 -> · / FACTOR TERM2, float
TERM2 -> · * FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, CONST
TERM2 -> · / FACTOR TERM2, int

[node|251]: [begin]
FACTOR -> CONST ·, int
FACTOR -> CONST ·, }
FACTOR -> CONST ·, double
FACTOR -> CONST ·, while
FACTOR -> CONST ·, (
FACTOR -> CONST ·, char
FACTOR -> CONST ·, CONST
FACTOR -> CONST ·, ID
FACTOR -> CONST ·, *
FACTOR -> CONST ·, -
FACTOR -> CONST ·, /
FACTOR -> CONST ·, return
FACTOR -> CONST ·, void
FACTOR -> CONST ·, +
FACTOR -> CONST ·, for
FACTOR -> CONST ·, if
FACTOR -> CONST ·, float

[node|252]: [begin]
CODE_BLOCK -> { STMT_LIST · }, for
CODE_BLOCK -> { STMT_LIST · }, int
CODE_BLOCK -> { STMT_LIST · }, ID
CODE_BLOCK -> { STMT_LIST · }, float
CODE_BLOCK -> { STMT_LIST · }, if
CODE_BLOCK -> { STMT_LIST · }, void
CODE_BLOCK -> { STMT_LIST · }, return
CODE_BLOCK -> { STMT_LIST · }, CONST
CODE_BLOCK -> { STMT_LIST · }, char
CODE_BLOCK -> { STMT_LIST · }, (
CODE_BLOCK -> { STMT_LIST · }, while
CODE_BLOCK -> { STMT_LIST · }, double
CODE_BLOCK -> { STMT_LIST · }, }

[node|253]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, if
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
TERM -> · FACTOR TERM2 , char
JUST_STMT -> EXPR < · EXPR, float
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
TERM -> · FACTOR TERM2 , CONST
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
EXPR -> · TERM EXPR2, void
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
JUST_STMT -> EXPR < · EXPR, ID
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, int
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
EXPR -> · TERM EXPR2, CONST
JUST_STMT -> EXPR < · EXPR, double
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
JUST_STMT -> EXPR < · EXPR, (
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, char
EXPR -> · TERM EXPR2, ID
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
JUST_STMT -> EXPR < · EXPR, if
TERM -> · FACTOR TERM2 , for
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
JUST_STMT -> EXPR < · EXPR, }
FACTOR -> · ( EXPR ), if
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
JUST_STMT -> EXPR < · EXPR, char
JUST_STMT -> EXPR < · EXPR, while
TERM -> · FACTOR TERM2 , float
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
JUST_STMT -> EXPR < · EXPR, CONST
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
JUST_STMT -> EXPR < · EXPR, void
JUST_STMT -> EXPR < · EXPR, return
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , (
FACTOR -> · CONST, CONST
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR -> · TERM EXPR2, }
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
JUST_STMT -> EXPR < · EXPR, for
EXPR -> · TERM EXPR2, return
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
JUST_STMT -> EXPR < · EXPR, int
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR -> · TERM EXPR2, float
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|254]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
JUST_STMT -> EXPR <= · EXPR, ID
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
FACTOR -> · ID, if
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
JUST_STMT -> EXPR <= · EXPR, int
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
JUST_STMT -> EXPR <= · EXPR, float
TERM -> · FACTOR TERM2 , CONST
FACTOR -> · CONST, (
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
FACTOR -> · CONST, float
TERM -> · FACTOR TERM2 , return
JUST_STMT -> EXPR <= · EXPR, (
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
EXPR -> · TERM EXPR2, void
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, int
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
EXPR -> · TERM EXPR2, CONST
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
JUST_STMT -> EXPR <= · EXPR, if
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
JUST_STMT -> EXPR <= · EXPR, }
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, char
JUST_STMT -> EXPR <= · EXPR, double
EXPR -> · TERM EXPR2, ID
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
JUST_STMT -> EXPR <= · EXPR, while
FACTOR -> · ( EXPR ), if
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
TERM -> · FACTOR TERM2 , float
JUST_STMT -> EXPR <= · EXPR, CONST
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
JUST_STMT -> EXPR <= · EXPR, void
TERM -> · FACTOR TERM2 , double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
JUST_STMT -> EXPR <= · EXPR, char
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
JUST_STMT -> EXPR <= · EXPR, for
FACTOR -> · CONST, CONST
JUST_STMT -> EXPR <= · EXPR, return
TERM -> · FACTOR TERM2 , (
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR -> · TERM EXPR2, }
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
FACTOR -> · ( EXPR ), double
EXPR -> · TERM EXPR2, return
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR -> · TERM EXPR2, float
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|255]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), (
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), char
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
JUST_STMT -> EXPR >= · EXPR, char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
TERM -> · FACTOR TERM2 , CONST
FACTOR -> · CONST, (
JUST_STMT -> EXPR >= · EXPR, }
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
FACTOR -> · CONST, float
TERM -> · FACTOR TERM2 , return
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
EXPR -> · TERM EXPR2, void
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
JUST_STMT -> EXPR >= · EXPR, while
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, int
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
JUST_STMT -> EXPR >= · EXPR, CONST
EXPR -> · TERM EXPR2, CONST
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
JUST_STMT -> EXPR >= · EXPR, return
FACTOR -> · ( EXPR ), float
JUST_STMT -> EXPR >= · EXPR, float
FACTOR -> · CALL_STMT, CONST
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, char
EXPR -> · TERM EXPR2, ID
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), if
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
JUST_STMT -> EXPR >= · EXPR, ID
TERM -> · FACTOR TERM2 , float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
JUST_STMT -> EXPR >= · EXPR, for
FACTOR -> · ID, }
FACTOR -> · ID, *
JUST_STMT -> EXPR >= · EXPR, double
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
JUST_STMT -> EXPR >= · EXPR, (
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
JUST_STMT -> EXPR >= · EXPR, int
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
FACTOR -> · CONST, CONST
TERM -> · FACTOR TERM2 , (
JUST_STMT -> EXPR >= · EXPR, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR -> · TERM EXPR2, }
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
FACTOR -> · ( EXPR ), double
EXPR -> · TERM EXPR2, return
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, double
JUST_STMT -> EXPR >= · EXPR, void
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR -> · TERM EXPR2, float
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|256]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, if
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
TERM -> · FACTOR TERM2 , CONST
FACTOR -> · CONST, (
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
FACTOR -> · CONST, float
TERM -> · FACTOR TERM2 , return
FACTOR -> · ( EXPR ), *
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, ID
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
JUST_STMT -> EXPR == · EXPR, return
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, int
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
EXPR -> · TERM EXPR2, CONST
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, char
FACTOR -> · CALL_STMT, void
EXPR -> · TERM EXPR2, ID
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), if
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
TERM -> · FACTOR TERM2 , float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
JUST_STMT -> EXPR == · EXPR, ID
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, double
JUST_STMT -> EXPR == · EXPR, while
CALL_STMT -> · ID ( PARG_LIST ), ID
JUST_STMT -> EXPR == · EXPR, float
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
JUST_STMT -> EXPR == · EXPR, CONST
FACTOR -> · CONST, CONST
TERM -> · FACTOR TERM2 , (
JUST_STMT -> EXPR == · EXPR, if
CALL_STMT -> · ID ( PARG_LIST ), double
JUST_STMT -> EXPR == · EXPR, int
FACTOR -> · ID, void
JUST_STMT -> EXPR == · EXPR, }
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR -> · TERM EXPR2, }
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
EXPR -> · TERM EXPR2, return
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
JUST_STMT -> EXPR == · EXPR, char
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), void
JUST_STMT -> EXPR == · EXPR, double
CALL_STMT -> · ID ( PARG_LIST ), int
JUST_STMT -> EXPR == · EXPR, (
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR -> · TERM EXPR2, float
FACTOR -> · ( EXPR ), CONST
JUST_STMT -> EXPR == · EXPR, for
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
JUST_STMT -> EXPR == · EXPR, void
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|257]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
JUST_STMT -> EXPR > · EXPR, for
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, if
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
JUST_STMT -> EXPR > · EXPR, (
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
TERM -> · FACTOR TERM2 , CONST
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
JUST_STMT -> EXPR > · EXPR, }
FACTOR -> · ID, double
JUST_STMT -> EXPR > · EXPR, int
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
EXPR -> · TERM EXPR2, void
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
JUST_STMT -> EXPR > · EXPR, char
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, int
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
EXPR -> · TERM EXPR2, CONST
JUST_STMT -> EXPR > · EXPR, CONST
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
JUST_STMT -> EXPR > · EXPR, void
JUST_STMT -> EXPR > · EXPR, return
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, char
EXPR -> · TERM EXPR2, ID
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), if
JUST_STMT -> EXPR > · EXPR, ID
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , float
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
JUST_STMT -> EXPR > · EXPR, double
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
EXPR -> · TERM EXPR2, if
JUST_STMT -> EXPR > · EXPR, if
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
JUST_STMT -> EXPR > · EXPR, while
TERM -> · FACTOR TERM2 , (
FACTOR -> · CONST, CONST
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR -> · TERM EXPR2, }
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
EXPR -> · TERM EXPR2, return
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
JUST_STMT -> EXPR > · EXPR, float
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR -> · TERM EXPR2, float
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|258]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
JUST_STMT -> EXPR != · EXPR, void
EXPR -> · TERM EXPR2, for
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), (
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), char
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
TERM -> · FACTOR TERM2 , CONST
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
EXPR -> · TERM EXPR2, void
JUST_STMT -> EXPR != · EXPR, for
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
JUST_STMT -> EXPR != · EXPR, float
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
JUST_STMT -> EXPR != · EXPR, }
EXPR -> · TERM EXPR2, int
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
EXPR -> · TERM EXPR2, CONST
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, char
EXPR -> · TERM EXPR2, ID
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
JUST_STMT -> EXPR != · EXPR, if
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), if
JUST_STMT -> EXPR != · EXPR, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , float
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
JUST_STMT -> EXPR != · EXPR, ID
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, for
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
JUST_STMT -> EXPR != · EXPR, return
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
JUST_STMT -> EXPR != · EXPR, (
TERM -> · FACTOR TERM2 , (
FACTOR -> · CONST, CONST
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR -> · TERM EXPR2, }
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
EXPR -> · TERM EXPR2, return
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
JUST_STMT -> EXPR != · EXPR, while
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
JUST_STMT -> EXPR != · EXPR, CONST
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR -> · TERM EXPR2, float
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
JUST_STMT -> EXPR != · EXPR, int
CALL_STMT -> · ID ( PARG_LIST ), CONST
JUST_STMT -> EXPR != · EXPR, char

[node|259]: [begin]
INIT_STMT -> TYPE_SPEC ID · = EXPR, }
INIT_STMT -> TYPE_SPEC ID · = EXPR, CONST
INIT_STMT -> TYPE_SPEC ID · = EXPR, for
INIT_STMT -> TYPE_SPEC ID · = EXPR, int
INIT_STMT -> TYPE_SPEC ID ·, (
INIT_STMT -> TYPE_SPEC ID ·, double
INIT_STMT -> TYPE_SPEC ID · = EXPR, void
INIT_STMT -> TYPE_SPEC ID · = EXPR, ID
INIT_STMT -> TYPE_SPEC ID · = EXPR, return
INIT_STMT -> TYPE_SPEC ID ·, float
INIT_STMT -> TYPE_SPEC ID · = EXPR, while
INIT_STMT -> TYPE_SPEC ID ·, char
INIT_STMT -> TYPE_SPEC ID ·, }
INIT_STMT -> TYPE_SPEC ID ·, int
INIT_STMT -> TYPE_SPEC ID ·, if
INIT_STMT -> TYPE_SPEC ID · = EXPR, double
INIT_STMT -> TYPE_SPEC ID ·, void
INIT_STMT -> TYPE_SPEC ID ·, ID
INIT_STMT -> TYPE_SPEC ID ·, return
INIT_STMT -> TYPE_SPEC ID · = EXPR, float
INIT_STMT -> TYPE_SPEC ID ·, for
INIT_STMT -> TYPE_SPEC ID ·, CONST
INIT_STMT -> TYPE_SPEC ID · = EXPR, (
INIT_STMT -> TYPE_SPEC ID · = EXPR, char
INIT_STMT -> TYPE_SPEC ID ·, while
INIT_STMT -> TYPE_SPEC ID · = EXPR, if

[node|260]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, }
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, if
FACTOR -> · ( EXPR ), (
EXPR2 -> + · TERM EXPR2, while
CALL_STMT -> · ID ( PARG_LIST ), char
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
EXPR2 -> + · TERM EXPR2, <=
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
TERM -> · FACTOR TERM2 , CONST
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
FACTOR -> · CONST, float
TERM -> · FACTOR TERM2 , return
EXPR2 -> + · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
EXPR2 -> + · TERM EXPR2, }
FACTOR -> · CALL_STMT, ID
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
EXPR2 -> + · TERM EXPR2, float
FACTOR -> · CONST, ==
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, while
FACTOR -> · CALL_STMT, <=
FACTOR -> · ( EXPR ), >
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
FACTOR -> · CONST, !=
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
TERM -> · FACTOR TERM2 , !=
FACTOR -> · CALL_STMT, void
EXPR2 -> + · TERM EXPR2, ID
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
EXPR2 -> + · TERM EXPR2, void
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , >
FACTOR -> · ( EXPR ), if
FACTOR -> · ID, >
EXPR2 -> + · TERM EXPR2, char
FACTOR -> · ( EXPR ), >=
TERM -> · FACTOR TERM2 , <=
FACTOR -> · CONST, void
EXPR2 -> + · TERM EXPR2, <
CALL_STMT -> · ID ( PARG_LIST ), if
TERM -> · FACTOR TERM2 , float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
FACTOR -> · CONST, >=
EXPR2 -> + · TERM EXPR2, CONST
EXPR2 -> + · TERM EXPR2, double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · CONST, <
FACTOR -> · ID, }
EXPR2 -> + · TERM EXPR2, if
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
FACTOR -> · CALL_STMT, ==
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
EXPR2 -> + · TERM EXPR2, !=
FACTOR -> · CONST, >
EXPR2 -> + · TERM EXPR2, >=
TERM -> · FACTOR TERM2 , (
FACTOR -> · CONST, CONST
TERM -> · FACTOR TERM2 , >=
EXPR2 -> + · TERM EXPR2, (
FACTOR -> · ID, ==
CALL_STMT -> · ID ( PARG_LIST ), double
EXPR2 -> + · TERM EXPR2, for
FACTOR -> · ID, void
FACTOR -> · CONST, ID
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , void
EXPR2 -> + · TERM EXPR2, >
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , if
EXPR2 -> + · TERM EXPR2, return
CALL_STMT -> · ID ( PARG_LIST ), !=
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
FACTOR -> · ID, !=
FACTOR -> · ID, <
FACTOR -> · ( EXPR ), <=
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), !=
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR2 -> + · TERM EXPR2, int
FACTOR -> · ( EXPR ), CONST
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|261]: [begin]
EXPR -> TERM EXPR2 ·, void
EXPR -> TERM EXPR2 ·, <
EXPR -> TERM EXPR2 ·, if
EXPR -> TERM EXPR2 ·, double
EXPR -> TERM EXPR2 ·, ID
EXPR -> TERM EXPR2 ·, (
EXPR -> TERM EXPR2 ·, char
EXPR -> TERM EXPR2 ·, >=
EXPR -> TERM EXPR2 ·, for
EXPR -> TERM EXPR2 ·, int
EXPR -> TERM EXPR2 ·, <=
EXPR -> TERM EXPR2 ·, }
EXPR -> TERM EXPR2 ·, !=
EXPR -> TERM EXPR2 ·, float
EXPR -> TERM EXPR2 ·, while
EXPR -> TERM EXPR2 ·, CONST
EXPR -> TERM EXPR2 ·, >
EXPR -> TERM EXPR2 ·, ==
EXPR -> TERM EXPR2 ·, return

[node|262]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, }
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
FACTOR -> · ID, if
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
EXPR2 -> - · TERM EXPR2, }
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
TERM -> · FACTOR TERM2 , CONST
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
EXPR2 -> - · TERM EXPR2, char
EXPR2 -> - · TERM EXPR2, while
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR2 -> - · TERM EXPR2, CONST
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR2 -> - · TERM EXPR2, return
FACTOR -> · CALL_STMT, while
FACTOR -> · CALL_STMT, <=
FACTOR -> · ( EXPR ), >
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
FACTOR -> · CONST, !=
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
EXPR2 -> - · TERM EXPR2, <
EXPR2 -> - · TERM EXPR2, >
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
TERM -> · FACTOR TERM2 , !=
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
FACTOR -> · CALL_STMT, if
EXPR2 -> - · TERM EXPR2, float
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <
FACTOR -> · ( EXPR ), if
TERM -> · FACTOR TERM2 , >
FACTOR -> · ID, >
EXPR2 -> - · TERM EXPR2, !=
FACTOR -> · ( EXPR ), >=
TERM -> · FACTOR TERM2 , <=
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , float
EXPR2 -> - · TERM EXPR2, for
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
FACTOR -> · CONST, >=
EXPR2 -> - · TERM EXPR2, ID
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · CONST, <
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
EXPR2 -> - · TERM EXPR2, <=
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
EXPR2 -> - · TERM EXPR2, double
FACTOR -> · CALL_STMT, ==
TERM -> · FACTOR TERM2 , ID
EXPR2 -> - · TERM EXPR2, int
FACTOR -> · ID, (
EXPR2 -> - · TERM EXPR2, (
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
EXPR2 -> - · TERM EXPR2, >=
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
EXPR2 -> - · TERM EXPR2, if
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , (
FACTOR -> · CONST, CONST
TERM -> · FACTOR TERM2 , >=
FACTOR -> · ID, ==
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , void
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , if
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
FACTOR -> · ID, !=
FACTOR -> · ID, <
FACTOR -> · ( EXPR ), <=
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), !=
EXPR2 -> - · TERM EXPR2, void
FACTOR -> · ID, float
EXPR2 -> - · TERM EXPR2, ==
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ( EXPR ), CONST
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|263]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
FACTOR -> · ID, if
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
ASSIGN_STMT -> ID = · EXPR, char
FACTOR -> · ( EXPR ), char
ASSIGN_STMT -> ID = · EXPR, if
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
TERM -> · FACTOR TERM2 , CONST
FACTOR -> · CONST, (
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
FACTOR -> · CONST, float
TERM -> · FACTOR TERM2 , return
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
EXPR -> · TERM EXPR2, void
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, int
FACTOR -> · CALL_STMT, while
ASSIGN_STMT -> ID = · EXPR, CONST
ASSIGN_STMT -> ID = · EXPR, int
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
FACTOR -> · ID, for
EXPR -> · TERM EXPR2, CONST
ASSIGN_STMT -> ID = · EXPR, return
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, char
EXPR -> · TERM EXPR2, ID
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), if
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
TERM -> · FACTOR TERM2 , float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
ASSIGN_STMT -> ID = · EXPR, for
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
ASSIGN_STMT -> ID = · EXPR, float
FACTOR -> · CONST, CONST
TERM -> · FACTOR TERM2 , (
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
ASSIGN_STMT -> ID = · EXPR, }
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR -> · TERM EXPR2, }
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
FACTOR -> · ( EXPR ), double
EXPR -> · TERM EXPR2, return
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
ASSIGN_STMT -> ID = · EXPR, while
ASSIGN_STMT -> ID = · EXPR, ID
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
ASSIGN_STMT -> ID = · EXPR, void
ASSIGN_STMT -> ID = · EXPR, double
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR -> · TERM EXPR2, float
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
ASSIGN_STMT -> ID = · EXPR, (
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|264]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), <=
PARG_LIST -> · PARG, )
CALL_STMT -> ID ( · PARG_LIST ), return
CALL_STMT -> ID ( · PARG_LIST ), ID
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), CONST
CALL_STMT -> ID ( · PARG_LIST ), for
CALL_STMT -> ID ( · PARG_LIST ), *
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), if
CALL_STMT -> ID ( · PARG_LIST ), !=
CALL_STMT -> ID ( · PARG_LIST ), while
CALL_STMT -> ID ( · PARG_LIST ), char
CALL_STMT -> ID ( · PARG_LIST ), >=
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), (
CALL_STMT -> ID ( · PARG_LIST ), ==
PARG_LIST -> ·, )
CALL_STMT -> ID ( · PARG_LIST ), float
CALL_STMT -> ID ( · PARG_LIST ), void
CALL_STMT -> ID ( · PARG_LIST ), int
CALL_STMT -> ID ( · PARG_LIST ), }
CALL_STMT -> ID ( · PARG_LIST ), double
CALL_STMT -> ID ( · PARG_LIST ), -
CALL_STMT -> ID ( · PARG_LIST ), /
CALL_STMT -> ID ( · PARG_LIST ), >
CALL_STMT -> ID ( · PARG_LIST ), <

[node|265]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
TERM2 -> * · FACTOR TERM2, ==
TERM2 -> * · FACTOR TERM2, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, }
FACTOR -> · CONST, <=
FACTOR -> · ID, if
FACTOR -> · CALL_STMT, +
TERM2 -> * · FACTOR TERM2, double
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
TERM2 -> * · FACTOR TERM2, >=
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
TERM2 -> * · FACTOR TERM2, <=
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
FACTOR -> · ( EXPR ), for
TERM2 -> * · FACTOR TERM2, ID
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, while
FACTOR -> · CALL_STMT, <=
FACTOR -> · ( EXPR ), >
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
FACTOR -> · CONST, !=
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
TERM2 -> * · FACTOR TERM2, <
TERM2 -> * · FACTOR TERM2, float
FACTOR -> · CALL_STMT, void
FACTOR -> · CALL_STMT, if
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
FACTOR -> · CALL_STMT, }
TERM2 -> * · FACTOR TERM2, return
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM2 -> * · FACTOR TERM2, >
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ( EXPR ), if
FACTOR -> · CALL_STMT, <
TERM2 -> * · FACTOR TERM2, for
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
TERM2 -> * · FACTOR TERM2, !=
FACTOR -> · CALL_STMT, char
FACTOR -> · CONST, >=
FACTOR -> · ( EXPR ), while
FACTOR -> · CONST, <
FACTOR -> · ID, int
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
FACTOR -> · CALL_STMT, ==
FACTOR -> · ID, (
TERM2 -> * · FACTOR TERM2, }
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
TERM2 -> * · FACTOR TERM2, CONST
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
FACTOR -> · CONST, >
FACTOR -> · CONST, CONST
TERM2 -> * · FACTOR TERM2, while
FACTOR -> · ID, ==
CALL_STMT -> · ID ( PARG_LIST ), double
TERM2 -> * · FACTOR TERM2, char
FACTOR -> · ID, void
FACTOR -> · CONST, ID
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM2 -> * · FACTOR TERM2, void
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · CONST, int
FACTOR -> · ID, !=
TERM2 -> * · FACTOR TERM2, -
TERM2 -> * · FACTOR TERM2, (
FACTOR -> · ( EXPR ), <=
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), !=
TERM2 -> * · FACTOR TERM2, int
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ( EXPR ), CONST
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
FACTOR -> · ID, >=
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|266]: [begin]
TERM2 -> / · FACTOR TERM2, ==
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, }
FACTOR -> · CONST, <=
FACTOR -> · ID, if
FACTOR -> · CALL_STMT, +
CALL_STMT -> · ID ( PARG_LIST ), char
FACTOR -> · ( EXPR ), (
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
TERM2 -> / · FACTOR TERM2, for
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
TERM2 -> / · FACTOR TERM2, >
FACTOR -> · ( EXPR ), for
TERM2 -> / · FACTOR TERM2, -
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
FACTOR -> · ID, ID
TERM2 -> / · FACTOR TERM2, float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, while
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
TERM2 -> / · FACTOR TERM2, double
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
FACTOR -> · CONST, !=
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
FACTOR -> · CALL_STMT, void
FACTOR -> · CALL_STMT, if
FACTOR -> · ( EXPR ), <
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, }
TERM2 -> / · FACTOR TERM2, return
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ( EXPR ), if
TERM2 -> / · FACTOR TERM2, }
FACTOR -> · CALL_STMT, <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TERM2 -> / · FACTOR TERM2, <
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
FACTOR -> · CALL_STMT, char
FACTOR -> · CONST, >=
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · CONST, <
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
TERM2 -> / · FACTOR TERM2, if
CALL_STMT -> · ID ( PARG_LIST ), while
TERM2 -> / · FACTOR TERM2, !=
FACTOR -> · CONST, char
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
FACTOR -> · CALL_STMT, ==
FACTOR -> · ID, (
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
TERM2 -> / · FACTOR TERM2, <=
FACTOR -> · CALL_STMT, *
TERM2 -> / · FACTOR TERM2, +
FACTOR -> · CONST, >
FACTOR -> · CONST, CONST
FACTOR -> · ID, ==
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ( EXPR ), double
FACTOR -> · CONST, int
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · ( EXPR ), +
TERM2 -> / · FACTOR TERM2, ID
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
TERM2 -> / · FACTOR TERM2, char
TERM2 -> / · FACTOR TERM2, while
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), int
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), }
TERM2 -> / · FACTOR TERM2, CONST
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
TERM2 -> / · FACTOR TERM2, int
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ( EXPR ), CONST
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM2 -> / · FACTOR TERM2, (
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
TERM2 -> / · FACTOR TERM2, >=
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
FACTOR -> · ID, >=
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST
TERM2 -> / · FACTOR TERM2, void

[node|267]: [begin]
TERM -> FACTOR TERM2 ·, CONST
TERM -> FACTOR TERM2 ·, for
TERM -> FACTOR TERM2 ·, <=
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, <
TERM -> FACTOR TERM2 ·, int
TERM -> FACTOR TERM2 ·, >
TERM -> FACTOR TERM2 ·, }
TERM -> FACTOR TERM2 ·, ==
TERM -> FACTOR TERM2 ·, double
TERM -> FACTOR TERM2 ·, void
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, (
TERM -> FACTOR TERM2 ·, >=
TERM -> FACTOR TERM2 ·, float
TERM -> FACTOR TERM2 ·, !=
TERM -> FACTOR TERM2 ·, char
TERM -> FACTOR TERM2 ·, while
TERM -> FACTOR TERM2 ·, if
TERM -> FACTOR TERM2 ·, return
TERM -> FACTOR TERM2 ·, ID

[node|268]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
ITER_STMT -> while ( STMT ) · STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
ITER_STMT -> while ( STMT ) · CODE_BLOCK, )
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
CODE_BLOCK -> · { STMT_LIST }, )
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
EXPR -> · TERM EXPR2, !=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, >

[node|269]: [begin]
INIT_STMT -> TYPE_SPEC ID = EXPR ·, )

[node|270]: [begin]
EXPR2 -> + TERM EXPR2 ·, <=
EXPR2 -> + TERM EXPR2 ·, )
EXPR2 -> + TERM EXPR2 ·, >=
EXPR2 -> + TERM EXPR2 ·, ==
EXPR2 -> + TERM EXPR2 ·, >
EXPR2 -> + TERM EXPR2 ·, <
EXPR2 -> + TERM EXPR2 ·, !=

[node|271]: [begin]
EXPR2 -> - TERM EXPR2 ·, ==
EXPR2 -> - TERM EXPR2 ·, >=
EXPR2 -> - TERM EXPR2 ·, >
EXPR2 -> - TERM EXPR2 ·, <=
EXPR2 -> - TERM EXPR2 ·, <
EXPR2 -> - TERM EXPR2 ·, !=
EXPR2 -> - TERM EXPR2 ·, )

[node|272]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
CODE_BLOCK -> · { STMT_LIST }, else
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, )
FACTOR -> · ( EXPR ), *
STMT -> · IF_STMT, ;
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
FACTOR -> · CONST, *
JUST_STMT -> · EXPR >= EXPR, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, )
STMT -> · ITER_STMT, ;
CODE_BLOCK -> · { STMT_LIST }, )
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
TERM -> · FACTOR TERM2 , !=
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> if ( STMT ) · STMT ;, )
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, )
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
IF_STMT -> if ( STMT ) · CODE_BLOCK, )
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|273]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, <=
CALL_STMT -> ID ( PARG_LIST ) ·, )
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, >=
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, ==
CALL_STMT -> ID ( PARG_LIST ) ·, >
CALL_STMT -> ID ( PARG_LIST ) ·, <
CALL_STMT -> ID ( PARG_LIST ) ·, !=

[node|274]: [begin]
TERM2 -> * FACTOR TERM2 ·, >
TERM2 -> * FACTOR TERM2 ·, !=
TERM2 -> * FACTOR TERM2 ·, <=
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, ==
TERM2 -> * FACTOR TERM2 ·, <
TERM2 -> * FACTOR TERM2 ·, )
TERM2 -> * FACTOR TERM2 ·, >=
TERM2 -> * FACTOR TERM2 ·, +

[node|275]: [begin]
TERM2 -> / FACTOR TERM2 ·, <
TERM2 -> / FACTOR TERM2 ·, ==
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, )
TERM2 -> / FACTOR TERM2 ·, >=
TERM2 -> / FACTOR TERM2 ·, >
TERM2 -> / FACTOR TERM2 ·, <=
TERM2 -> / FACTOR TERM2 ·, !=

[node|276]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
STMT -> · IF_STMT, ;
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
FACTOR -> · CONST, *
JUST_STMT -> · EXPR >= EXPR, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, )
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, )
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|277]: [begin]
CODE_BLOCK -> { STMT_LIST · }, for
CODE_BLOCK -> { STMT_LIST · }, int
CODE_BLOCK -> { STMT_LIST · }, ID
CODE_BLOCK -> { STMT_LIST · }, float
CODE_BLOCK -> { STMT_LIST · }, if
CODE_BLOCK -> { STMT_LIST · }, else
CODE_BLOCK -> { STMT_LIST · }, void
CODE_BLOCK -> { STMT_LIST · }, return
CODE_BLOCK -> { STMT_LIST · }, CONST
CODE_BLOCK -> { STMT_LIST · }, char
CODE_BLOCK -> { STMT_LIST · }, (
CODE_BLOCK -> { STMT_LIST · }, while
CODE_BLOCK -> { STMT_LIST · }, double
CODE_BLOCK -> { STMT_LIST · }, }

[node|278]: [begin]
IF_STMT -> if ( STMT ) STMT ; ·, ID
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, for
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, CONST
IF_STMT -> if ( STMT ) STMT ; ·, char
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, double
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, char
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, return
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, }
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, float
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, int
IF_STMT -> if ( STMT ) STMT ; ·, }
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, (
IF_STMT -> if ( STMT ) STMT ; ·, CONST
IF_STMT -> if ( STMT ) STMT ; ·, double
IF_STMT -> if ( STMT ) STMT ; ·, int
IF_STMT -> if ( STMT ) STMT ; ·, for
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, return
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, char
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, (
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, CONST
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, double
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, for
IF_STMT -> if ( STMT ) STMT ; ·, float
IF_STMT -> if ( STMT ) STMT ; ·, return
IF_STMT -> if ( STMT ) STMT ; ·, (
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, }
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, int
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, float
IF_STMT -> if ( STMT ) STMT ; ·, while
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, void
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, while
IF_STMT -> if ( STMT ) STMT ; ·, if
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, while
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, ID
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, if
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, void
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, if
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) STMT ; ·, void

[node|279]: [begin]
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> · { STMT_LIST }, ID
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, int
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, char
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
CODE_BLOCK -> · { STMT_LIST }, }
CODE_BLOCK -> · { STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
CODE_BLOCK -> · { STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
CODE_BLOCK -> · { STMT_LIST }, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, return
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, float
CODE_BLOCK -> · { STMT_LIST }, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
CODE_BLOCK -> · { STMT_LIST }, while
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
CODE_BLOCK -> · { STMT_LIST }, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ;, double
CODE_BLOCK -> · { STMT_LIST }, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
CODE_BLOCK -> · { STMT_LIST }, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ;, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, char
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, int
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, double
CODE_BLOCK -> · { STMT_LIST }, void
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, double
CODE_BLOCK -> · { STMT_LIST }, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, char
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ;, int
CODE_BLOCK -> · { STMT_LIST }, for
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, CONST
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ;, float

[node|280]: [begin]
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, CONST
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, while
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, char
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, CONST
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, if
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, void
STMT -> · ITER_STMT, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, char
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, int
FACTOR -> · ( EXPR ), >=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, for
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, return
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, void
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, (
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
EXPR -> · TERM EXPR2, !=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, int
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, ID
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, ID
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , >=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, double
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, for
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, float
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, float
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, while
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, double
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, (
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, }
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ==
ASSIGN_STMT -> · ID = EXPR, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, return
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, >

[node|281]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
STMT -> · IF_STMT, ;
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
FACTOR -> · CONST, *
JUST_STMT -> · EXPR >= EXPR, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
ITER_STMT -> while ( STMT ) · CODE_BLOCK, ;
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
ITER_STMT -> while ( STMT ) · STMT, ;
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
CODE_BLOCK -> · { STMT_LIST }, ;
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|282]: [begin]
EXPR2 -> + TERM EXPR2 ·, <=
EXPR2 -> + TERM EXPR2 ·, >=
EXPR2 -> + TERM EXPR2 ·, ;
EXPR2 -> + TERM EXPR2 ·, ==
EXPR2 -> + TERM EXPR2 ·, >
EXPR2 -> + TERM EXPR2 ·, <
EXPR2 -> + TERM EXPR2 ·, !=

[node|283]: [begin]
EXPR2 -> - TERM EXPR2 ·, ==
EXPR2 -> - TERM EXPR2 ·, >=
EXPR2 -> - TERM EXPR2 ·, ;
EXPR2 -> - TERM EXPR2 ·, >
EXPR2 -> - TERM EXPR2 ·, <=
EXPR2 -> - TERM EXPR2 ·, <
EXPR2 -> - TERM EXPR2 ·, !=

[node|284]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
CODE_BLOCK -> · { STMT_LIST }, else
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
IF_STMT -> if ( STMT ) · STMT ;, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
STMT -> · IF_STMT, ;
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
FACTOR -> · CONST, *
JUST_STMT -> · EXPR >= EXPR, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, ;
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> if ( STMT ) · CODE_BLOCK, ;
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
CODE_BLOCK -> · { STMT_LIST }, ;
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, ;
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, ;
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|285]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, <=
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, >=
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, ;
CALL_STMT -> ID ( PARG_LIST ) ·, ==
CALL_STMT -> ID ( PARG_LIST ) ·, >
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, <
CALL_STMT -> ID ( PARG_LIST ) ·, !=

[node|286]: [begin]
TERM2 -> * FACTOR TERM2 ·, >
TERM2 -> * FACTOR TERM2 ·, !=
TERM2 -> * FACTOR TERM2 ·, <=
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, ;
TERM2 -> * FACTOR TERM2 ·, ==
TERM2 -> * FACTOR TERM2 ·, <
TERM2 -> * FACTOR TERM2 ·, >=
TERM2 -> * FACTOR TERM2 ·, +

[node|287]: [begin]
TERM2 -> / FACTOR TERM2 ·, <
TERM2 -> / FACTOR TERM2 ·, ==
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, >=
TERM2 -> / FACTOR TERM2 ·, >
TERM2 -> / FACTOR TERM2 ·, <=
TERM2 -> / FACTOR TERM2 ·, ;
TERM2 -> / FACTOR TERM2 ·, !=

[node|288]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
STMT -> · IF_STMT, ;
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
FACTOR -> · CONST, *
JUST_STMT -> · EXPR >= EXPR, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|289]: [begin]
FACTOR -> ( EXPR ) ·, ==
FACTOR -> ( EXPR ) ·, void
FACTOR -> ( EXPR ) ·, if
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, char
FACTOR -> ( EXPR ) ·, !=
FACTOR -> ( EXPR ) ·, while
FACTOR -> ( EXPR ) ·, ID
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, CONST
FACTOR -> ( EXPR ) ·, for
FACTOR -> ( EXPR ) ·, >
FACTOR -> ( EXPR ) ·, return
FACTOR -> ( EXPR ) ·, int
FACTOR -> ( EXPR ) ·, <=
FACTOR -> ( EXPR ) ·, }
FACTOR -> ( EXPR ) ·, float
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, <
FACTOR -> ( EXPR ) ·, double
FACTOR -> ( EXPR ) ·, (
FACTOR -> ( EXPR ) ·, >=

[node|290]: [begin]
FACTOR -> ( EXPR · ), double
FACTOR -> ( EXPR · ), /
FACTOR -> ( EXPR · ), (
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), return
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), ID
FACTOR -> ( EXPR · ), void
FACTOR -> ( EXPR · ), if
FACTOR -> ( EXPR · ), float
FACTOR -> ( EXPR · ), int
FACTOR -> ( EXPR · ), for
FACTOR -> ( EXPR · ), }
FACTOR -> ( EXPR · ), CONST
FACTOR -> ( EXPR · ), while
FACTOR -> ( EXPR · ), char

[node|291]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, if
FACTOR -> · ( EXPR ), (
EXPR2 -> + · TERM EXPR2, while
CALL_STMT -> · ID ( PARG_LIST ), char
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
TERM -> · FACTOR TERM2 , CONST
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
FACTOR -> · CONST, float
TERM -> · FACTOR TERM2 , return
FACTOR -> · ( EXPR ), *
EXPR2 -> + · TERM EXPR2, }
FACTOR -> · CALL_STMT, ID
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
EXPR2 -> + · TERM EXPR2, float
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
FACTOR -> · CALL_STMT, void
EXPR2 -> + · TERM EXPR2, ID
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
EXPR2 -> + · TERM EXPR2, void
FACTOR -> · ( EXPR ), if
EXPR2 -> + · TERM EXPR2, char
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
TERM -> · FACTOR TERM2 , float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
EXPR2 -> + · TERM EXPR2, CONST
EXPR2 -> + · TERM EXPR2, double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
EXPR2 -> + · TERM EXPR2, if
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , (
FACTOR -> · CONST, CONST
EXPR2 -> + · TERM EXPR2, (
CALL_STMT -> · ID ( PARG_LIST ), double
EXPR2 -> + · TERM EXPR2, for
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
EXPR2 -> + · TERM EXPR2, return
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR2 -> + · TERM EXPR2, int
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|292]: [begin]
EXPR -> TERM EXPR2 ·, void
EXPR -> TERM EXPR2 ·, if
EXPR -> TERM EXPR2 ·, double
EXPR -> TERM EXPR2 ·, ID
EXPR -> TERM EXPR2 ·, (
EXPR -> TERM EXPR2 ·, char
EXPR -> TERM EXPR2 ·, for
EXPR -> TERM EXPR2 ·, int
EXPR -> TERM EXPR2 ·, }
EXPR -> TERM EXPR2 ·, CONST
EXPR -> TERM EXPR2 ·, float
EXPR -> TERM EXPR2 ·, while
EXPR -> TERM EXPR2 ·, return

[node|293]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, -
FACTOR -> · CONST, /
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
FACTOR -> · ID, if
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
EXPR2 -> - · TERM EXPR2, }
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
TERM -> · FACTOR TERM2 , CONST
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ID, double
EXPR2 -> - · TERM EXPR2, char
EXPR2 -> - · TERM EXPR2, while
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
EXPR2 -> - · TERM EXPR2, CONST
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR2 -> - · TERM EXPR2, return
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
EXPR2 -> - · TERM EXPR2, float
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), if
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , float
EXPR2 -> - · TERM EXPR2, for
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
EXPR2 -> - · TERM EXPR2, ID
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, -
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
EXPR2 -> - · TERM EXPR2, double
TERM -> · FACTOR TERM2 , ID
EXPR2 -> - · TERM EXPR2, int
FACTOR -> · ID, (
EXPR2 -> - · TERM EXPR2, (
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
EXPR2 -> - · TERM EXPR2, if
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , (
FACTOR -> · CONST, CONST
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
EXPR2 -> - · TERM EXPR2, void
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|294]: [begin]
PARG_LIST -> · PARG, )
CALL_STMT -> ID ( · PARG_LIST ), return
CALL_STMT -> ID ( · PARG_LIST ), ID
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), for
CALL_STMT -> ID ( · PARG_LIST ), CONST
CALL_STMT -> ID ( · PARG_LIST ), *
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), if
CALL_STMT -> ID ( · PARG_LIST ), while
CALL_STMT -> ID ( · PARG_LIST ), char
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), (
PARG_LIST -> ·, )
CALL_STMT -> ID ( · PARG_LIST ), float
CALL_STMT -> ID ( · PARG_LIST ), void
CALL_STMT -> ID ( · PARG_LIST ), int
CALL_STMT -> ID ( · PARG_LIST ), }
CALL_STMT -> ID ( · PARG_LIST ), double
CALL_STMT -> ID ( · PARG_LIST ), -
CALL_STMT -> ID ( · PARG_LIST ), /

[node|295]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
TERM2 -> * · FACTOR TERM2, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), (
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), char
TERM2 -> * · FACTOR TERM2, double
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
FACTOR -> · ( EXPR ), for
TERM2 -> * · FACTOR TERM2, ID
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
TERM2 -> * · FACTOR TERM2, float
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM2 -> * · FACTOR TERM2, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), if
TERM2 -> * · FACTOR TERM2, for
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
FACTOR -> · CALL_STMT, char
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
FACTOR -> · ID, (
TERM2 -> * · FACTOR TERM2, }
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
TERM2 -> * · FACTOR TERM2, CONST
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
FACTOR -> · CONST, CONST
TERM2 -> * · FACTOR TERM2, while
TERM2 -> * · FACTOR TERM2, char
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
TERM2 -> * · FACTOR TERM2, void
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
TERM2 -> * · FACTOR TERM2, -
TERM2 -> * · FACTOR TERM2, (
TERM2 -> * · FACTOR TERM2, int
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ( EXPR ), CONST
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|296]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
FACTOR -> · ID, if
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ID, double
TERM2 -> / · FACTOR TERM2, for
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
FACTOR -> · CALL_STMT, ID
FACTOR -> · ( EXPR ), for
TERM2 -> / · FACTOR TERM2, -
FACTOR -> · ID, ID
TERM2 -> / · FACTOR TERM2, float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, while
TERM2 -> / · FACTOR TERM2, double
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM2 -> / · FACTOR TERM2, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), if
TERM2 -> / · FACTOR TERM2, }
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
FACTOR -> · CALL_STMT, char
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
TERM2 -> / · FACTOR TERM2, if
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
FACTOR -> · ID, (
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM2 -> / · FACTOR TERM2, +
FACTOR -> · CONST, CONST
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), double
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
TERM2 -> / · FACTOR TERM2, ID
TERM2 -> / · FACTOR TERM2, char
TERM2 -> / · FACTOR TERM2, while
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), }
TERM2 -> / · FACTOR TERM2, CONST
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
TERM2 -> / · FACTOR TERM2, int
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ( EXPR ), CONST
TERM2 -> / · FACTOR TERM2, (
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), CONST
TERM2 -> / · FACTOR TERM2, void

[node|297]: [begin]
TERM -> FACTOR TERM2 ·, int
TERM -> FACTOR TERM2 ·, float
TERM -> FACTOR TERM2 ·, CONST
TERM -> FACTOR TERM2 ·, while
TERM -> FACTOR TERM2 ·, for
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, }
TERM -> FACTOR TERM2 ·, if
TERM -> FACTOR TERM2 ·, return
TERM -> FACTOR TERM2 ·, double
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, void
TERM -> FACTOR TERM2 ·, char
TERM -> FACTOR TERM2 ·, ID
TERM -> FACTOR TERM2 ·, (

[node|298]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, for
CODE_BLOCK -> { STMT_LIST } ·, while
CODE_BLOCK -> { STMT_LIST } ·, CONST
CODE_BLOCK -> { STMT_LIST } ·, }
CODE_BLOCK -> { STMT_LIST } ·, float
CODE_BLOCK -> { STMT_LIST } ·, return
CODE_BLOCK -> { STMT_LIST } ·, char
CODE_BLOCK -> { STMT_LIST } ·, if
CODE_BLOCK -> { STMT_LIST } ·, ID
CODE_BLOCK -> { STMT_LIST } ·, double
CODE_BLOCK -> { STMT_LIST } ·, void
CODE_BLOCK -> { STMT_LIST } ·, int
CODE_BLOCK -> { STMT_LIST } ·, (

[node|299]: [begin]
JUST_STMT -> EXPR < EXPR ·, char
JUST_STMT -> EXPR < EXPR ·, ID
JUST_STMT -> EXPR < EXPR ·, (
JUST_STMT -> EXPR < EXPR ·, double
JUST_STMT -> EXPR < EXPR ·, if
JUST_STMT -> EXPR < EXPR ·, void
JUST_STMT -> EXPR < EXPR ·, return
JUST_STMT -> EXPR < EXPR ·, while
JUST_STMT -> EXPR < EXPR ·, float
JUST_STMT -> EXPR < EXPR ·, CONST
JUST_STMT -> EXPR < EXPR ·, for
JUST_STMT -> EXPR < EXPR ·, }
JUST_STMT -> EXPR < EXPR ·, int

[node|300]: [begin]
JUST_STMT -> EXPR <= EXPR ·, }
JUST_STMT -> EXPR <= EXPR ·, while
JUST_STMT -> EXPR <= EXPR ·, float
JUST_STMT -> EXPR <= EXPR ·, int
JUST_STMT -> EXPR <= EXPR ·, CONST
JUST_STMT -> EXPR <= EXPR ·, for
JUST_STMT -> EXPR <= EXPR ·, (
JUST_STMT -> EXPR <= EXPR ·, ID
JUST_STMT -> EXPR <= EXPR ·, char
JUST_STMT -> EXPR <= EXPR ·, void
JUST_STMT -> EXPR <= EXPR ·, double
JUST_STMT -> EXPR <= EXPR ·, return
JUST_STMT -> EXPR <= EXPR ·, if

[node|301]: [begin]
JUST_STMT -> EXPR >= EXPR ·, int
JUST_STMT -> EXPR >= EXPR ·, }
JUST_STMT -> EXPR >= EXPR ·, double
JUST_STMT -> EXPR >= EXPR ·, CONST
JUST_STMT -> EXPR >= EXPR ·, while
JUST_STMT -> EXPR >= EXPR ·, char
JUST_STMT -> EXPR >= EXPR ·, ID
JUST_STMT -> EXPR >= EXPR ·, for
JUST_STMT -> EXPR >= EXPR ·, (
JUST_STMT -> EXPR >= EXPR ·, return
JUST_STMT -> EXPR >= EXPR ·, void
JUST_STMT -> EXPR >= EXPR ·, if
JUST_STMT -> EXPR >= EXPR ·, float

[node|302]: [begin]
JUST_STMT -> EXPR == EXPR ·, if
JUST_STMT -> EXPR == EXPR ·, return
JUST_STMT -> EXPR == EXPR ·, double
JUST_STMT -> EXPR == EXPR ·, void
JUST_STMT -> EXPR == EXPR ·, char
JUST_STMT -> EXPR == EXPR ·, ID
JUST_STMT -> EXPR == EXPR ·, (
JUST_STMT -> EXPR == EXPR ·, int
JUST_STMT -> EXPR == EXPR ·, float
JUST_STMT -> EXPR == EXPR ·, while
JUST_STMT -> EXPR == EXPR ·, CONST
JUST_STMT -> EXPR == EXPR ·, for
JUST_STMT -> EXPR == EXPR ·, }

[node|303]: [begin]
JUST_STMT -> EXPR > EXPR ·, int
JUST_STMT -> EXPR > EXPR ·, for
JUST_STMT -> EXPR > EXPR ·, void
JUST_STMT -> EXPR > EXPR ·, float
JUST_STMT -> EXPR > EXPR ·, CONST
JUST_STMT -> EXPR > EXPR ·, return
JUST_STMT -> EXPR > EXPR ·, if
JUST_STMT -> EXPR > EXPR ·, (
JUST_STMT -> EXPR > EXPR ·, ID
JUST_STMT -> EXPR > EXPR ·, }
JUST_STMT -> EXPR > EXPR ·, char
JUST_STMT -> EXPR > EXPR ·, while
JUST_STMT -> EXPR > EXPR ·, double

[node|304]: [begin]
JUST_STMT -> EXPR != EXPR ·, while
JUST_STMT -> EXPR != EXPR ·, CONST
JUST_STMT -> EXPR != EXPR ·, for
JUST_STMT -> EXPR != EXPR ·, float
JUST_STMT -> EXPR != EXPR ·, }
JUST_STMT -> EXPR != EXPR ·, int
JUST_STMT -> EXPR != EXPR ·, char
JUST_STMT -> EXPR != EXPR ·, ID
JUST_STMT -> EXPR != EXPR ·, (
JUST_STMT -> EXPR != EXPR ·, double
JUST_STMT -> EXPR != EXPR ·, if
JUST_STMT -> EXPR != EXPR ·, void
JUST_STMT -> EXPR != EXPR ·, return

[node|305]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), (
FACTOR -> · ID, CONST
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), char
FACTOR -> · ( EXPR ), (
TERM -> · FACTOR TERM2 , char
TERM -> · FACTOR TERM2 , while
FACTOR -> · ID, char
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · ( EXPR ), char
INIT_STMT -> TYPE_SPEC ID = · EXPR, CONST
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, (
TERM -> · FACTOR TERM2 , CONST
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
INIT_STMT -> TYPE_SPEC ID = · EXPR, return
FACTOR -> · ID, double
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, float
FACTOR -> · ( EXPR ), *
INIT_STMT -> TYPE_SPEC ID = · EXPR, while
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, ID
TERM -> · FACTOR TERM2 , }
FACTOR -> · ( EXPR ), for
EXPR -> · TERM EXPR2, (
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, int
FACTOR -> · CALL_STMT, while
INIT_STMT -> TYPE_SPEC ID = · EXPR, if
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, float
CALL_STMT -> · ID ( PARG_LIST ), float
EXPR -> · TERM EXPR2, CONST
FACTOR -> · CALL_STMT, double
FACTOR -> · CALL_STMT, (
FACTOR -> · ( EXPR ), float
FACTOR -> · CALL_STMT, CONST
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, char
FACTOR -> · CALL_STMT, void
INIT_STMT -> TYPE_SPEC ID = · EXPR, float
EXPR -> · TERM EXPR2, ID
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
TERM -> · FACTOR TERM2 , for
INIT_STMT -> TYPE_SPEC ID = · EXPR, void
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), if
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · CONST, void
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , float
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
TERM -> · FACTOR TERM2 , double
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, int
FACTOR -> · ID, }
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, char
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, return
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ID, (
INIT_STMT -> TYPE_SPEC ID = · EXPR, (
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, double
CALL_STMT -> · ID ( PARG_LIST ), ID
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , (
FACTOR -> · CONST, CONST
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · ID, void
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
EXPR -> · TERM EXPR2, }
TERM -> · FACTOR TERM2 , void
TERM -> · FACTOR TERM2 , if
FACTOR -> · ( EXPR ), double
EXPR -> · TERM EXPR2, return
INIT_STMT -> TYPE_SPEC ID = · EXPR, }
INIT_STMT -> TYPE_SPEC ID = · EXPR, int
FACTOR -> · ( EXPR ), +
FACTOR -> · CONST, int
INIT_STMT -> TYPE_SPEC ID = · EXPR, for
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), int
INIT_STMT -> TYPE_SPEC ID = · EXPR, double
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR -> · TERM EXPR2, float
FACTOR -> · ( EXPR ), CONST
INIT_STMT -> TYPE_SPEC ID = · EXPR, char
FACTOR -> · ID, while
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, for
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, return
INIT_STMT -> TYPE_SPEC ID = · EXPR, ID
CALL_STMT -> · ID ( PARG_LIST ), CONST

[node|306]: [begin]
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> ·, while
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> + TERM · EXPR2, if
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · + TERM EXPR2, CONST
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> ·, double
EXPR2 -> + TERM · EXPR2, while
EXPR2 -> · + TERM EXPR2, (
EXPR2 -> + TERM · EXPR2, <=
EXPR2 -> ·, if
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> ·, }
EXPR2 -> · + TERM EXPR2, char
EXPR2 -> ·, <=
EXPR2 -> ·, !=
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> + TERM · EXPR2, ==
EXPR2 -> + TERM · EXPR2, double
EXPR2 -> ·, >=
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, return
EXPR2 -> · - TERM EXPR2, float
EXPR2 -> + TERM · EXPR2, }
EXPR2 -> ·, for
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> + TERM · EXPR2, !=
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, CONST
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> ·, >
EXPR2 -> + TERM · EXPR2, float
EXPR2 -> ·, ==
EXPR2 -> + TERM · EXPR2, >=
EXPR2 -> ·, return
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> + TERM · EXPR2, (
EXPR2 -> + TERM · EXPR2, for
EXPR2 -> + TERM · EXPR2, >
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> ·, float
EXPR2 -> · - TERM EXPR2, char
EXPR2 -> + TERM · EXPR2, return
EXPR2 -> ·, (
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> + TERM · EXPR2, ID
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> ·, char
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> ·, <
EXPR2 -> + TERM · EXPR2, void
EXPR2 -> ·, ID
EXPR2 -> · - TERM EXPR2, (
EXPR2 -> + TERM · EXPR2, char
EXPR2 -> + TERM · EXPR2, int
EXPR2 -> ·, CONST
EXPR2 -> + TERM · EXPR2, <
EXPR2 -> ·, void
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> + TERM · EXPR2, CONST
EXPR2 -> · - TERM EXPR2, <

[node|307]: [begin]
FACTOR -> ID ·, >
FACTOR -> ID ·, <=
CALL_STMT -> ID · ( PARG_LIST ), ID
FACTOR -> ID ·, ID
CALL_STMT -> ID · ( PARG_LIST ), <=
CALL_STMT -> ID · ( PARG_LIST ), >
CALL_STMT -> ID · ( PARG_LIST ), for
FACTOR -> ID ·, return
CALL_STMT -> ID · ( PARG_LIST ), /
CALL_STMT -> ID · ( PARG_LIST ), -
FACTOR -> ID ·, CONST
FACTOR -> ID ·, for
CALL_STMT -> ID · ( PARG_LIST ), <
CALL_STMT -> ID · ( PARG_LIST ), double
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), int
CALL_STMT -> ID · ( PARG_LIST ), }
FACTOR -> ID ·, if
CALL_STMT -> ID · ( PARG_LIST ), float
CALL_STMT -> ID · ( PARG_LIST ), ==
CALL_STMT -> ID · ( PARG_LIST ), void
FACTOR -> ID ·, while
FACTOR -> ID ·, !=
CALL_STMT -> ID · ( PARG_LIST ), (
CALL_STMT -> ID · ( PARG_LIST ), char
CALL_STMT -> ID · ( PARG_LIST ), +
CALL_STMT -> ID · ( PARG_LIST ), >=
FACTOR -> ID ·, >=
FACTOR -> ID ·, char
FACTOR -> ID ·, +
FACTOR -> ID ·, (
CALL_STMT -> ID · ( PARG_LIST ), !=
CALL_STMT -> ID · ( PARG_LIST ), while
FACTOR -> ID ·, void
FACTOR -> ID ·, ==
FACTOR -> ID ·, float
CALL_STMT -> ID · ( PARG_LIST ), if
FACTOR -> ID ·, }
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, int
FACTOR -> ID ·, double
FACTOR -> ID ·, /
FACTOR -> ID ·, <
CALL_STMT -> ID · ( PARG_LIST ), CONST
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), return

[node|308]: [begin]
EXPR2 -> ·, while
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> - TERM · EXPR2, ==
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · + TERM EXPR2, CONST
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> ·, double
EXPR2 -> · + TERM EXPR2, (
EXPR2 -> ·, if
EXPR2 -> - TERM · EXPR2, <=
EXPR2 -> - TERM · EXPR2, while
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> · + TERM EXPR2, char
EXPR2 -> ·, }
EXPR2 -> - TERM · EXPR2, if
EXPR2 -> ·, <=
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> ·, !=
EXPR2 -> - TERM · EXPR2, }
EXPR2 -> ·, >=
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, return
EXPR2 -> · - TERM EXPR2, float
EXPR2 -> - TERM · EXPR2, double
EXPR2 -> - TERM · EXPR2, CONST
EXPR2 -> ·, for
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, CONST
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> ·, >
EXPR2 -> ·, ==
EXPR2 -> - TERM · EXPR2, <
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> ·, return
EXPR2 -> - TERM · EXPR2, int
EXPR2 -> - TERM · EXPR2, char
EXPR2 -> ·, float
EXPR2 -> - TERM · EXPR2, void
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, char
EXPR2 -> ·, (
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> - TERM · EXPR2, ID
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> ·, char
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> - TERM · EXPR2, return
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> - TERM · EXPR2, >
EXPR2 -> ·, <
EXPR2 -> ·, ID
EXPR2 -> · - TERM EXPR2, (
EXPR2 -> - TERM · EXPR2, for
EXPR2 -> ·, CONST
EXPR2 -> - TERM · EXPR2, (
EXPR2 -> - TERM · EXPR2, >=
EXPR2 -> - TERM · EXPR2, float
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> ·, void
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> - TERM · EXPR2, !=
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> · - TERM EXPR2, <

[node|309]: [begin]
ASSIGN_STMT -> ID = EXPR ·, ID
ASSIGN_STMT -> ID = EXPR ·, (
ASSIGN_STMT -> ID = EXPR ·, if
ASSIGN_STMT -> ID = EXPR ·, return
ASSIGN_STMT -> ID = EXPR ·, float
ASSIGN_STMT -> ID = EXPR ·, void
ASSIGN_STMT -> ID = EXPR ·, CONST
ASSIGN_STMT -> ID = EXPR ·, int
ASSIGN_STMT -> ID = EXPR ·, double
ASSIGN_STMT -> ID = EXPR ·, for
ASSIGN_STMT -> ID = EXPR ·, char
ASSIGN_STMT -> ID = EXPR ·, while
ASSIGN_STMT -> ID = EXPR ·, }

[node|310]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), >
CALL_STMT -> ID ( PARG_LIST · ), (
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), double
CALL_STMT -> ID ( PARG_LIST · ), float
CALL_STMT -> ID ( PARG_LIST · ), <=
CALL_STMT -> ID ( PARG_LIST · ), !=
CALL_STMT -> ID ( PARG_LIST · ), <
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), char
CALL_STMT -> ID ( PARG_LIST · ), }
CALL_STMT -> ID ( PARG_LIST · ), int
CALL_STMT -> ID ( PARG_LIST · ), if
CALL_STMT -> ID ( PARG_LIST · ), void
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), ==
CALL_STMT -> ID ( PARG_LIST · ), ID
CALL_STMT -> ID ( PARG_LIST · ), return
CALL_STMT -> ID ( PARG_LIST · ), >=
CALL_STMT -> ID ( PARG_LIST · ), CONST
CALL_STMT -> ID ( PARG_LIST · ), for
CALL_STMT -> ID ( PARG_LIST · ), while

[node|311]: [begin]
TERM2 -> * FACTOR · TERM2, >
TERM2 -> ·, <=
TERM2 -> ·, while
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, +
TERM2 -> * FACTOR · TERM2, (
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, ID
TERM2 -> * FACTOR · TERM2, return
TERM2 -> * FACTOR · TERM2, float
TERM2 -> * FACTOR · TERM2, for
TERM2 -> ·, CONST
TERM2 -> ·, }
TERM2 -> · * FACTOR TERM2, >
TERM2 -> · * FACTOR TERM2, void
TERM2 -> * FACTOR · TERM2, int
TERM2 -> ·, double
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, +
TERM2 -> * FACTOR · TERM2, <
TERM2 -> * FACTOR · TERM2, -
TERM2 -> ·, !=
TERM2 -> · * FACTOR TERM2, float
TERM2 -> * FACTOR · TERM2, ID
TERM2 -> · / FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> * FACTOR · TERM2, char
TERM2 -> · / FACTOR TERM2, for
TERM2 -> * FACTOR · TERM2, void
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, if
TERM2 -> · * FACTOR TERM2, ID
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · * FACTOR TERM2, for
TERM2 -> ·, >
TERM2 -> * FACTOR · TERM2, <=
TERM2 -> * FACTOR · TERM2, while
TERM2 -> · / FACTOR TERM2, char
TERM2 -> · / FACTOR TERM2, void
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> * FACTOR · TERM2, +
TERM2 -> ·, (
TERM2 -> * FACTOR · TERM2, >=
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, return
TERM2 -> ·, float
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, for
TERM2 -> * FACTOR · TERM2, CONST
TERM2 -> · * FACTOR TERM2, int
TERM2 -> * FACTOR · TERM2, }
TERM2 -> ·, int
TERM2 -> * FACTOR · TERM2, double
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · * FACTOR TERM2, (
TERM2 -> · * FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, <
TERM2 -> ·, -
TERM2 -> · / FACTOR TERM2, if
TERM2 -> * FACTOR · TERM2, !=
TERM2 -> ·, ID
TERM2 -> · / FACTOR TERM2, >
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · / FACTOR TERM2, CONST
TERM2 -> ·, char
TERM2 -> ·, void
TERM2 -> · * FACTOR TERM2, char
TERM2 -> * FACTOR · TERM2, ==
TERM2 -> · * FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, (
TERM2 -> · / FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, if
TERM2 -> · / FACTOR TERM2, float
TERM2 -> * FACTOR · TERM2, if
TERM2 -> · * FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, CONST
TERM2 -> · / FACTOR TERM2, int

[node|312]: [begin]
TERM2 -> ·, <=
TERM2 -> / FACTOR · TERM2, CONST
TERM2 -> ·, while
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, +
TERM2 -> / FACTOR · TERM2, double
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, ID
TERM2 -> / FACTOR · TERM2, <=
TERM2 -> ·, CONST
TERM2 -> / FACTOR · TERM2, while
TERM2 -> / FACTOR · TERM2, !=
TERM2 -> ·, }
TERM2 -> · * FACTOR TERM2, >
TERM2 -> · * FACTOR TERM2, void
TERM2 -> ·, double
TERM2 -> / FACTOR · TERM2, >=
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, +
TERM2 -> ·, !=
TERM2 -> · * FACTOR TERM2, float
TERM2 -> / FACTOR · TERM2, }
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> · / FACTOR TERM2, return
TERM2 -> / FACTOR · TERM2, if
TERM2 -> · / FACTOR TERM2, for
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> / FACTOR · TERM2, >
TERM2 -> · / FACTOR TERM2, <
TERM2 -> / FACTOR · TERM2, (
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, if
TERM2 -> · * FACTOR TERM2, ID
TERM2 -> · / FACTOR TERM2, }
TERM2 -> / FACTOR · TERM2, ==
TERM2 -> · * FACTOR TERM2, for
TERM2 -> / FACTOR · TERM2, return
TERM2 -> / FACTOR · TERM2, float
TERM2 -> · / FACTOR TERM2, char
TERM2 -> ·, >
TERM2 -> / FACTOR · TERM2, for
TERM2 -> · / FACTOR TERM2, void
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> ·, (
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, return
TERM2 -> ·, float
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, for
TERM2 -> · * FACTOR TERM2, int
TERM2 -> / FACTOR · TERM2, ID
TERM2 -> ·, int
TERM2 -> / FACTOR · TERM2, char
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · * FACTOR TERM2, (
TERM2 -> · * FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, <
TERM2 -> ·, -
TERM2 -> · / FACTOR TERM2, if
TERM2 -> ·, ID
TERM2 -> / FACTOR · TERM2, int
TERM2 -> ·, char
TERM2 -> · / FACTOR TERM2, >
TERM2 -> · / FACTOR TERM2, CONST
TERM2 -> ·, void
TERM2 -> / FACTOR · TERM2, <
TERM2 -> · * FACTOR TERM2, char
TERM2 -> · * FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, (
TERM2 -> / FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, if
TERM2 -> · * FACTOR TERM2, return
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · / FACTOR TERM2, float
TERM2 -> / FACTOR · TERM2, void
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · * FACTOR TERM2, CONST
TERM2 -> · / FACTOR TERM2, int

[node|313]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
CODE_BLOCK -> { · STMT_LIST }, )
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|314]: [begin]
ITER_STMT -> while ( STMT ) STMT ·, )

[node|315]: [begin]
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, )

[node|316]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
CODE_BLOCK -> { · STMT_LIST }, else
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
CODE_BLOCK -> { · STMT_LIST }, )
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|317]: [begin]
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, )
IF_STMT -> if ( STMT ) STMT · ;, )
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, )

[node|318]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, )
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, )
IF_STMT -> if ( STMT ) CODE_BLOCK ·, )

[node|319]: [begin]
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, )
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, )

[node|320]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, for
CODE_BLOCK -> { STMT_LIST } ·, while
CODE_BLOCK -> { STMT_LIST } ·, CONST
CODE_BLOCK -> { STMT_LIST } ·, else
CODE_BLOCK -> { STMT_LIST } ·, float
CODE_BLOCK -> { STMT_LIST } ·, }
CODE_BLOCK -> { STMT_LIST } ·, return
CODE_BLOCK -> { STMT_LIST } ·, char
CODE_BLOCK -> { STMT_LIST } ·, if
CODE_BLOCK -> { STMT_LIST } ·, ID
CODE_BLOCK -> { STMT_LIST } ·, double
CODE_BLOCK -> { STMT_LIST } ·, void
CODE_BLOCK -> { STMT_LIST } ·, int
CODE_BLOCK -> { STMT_LIST } ·, (

[node|321]: [begin]
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, return
CODE_BLOCK -> · { STMT_LIST }, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, char
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
CODE_BLOCK -> · { STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, while
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, char
CODE_BLOCK -> · { STMT_LIST }, (
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, CONST
CODE_BLOCK -> · { STMT_LIST }, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
CODE_BLOCK -> · { STMT_LIST }, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, ID
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, float
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, ID
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, double
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
CODE_BLOCK -> · { STMT_LIST }, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
CODE_BLOCK -> · { STMT_LIST }, char
CODE_BLOCK -> · { STMT_LIST }, while
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, void
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ;, for
CODE_BLOCK -> · { STMT_LIST }, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
CODE_BLOCK -> · { STMT_LIST }, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ;, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, void
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ;, char
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
CODE_BLOCK -> · { STMT_LIST }, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, while

[node|322]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, }
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, double
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, int
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, float
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, if
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, void
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, (
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, return
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, ID
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, for
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, char
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, CONST
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, while

[node|323]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, (
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, ID
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, if
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, return
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, float
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, for
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, void
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, CONST
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, int
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, double
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, while
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, char
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, }

[node|324]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, double
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, ID
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, CONST
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, for
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, int
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, char
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, }
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, if
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, if
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, ID
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, while
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, double
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, void
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, (
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, for
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, float
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, int
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, }
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, while
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, char
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, return
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, void
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, (
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, float
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, CONST
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, return

[node|325]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
CODE_BLOCK -> { · STMT_LIST }, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|326]: [begin]
ITER_STMT -> while ( STMT ) STMT ·, ;

[node|327]: [begin]
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, ;

[node|328]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> · if ( STMT ) STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
FACTOR -> · ( EXPR ), *
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
CODE_BLOCK -> { · STMT_LIST }, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ;, void
INIT_STMT -> · TYPE_SPEC ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
CODE_BLOCK -> { · STMT_LIST }, else
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, (
STMT_LIST -> · ITER_STMT STMT_LIST, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · CONST, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ;, CONST
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
ITER_STMT -> · while ( STMT ) STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
EXPR -> · TERM EXPR2, ;
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
TYPE_SPEC -> · float, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, /
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
STMT_LIST -> · EXPR ; STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, double
FACTOR -> · CONST, *
STMT_LIST -> · IF_STMT STMT_LIST, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
TERM -> · FACTOR TERM2 , ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
FACTOR -> · ID, *
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
TYPE_SPEC -> · char, ID
ITER_STMT -> · while ( STMT ) STMT, }
FACTOR -> · CALL_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
STMT_LIST -> ·, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, char
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
TERM -> · FACTOR TERM2 , -

[node|329]: [begin]
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, ;
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, ;
IF_STMT -> if ( STMT ) STMT · ;, ;

[node|330]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK ·, ;
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, ;
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, ;

[node|331]: [begin]
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, ;
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, ;

[node|332]: [begin]
FACTOR -> ( EXPR ) ·, (
FACTOR -> ( EXPR ) ·, }
FACTOR -> ( EXPR ) ·, float
FACTOR -> ( EXPR ) ·, for
FACTOR -> ( EXPR ) ·, CONST
FACTOR -> ( EXPR ) ·, while
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, return
FACTOR -> ( EXPR ) ·, void
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, if
FACTOR -> ( EXPR ) ·, double
FACTOR -> ( EXPR ) ·, ID
FACTOR -> ( EXPR ) ·, char
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, int

[node|333]: [begin]
EXPR2 -> ·, while
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> + TERM · EXPR2, if
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · + TERM EXPR2, CONST
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> ·, double
EXPR2 -> + TERM · EXPR2, while
EXPR2 -> · + TERM EXPR2, (
EXPR2 -> ·, if
EXPR2 -> ·, }
EXPR2 -> · + TERM EXPR2, char
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> · - TERM EXPR2, return
EXPR2 -> · - TERM EXPR2, float
EXPR2 -> + TERM · EXPR2, }
EXPR2 -> ·, for
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, CONST
EXPR2 -> + TERM · EXPR2, float
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> ·, return
EXPR2 -> + TERM · EXPR2, (
EXPR2 -> + TERM · EXPR2, for
EXPR2 -> ·, float
EXPR2 -> · - TERM EXPR2, char
EXPR2 -> + TERM · EXPR2, return
EXPR2 -> ·, (
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> + TERM · EXPR2, ID
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, int
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> ·, char
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> + TERM · EXPR2, void
EXPR2 -> ·, ID
EXPR2 -> · - TERM EXPR2, (
EXPR2 -> + TERM · EXPR2, char
EXPR2 -> + TERM · EXPR2, int
EXPR2 -> ·, CONST
EXPR2 -> ·, void
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> + TERM · EXPR2, CONST
EXPR2 -> + TERM · EXPR2, double

[node|334]: [begin]
EXPR2 -> ·, while
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · + TERM EXPR2, CONST
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> ·, double
EXPR2 -> · + TERM EXPR2, (
EXPR2 -> ·, if
EXPR2 -> - TERM · EXPR2, while
EXPR2 -> · + TERM EXPR2, char
EXPR2 -> ·, }
EXPR2 -> - TERM · EXPR2, if
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> · - TERM EXPR2, return
EXPR2 -> · - TERM EXPR2, float
EXPR2 -> - TERM · EXPR2, double
EXPR2 -> - TERM · EXPR2, CONST
EXPR2 -> ·, for
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, CONST
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> ·, return
EXPR2 -> - TERM · EXPR2, int
EXPR2 -> - TERM · EXPR2, char
EXPR2 -> ·, float
EXPR2 -> - TERM · EXPR2, void
EXPR2 -> · - TERM EXPR2, char
EXPR2 -> ·, (
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> - TERM · EXPR2, ID
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, int
EXPR2 -> ·, char
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> ·, int
EXPR2 -> - TERM · EXPR2, return
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> ·, ID
EXPR2 -> · - TERM EXPR2, (
EXPR2 -> - TERM · EXPR2, for
EXPR2 -> ·, CONST
EXPR2 -> - TERM · EXPR2, (
EXPR2 -> - TERM · EXPR2, float
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> ·, void
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> - TERM · EXPR2, }

[node|335]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), }
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), int
CALL_STMT -> ID ( PARG_LIST · ), float
CALL_STMT -> ID ( PARG_LIST · ), if
CALL_STMT -> ID ( PARG_LIST · ), return
CALL_STMT -> ID ( PARG_LIST · ), void
CALL_STMT -> ID ( PARG_LIST · ), CONST
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), ID
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), double
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), (
CALL_STMT -> ID ( PARG_LIST · ), char
CALL_STMT -> ID ( PARG_LIST · ), for
CALL_STMT -> ID ( PARG_LIST · ), while

[node|336]: [begin]
TERM2 -> ·, while
TERM2 -> ·, +
TERM2 -> * FACTOR · TERM2, (
TERM2 -> · / FACTOR TERM2, ID
TERM2 -> * FACTOR · TERM2, return
TERM2 -> * FACTOR · TERM2, float
TERM2 -> * FACTOR · TERM2, for
TERM2 -> ·, CONST
TERM2 -> ·, }
TERM2 -> · * FACTOR TERM2, void
TERM2 -> * FACTOR · TERM2, int
TERM2 -> ·, double
TERM2 -> · * FACTOR TERM2, +
TERM2 -> * FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, float
TERM2 -> * FACTOR · TERM2, ID
TERM2 -> · / FACTOR TERM2, return
TERM2 -> * FACTOR · TERM2, char
TERM2 -> · / FACTOR TERM2, for
TERM2 -> * FACTOR · TERM2, void
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, if
TERM2 -> · * FACTOR TERM2, ID
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · * FACTOR TERM2, for
TERM2 -> · / FACTOR TERM2, char
TERM2 -> * FACTOR · TERM2, while
TERM2 -> · / FACTOR TERM2, void
TERM2 -> * FACTOR · TERM2, +
TERM2 -> ·, (
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, return
TERM2 -> ·, float
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, for
TERM2 -> * FACTOR · TERM2, CONST
TERM2 -> · * FACTOR TERM2, int
TERM2 -> * FACTOR · TERM2, }
TERM2 -> ·, int
TERM2 -> * FACTOR · TERM2, double
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · * FACTOR TERM2, (
TERM2 -> · * FACTOR TERM2, double
TERM2 -> ·, -
TERM2 -> · / FACTOR TERM2, if
TERM2 -> ·, ID
TERM2 -> ·, char
TERM2 -> · / FACTOR TERM2, CONST
TERM2 -> ·, void
TERM2 -> · * FACTOR TERM2, char
TERM2 -> · * FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, (
TERM2 -> · / FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, if
TERM2 -> · / FACTOR TERM2, float
TERM2 -> * FACTOR · TERM2, if
TERM2 -> · * FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, CONST
TERM2 -> · / FACTOR TERM2, int

[node|337]: [begin]
TERM2 -> ·, while
TERM2 -> / FACTOR · TERM2, CONST
TERM2 -> ·, +
TERM2 -> / FACTOR · TERM2, double
TERM2 -> · / FACTOR TERM2, ID
TERM2 -> / FACTOR · TERM2, while
TERM2 -> ·, CONST
TERM2 -> ·, }
TERM2 -> · * FACTOR TERM2, void
TERM2 -> ·, double
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, float
TERM2 -> / FACTOR · TERM2, }
TERM2 -> · / FACTOR TERM2, return
TERM2 -> / FACTOR · TERM2, if
TERM2 -> · / FACTOR TERM2, for
TERM2 -> · / FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, (
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, if
TERM2 -> · * FACTOR TERM2, ID
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · * FACTOR TERM2, for
TERM2 -> / FACTOR · TERM2, return
TERM2 -> / FACTOR · TERM2, float
TERM2 -> · / FACTOR TERM2, char
TERM2 -> / FACTOR · TERM2, for
TERM2 -> · / FACTOR TERM2, void
TERM2 -> ·, (
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, return
TERM2 -> ·, float
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, for
TERM2 -> · * FACTOR TERM2, int
TERM2 -> / FACTOR · TERM2, ID
TERM2 -> ·, int
TERM2 -> / FACTOR · TERM2, char
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · * FACTOR TERM2, (
TERM2 -> · * FACTOR TERM2, double
TERM2 -> ·, -
TERM2 -> · / FACTOR TERM2, if
TERM2 -> ·, ID
TERM2 -> / FACTOR · TERM2, int
TERM2 -> ·, char
TERM2 -> · / FACTOR TERM2, CONST
TERM2 -> ·, void
TERM2 -> · * FACTOR TERM2, char
TERM2 -> · * FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, (
TERM2 -> / FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, if
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · / FACTOR TERM2, float
TERM2 -> / FACTOR · TERM2, void
TERM2 -> · * FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, CONST
TERM2 -> · / FACTOR TERM2, int

[node|338]: [begin]
INIT_STMT -> TYPE_SPEC ID = EXPR ·, int
INIT_STMT -> TYPE_SPEC ID = EXPR ·, CONST
INIT_STMT -> TYPE_SPEC ID = EXPR ·, while
INIT_STMT -> TYPE_SPEC ID = EXPR ·, for
INIT_STMT -> TYPE_SPEC ID = EXPR ·, char
INIT_STMT -> TYPE_SPEC ID = EXPR ·, }
INIT_STMT -> TYPE_SPEC ID = EXPR ·, double
INIT_STMT -> TYPE_SPEC ID = EXPR ·, return
INIT_STMT -> TYPE_SPEC ID = EXPR ·, (
INIT_STMT -> TYPE_SPEC ID = EXPR ·, ID
INIT_STMT -> TYPE_SPEC ID = EXPR ·, if
INIT_STMT -> TYPE_SPEC ID = EXPR ·, float
INIT_STMT -> TYPE_SPEC ID = EXPR ·, void

[node|339]: [begin]
EXPR2 -> + TERM EXPR2 ·, <=
EXPR2 -> + TERM EXPR2 ·, int
EXPR2 -> + TERM EXPR2 ·, while
EXPR2 -> + TERM EXPR2 ·, for
EXPR2 -> + TERM EXPR2 ·, char
EXPR2 -> + TERM EXPR2 ·, CONST
EXPR2 -> + TERM EXPR2 ·, }
EXPR2 -> + TERM EXPR2 ·, double
EXPR2 -> + TERM EXPR2 ·, >=
EXPR2 -> + TERM EXPR2 ·, return
EXPR2 -> + TERM EXPR2 ·, ID
EXPR2 -> + TERM EXPR2 ·, (
EXPR2 -> + TERM EXPR2 ·, ==
EXPR2 -> + TERM EXPR2 ·, >
EXPR2 -> + TERM EXPR2 ·, if
EXPR2 -> + TERM EXPR2 ·, <
EXPR2 -> + TERM EXPR2 ·, float
EXPR2 -> + TERM EXPR2 ·, !=
EXPR2 -> + TERM EXPR2 ·, void

[node|340]: [begin]
EXPR2 -> - TERM EXPR2 ·, (
EXPR2 -> - TERM EXPR2 ·, ID
EXPR2 -> - TERM EXPR2 ·, ==
EXPR2 -> - TERM EXPR2 ·, >=
EXPR2 -> - TERM EXPR2 ·, if
EXPR2 -> - TERM EXPR2 ·, return
EXPR2 -> - TERM EXPR2 ·, float
EXPR2 -> - TERM EXPR2 ·, while
EXPR2 -> - TERM EXPR2 ·, void
EXPR2 -> - TERM EXPR2 ·, >
EXPR2 -> - TERM EXPR2 ·, <=
EXPR2 -> - TERM EXPR2 ·, <
EXPR2 -> - TERM EXPR2 ·, !=
EXPR2 -> - TERM EXPR2 ·, for
EXPR2 -> - TERM EXPR2 ·, int
EXPR2 -> - TERM EXPR2 ·, double
EXPR2 -> - TERM EXPR2 ·, CONST
EXPR2 -> - TERM EXPR2 ·, char
EXPR2 -> - TERM EXPR2 ·, }

[node|341]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, int
CALL_STMT -> ID ( PARG_LIST ) ·, CONST
CALL_STMT -> ID ( PARG_LIST ) ·, for
CALL_STMT -> ID ( PARG_LIST ) ·, }
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, if
CALL_STMT -> ID ( PARG_LIST ) ·, <
CALL_STMT -> ID ( PARG_LIST ) ·, !=
CALL_STMT -> ID ( PARG_LIST ) ·, <=
CALL_STMT -> ID ( PARG_LIST ) ·, char
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, (
CALL_STMT -> ID ( PARG_LIST ) ·, float
CALL_STMT -> ID ( PARG_LIST ) ·, double
CALL_STMT -> ID ( PARG_LIST ) ·, >
CALL_STMT -> ID ( PARG_LIST ) ·, while
CALL_STMT -> ID ( PARG_LIST ) ·, >=
CALL_STMT -> ID ( PARG_LIST ) ·, return
CALL_STMT -> ID ( PARG_LIST ) ·, ID
CALL_STMT -> ID ( PARG_LIST ) ·, ==
CALL_STMT -> ID ( PARG_LIST ) ·, void

[node|342]: [begin]
TERM2 -> * FACTOR TERM2 ·, while
TERM2 -> * FACTOR TERM2 ·, return
TERM2 -> * FACTOR TERM2 ·, ==
TERM2 -> * FACTOR TERM2 ·, double
TERM2 -> * FACTOR TERM2 ·, void
TERM2 -> * FACTOR TERM2 ·, (
TERM2 -> * FACTOR TERM2 ·, for
TERM2 -> * FACTOR TERM2 ·, CONST
TERM2 -> * FACTOR TERM2 ·, +
TERM2 -> * FACTOR TERM2 ·, float
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, <
TERM2 -> * FACTOR TERM2 ·, int
TERM2 -> * FACTOR TERM2 ·, >
TERM2 -> * FACTOR TERM2 ·, }
TERM2 -> * FACTOR TERM2 ·, if
TERM2 -> * FACTOR TERM2 ·, >=
TERM2 -> * FACTOR TERM2 ·, ID
TERM2 -> * FACTOR TERM2 ·, !=
TERM2 -> * FACTOR TERM2 ·, <=
TERM2 -> * FACTOR TERM2 ·, char

[node|343]: [begin]
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, (
TERM2 -> / FACTOR TERM2 ·, while
TERM2 -> / FACTOR TERM2 ·, float
TERM2 -> / FACTOR TERM2 ·, double
TERM2 -> / FACTOR TERM2 ·, }
TERM2 -> / FACTOR TERM2 ·, int
TERM2 -> / FACTOR TERM2 ·, if
TERM2 -> / FACTOR TERM2 ·, <=
TERM2 -> / FACTOR TERM2 ·, !=
TERM2 -> / FACTOR TERM2 ·, <
TERM2 -> / FACTOR TERM2 ·, ID
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, >=
TERM2 -> / FACTOR TERM2 ·, char
TERM2 -> / FACTOR TERM2 ·, void
TERM2 -> / FACTOR TERM2 ·, ==
TERM2 -> / FACTOR TERM2 ·, return
TERM2 -> / FACTOR TERM2 ·, CONST
TERM2 -> / FACTOR TERM2 ·, for
TERM2 -> / FACTOR TERM2 ·, >

[node|344]: [begin]
CODE_BLOCK -> { STMT_LIST · }, )

[node|345]: [begin]
CODE_BLOCK -> { STMT_LIST · }, )
CODE_BLOCK -> { STMT_LIST · }, else

[node|346]: [begin]
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, )
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, )
IF_STMT -> if ( STMT ) STMT ; ·, )

[node|347]: [begin]
CODE_BLOCK -> · { STMT_LIST }, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> · if ( STMT ) STMT ;, )
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )

[node|348]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, )
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, !=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, >

[node|349]: [begin]
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, }
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, for
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, float
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, CONST
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, int
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, while
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, ID
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, (
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, char
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, void
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, double
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, return
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, if

[node|350]: [begin]
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, return
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, if
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, ID
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, (
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, }
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, char
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, CONST
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, while
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, for
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, double
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, int
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, void
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, float

[node|351]: [begin]
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, while
INIT_STMT -> · TYPE_SPEC ID = EXPR, while
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, return
STMT -> · ASSIGN_STMT, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
STMT -> · JUST_STMT, for
STMT -> · JUST_STMT, (
TERM -> · FACTOR TERM2 , char
FACTOR -> · ID, char
CODE_BLOCK -> · { STMT_LIST }, double
INIT_STMT -> · TYPE_SPEC ID, for
ITER_STMT -> · while ( STMT ) STMT, double
CODE_BLOCK -> · { STMT_LIST }, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
JUST_STMT -> · EXPR > EXPR, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, }
ASSIGN_STMT -> · ID = EXPR, double
INIT_STMT -> · TYPE_SPEC ID, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, char
TERM -> · FACTOR TERM2 , return
TERM -> · FACTOR TERM2 , }
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
STMT -> · IF_STMT, for
EXPR -> · TERM EXPR2, >=
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR == EXPR, }
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, CONST
FACTOR -> · CALL_STMT, float
STMT -> · ITER_STMT, void
EXPR -> · TERM EXPR2, CONST
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
JUST_STMT -> · EXPR <= EXPR, CONST
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, for
EXPR -> · TERM EXPR2, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
JUST_STMT -> · EXPR >= EXPR, ID
FACTOR -> · CALL_STMT, void
EXPR -> · TERM EXPR2, ID
JUST_STMT -> · EXPR <= EXPR, while
FACTOR -> · ( EXPR ), <
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
FACTOR -> · CALL_STMT, }
ITER_STMT -> · while ( STMT ) STMT, float
STMT -> · JUST_STMT, void
CALL_STMT -> · ID ( PARG_LIST ), >=
STMT -> · INIT_STMT, }
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
STMT -> · RTN_STMT, for
JUST_STMT -> · EXPR >= EXPR, return
STMT -> · IF_STMT, if
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · ITER_STMT, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, ID
FACTOR -> · CONST, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> · while ( STMT ) STMT, for
STMT -> · EXPR, for
EXPR -> · TERM EXPR2, <=
INIT_STMT -> · TYPE_SPEC ID, char
RTN_STMT -> · return EXPR, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), while
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, (
FACTOR -> · CONST, char
JUST_STMT -> · EXPR < EXPR, return
JUST_STMT -> · EXPR <= EXPR, return
RTN_STMT -> · return EXPR, ID
FACTOR -> · CALL_STMT, return
FACTOR -> · CALL_STMT, ==
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) STMT ;, void
STMT -> · ASSIGN_STMT, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, CONST
JUST_STMT -> · EXPR == EXPR, float
RTN_STMT -> · return EXPR, (
STMT -> · EXPR, if
STMT -> · RTN_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
JUST_STMT -> · EXPR > EXPR, double
CODE_BLOCK -> · { STMT_LIST }, return
STMT -> · EXPR, (
IF_STMT -> · if ( STMT ) STMT ;, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
RTN_STMT -> · return EXPR, if
TERM -> · FACTOR TERM2 , void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
INIT_STMT -> · TYPE_SPEC ID, (
CALL_STMT -> · ID ( PARG_LIST ), !=
STMT -> · EXPR, while
FACTOR -> · ( EXPR ), +
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
JUST_STMT -> · EXPR < EXPR, void
STMT -> · ASSIGN_STMT, if
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR <= EXPR, if
JUST_STMT -> · EXPR != EXPR, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
STMT -> · EXPR, ID
RTN_STMT -> · return EXPR, double
STMT -> · ITER_STMT, return
STMT -> · ASSIGN_STMT, while
IF_STMT -> · if ( STMT ) STMT ;, char
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, void
CALL_STMT -> · ID ( PARG_LIST ), int
EXPR -> · TERM EXPR2, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
FACTOR -> · ID, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
JUST_STMT -> · EXPR > EXPR, CONST
EXPR -> · TERM EXPR2, >
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, while
IF_STMT -> · if ( STMT ) STMT ;, return
CODE_BLOCK -> · { STMT_LIST }, ID
STMT -> · INIT_STMT, while
TYPE_SPEC -> · float, ID
FACTOR -> · CONST, /
FACTOR -> · CONST, -
EXPR -> · TERM EXPR2, for
STMT -> · IF_STMT, (
JUST_STMT -> · EXPR == EXPR, return
JUST_STMT -> · EXPR > EXPR, float
INIT_STMT -> · TYPE_SPEC ID = EXPR, char
JUST_STMT -> · EXPR == EXPR, void
JUST_STMT -> · EXPR <= EXPR, for
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, CONST
FACTOR -> · ( EXPR ), char
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, char
CODE_BLOCK -> · { STMT_LIST }, (
JUST_STMT -> · EXPR < EXPR, (
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> · while ( STMT ) STMT, while
STMT -> · IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, (
FACTOR -> · CONST, float
STMT -> · EXPR, int
EXPR -> · TERM EXPR2, void
STMT -> · ITER_STMT, CONST
FACTOR -> · CALL_STMT, ID
CODE_BLOCK -> · { STMT_LIST }, if
FACTOR -> · ( EXPR ), for
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
JUST_STMT -> · EXPR <= EXPR, void
STMT -> · ASSIGN_STMT, for
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
IF_STMT -> · if ( STMT ) STMT ;, double
JUST_STMT -> · EXPR >= EXPR, char
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, while
FACTOR -> · ID, for
FACTOR -> · CALL_STMT, (
IF_STMT -> · if ( STMT ) STMT ;, if
ASSIGN_STMT -> · ID = EXPR, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, (
TERM -> · FACTOR TERM2 , !=
EXPR -> · TERM EXPR2, while
JUST_STMT -> · EXPR < EXPR, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
JUST_STMT -> · EXPR != EXPR, void
FACTOR -> · CALL_STMT, if
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, int
TERM -> · FACTOR TERM2 , for
STMT -> · INIT_STMT, int
TERM -> · FACTOR TERM2 , >
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, char
JUST_STMT -> · EXPR == EXPR, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
JUST_STMT -> · EXPR < EXPR, float
STMT -> · JUST_STMT, ID
STMT -> · IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
FACTOR -> · CONST, void
STMT -> · RTN_STMT, ID
JUST_STMT -> · EXPR > EXPR, return
IF_STMT -> · if ( STMT ) STMT ;, int
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, char
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, (
IF_STMT -> · if ( STMT ) STMT ;, float
FACTOR -> · ( EXPR ), while
FACTOR -> · CONST, <
ASSIGN_STMT -> · ID = EXPR, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, char
INIT_STMT -> · TYPE_SPEC ID = EXPR, (
STMT -> · IF_STMT, char
STMT -> · ASSIGN_STMT, ID
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, double
JUST_STMT -> · EXPR != EXPR, while
ASSIGN_STMT -> · ID = EXPR, void
STMT -> · INIT_STMT, (
RTN_STMT -> · return EXPR, return
JUST_STMT -> · EXPR == EXPR, ID
TYPE_SPEC -> · void, ID
RTN_STMT -> · return EXPR, void
JUST_STMT -> · EXPR <= EXPR, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, CONST
FACTOR -> · CALL_STMT, for
STMT -> · INIT_STMT, char
JUST_STMT -> · EXPR != EXPR, CONST
STMT -> · JUST_STMT, }
EXPR -> · TERM EXPR2, !=
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
JUST_STMT -> · EXPR < EXPR, while
CODE_BLOCK -> · { STMT_LIST }, char
INIT_STMT -> · TYPE_SPEC ID = EXPR, ID
JUST_STMT -> · EXPR != EXPR, char
FACTOR -> · CALL_STMT, *
STMT -> · EXPR, }
STMT -> · INIT_STMT, for
TERM -> · FACTOR TERM2 , int
JUST_STMT -> · EXPR > EXPR, void
JUST_STMT -> · EXPR <= EXPR, double
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
STMT -> · EXPR, void
FACTOR -> · CONST, >
JUST_STMT -> · EXPR > EXPR, for
EXPR -> · TERM EXPR2, <
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) STMT, void
STMT -> · RTN_STMT, void
FACTOR -> · CALL_STMT, !=
FACTOR -> · CONST, ID
CALL_STMT -> · ID ( PARG_LIST ), +
JUST_STMT -> · EXPR >= EXPR, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, char
TERM -> · FACTOR TERM2 , if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
FACTOR -> · CONST, int
STMT -> · EXPR, char
INIT_STMT -> · TYPE_SPEC ID, double
INIT_STMT -> · TYPE_SPEC ID, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, (
STMT -> · ASSIGN_STMT, }
RTN_STMT -> · return EXPR, while
FACTOR -> · ( EXPR ), int
INIT_STMT -> · TYPE_SPEC ID, if
STMT -> · RTN_STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
FACTOR -> · ( EXPR ), void
JUST_STMT -> · EXPR != EXPR, int
JUST_STMT -> · EXPR <= EXPR, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
STMT -> · ITER_STMT, for
JUST_STMT -> · EXPR > EXPR, int
FACTOR -> · ( EXPR ), CONST
INIT_STMT -> · TYPE_SPEC ID = EXPR, int
CALL_STMT -> · ID ( PARG_LIST ), return
CALL_STMT -> · ID ( PARG_LIST ), void
STMT -> · ASSIGN_STMT, CONST
ASSIGN_STMT -> · ID = EXPR, char
JUST_STMT -> · EXPR <= EXPR, }
STMT -> · ASSIGN_STMT, void
CALL_STMT -> · ID ( PARG_LIST ), CONST
CALL_STMT -> · ID ( PARG_LIST ), (
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
JUST_STMT -> · EXPR != EXPR, (
FACTOR -> · ID, CONST
JUST_STMT -> · EXPR < EXPR, char
ASSIGN_STMT -> · ID = EXPR, CONST
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
JUST_STMT -> · EXPR > EXPR, while
FACTOR -> · CONST, }
FACTOR -> · ( EXPR ), (
CALL_STMT -> · ID ( PARG_LIST ), char
INIT_STMT -> · TYPE_SPEC ID, return
ITER_STMT -> · while ( STMT ) STMT, if
STMT -> · JUST_STMT, double
TERM -> · FACTOR TERM2 , while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
STMT -> · RTN_STMT, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
JUST_STMT -> · EXPR < EXPR, CONST
FACTOR -> · CALL_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), *
TERM -> · FACTOR TERM2 , CONST
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT -> · JUST_STMT, char
STMT -> · RTN_STMT, return
IF_STMT -> · if ( STMT ) STMT ;, ID
STMT -> · ITER_STMT, if
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, (
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
STMT -> · ITER_STMT, double
JUST_STMT -> · EXPR == EXPR, (
STMT -> · RTN_STMT, if
STMT -> · INIT_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
JUST_STMT -> · EXPR < EXPR, }
STMT -> · ASSIGN_STMT, return
EXPR -> · TERM EXPR2, (
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, char
FACTOR -> · ID, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, float
STMT -> · JUST_STMT, if
JUST_STMT -> · EXPR != EXPR, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
JUST_STMT -> · EXPR == EXPR, CONST
FACTOR -> · CALL_STMT, CONST
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, float
FACTOR -> · ( EXPR ), float
STMT -> · ITER_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
CODE_BLOCK -> · { STMT_LIST }, void
STMT -> · RTN_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
JUST_STMT -> · EXPR == EXPR, while
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
JUST_STMT -> · EXPR >= EXPR, for
FACTOR -> · CALL_STMT, <
STMT -> · INIT_STMT, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, char
ITER_STMT -> · while ( STMT ) STMT, (
STMT -> · INIT_STMT, void
JUST_STMT -> · EXPR >= EXPR, float
STMT -> · INIT_STMT, CONST
RTN_STMT -> · return EXPR, char
IF_STMT -> · if ( STMT ) STMT ;, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, }
JUST_STMT -> · EXPR != EXPR, if
JUST_STMT -> · EXPR >= EXPR, (
INIT_STMT -> · TYPE_SPEC ID = EXPR, void
FACTOR -> · CONST, >=
FACTOR -> · ID, }
RTN_STMT -> · return EXPR, for
FACTOR -> · ID, <=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, CONST
FACTOR -> · CONST, if
JUST_STMT -> · EXPR != EXPR, return
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, (
IF_STMT -> · if ( STMT ) CODE_BLOCK, (
TERM -> · FACTOR TERM2 , ID
STMT -> · ITER_STMT, while
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
JUST_STMT -> · EXPR >= EXPR, if
EXPR -> · TERM EXPR2, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
CALL_STMT -> · ID ( PARG_LIST ), ID
JUST_STMT -> · EXPR != EXPR, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
JUST_STMT -> · EXPR >= EXPR, double
CODE_BLOCK -> · { STMT_LIST }, while
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
STMT -> · EXPR, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
STMT -> · IF_STMT, double
TERM -> · FACTOR TERM2 , (
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
JUST_STMT -> · EXPR > EXPR, (
STMT -> · IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, CONST
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · JUST_STMT, return
ASSIGN_STMT -> · ID = EXPR, for
EXPR -> · TERM EXPR2, return
RTN_STMT -> · return EXPR, }
STMT -> · RTN_STMT, int
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, void
FACTOR -> · ID, !=
STMT -> · INIT_STMT, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, float
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, float
FACTOR -> · ID, float
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
JUST_STMT -> · EXPR > EXPR, }
STMT -> · ITER_STMT, (
CALL_STMT -> · ID ( PARG_LIST ), ==
STMT -> · IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ;, CONST
INIT_STMT -> · TYPE_SPEC ID = EXPR, CONST
CODE_BLOCK -> · { STMT_LIST }, for
ITER_STMT -> · while ( STMT ) STMT, return
FACTOR -> · CONST, for
FACTOR -> · ID, >=
STMT -> · IF_STMT, return
STMT -> · IF_STMT, void
ASSIGN_STMT -> · ID = EXPR, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, CONST
JUST_STMT -> · EXPR < EXPR, ID
STMT -> · EXPR, float
JUST_STMT -> · EXPR >= EXPR, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
FACTOR -> · CONST, <=
FACTOR -> · ID, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
JUST_STMT -> · EXPR == EXPR, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
INIT_STMT -> · TYPE_SPEC ID, int
JUST_STMT -> · EXPR >= EXPR, while
ASSIGN_STMT -> · ID = EXPR, while
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
FACTOR -> · CONST, (
JUST_STMT -> · EXPR <= EXPR, char
FACTOR -> · ID, double
JUST_STMT -> · EXPR >= EXPR, CONST
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
ASSIGN_STMT -> · ID = EXPR, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, while
TERM -> · FACTOR TERM2 , <
INIT_STMT -> · TYPE_SPEC ID = EXPR, double
JUST_STMT -> · EXPR <= EXPR, int
STMT -> · ITER_STMT, char
EXPR -> · TERM EXPR2, int
CALL_STMT -> · ID ( PARG_LIST ), float
TYPE_SPEC -> · int, ID
JUST_STMT -> · EXPR == EXPR, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
STMT -> · INIT_STMT, double
FACTOR -> · CONST, !=
STMT -> · JUST_STMT, CONST
INIT_STMT -> · TYPE_SPEC ID, float
RTN_STMT -> · return EXPR, CONST
FACTOR -> · CALL_STMT, double
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID, CONST
STMT -> · JUST_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
FACTOR -> · ID, +
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ( EXPR ), if
FACTOR -> · ID, >
JUST_STMT -> · EXPR <= EXPR, (
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
FACTOR -> · ( EXPR ), >=
JUST_STMT -> · EXPR < EXPR, double
CALL_STMT -> · ID ( PARG_LIST ), if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, CONST
TERM -> · FACTOR TERM2 , float
STMT -> · IF_STMT, CONST
INIT_STMT -> · TYPE_SPEC ID = EXPR, return
JUST_STMT -> · EXPR == EXPR, char
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
TERM -> · FACTOR TERM2 , double
STMT -> · ITER_STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
JUST_STMT -> · EXPR == EXPR, int
FACTOR -> · ID, int
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, for
STMT -> · IF_STMT, while
FACTOR -> · ID, *
TYPE_SPEC -> · char, ID
STMT -> · ASSIGN_STMT, int
ITER_STMT -> · while ( STMT ) STMT, }
STMT -> · RTN_STMT, char
CODE_BLOCK -> · { STMT_LIST }, }
FACTOR -> · ID, (
STMT -> · JUST_STMT, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
FACTOR -> · CONST, double
STMT -> · RTN_STMT, CONST
STMT -> · ASSIGN_STMT, (
RTN_STMT -> · return EXPR, float
ASSIGN_STMT -> · ID = EXPR, (
ITER_STMT -> · while ( STMT ) STMT, CONST
IF_STMT -> · if ( STMT ) STMT ;, for
INIT_STMT -> · TYPE_SPEC ID = EXPR, for
CODE_BLOCK -> · { STMT_LIST }, CONST
FACTOR -> · CONST, CONST
STMT -> · JUST_STMT, while
TERM -> · FACTOR TERM2 , >=
JUST_STMT -> · EXPR < EXPR, int
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, if
STMT -> · ITER_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), double
STMT -> · EXPR, CONST
JUST_STMT -> · EXPR < EXPR, if
JUST_STMT -> · EXPR != EXPR, double
FACTOR -> · ID, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
EXPR -> · TERM EXPR2, }
STMT -> · RTN_STMT, }
ITER_STMT -> · while ( STMT ) STMT, char
INIT_STMT -> · TYPE_SPEC ID, while
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), double
ASSIGN_STMT -> · ID = EXPR, int
ITER_STMT -> · while ( STMT ) STMT, ID
JUST_STMT -> · EXPR >= EXPR, void
FACTOR -> · ID, <
ITER_STMT -> · while ( STMT ) STMT, int
ASSIGN_STMT -> · ID = EXPR, ID
JUST_STMT -> · EXPR > EXPR, char
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, CONST
STMT -> · ASSIGN_STMT, double
INIT_STMT -> · TYPE_SPEC ID, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, (
FACTOR -> · ( EXPR ), }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
STMT -> · INIT_STMT, if
EXPR -> · TERM EXPR2, double
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, if
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, if
CALL_STMT -> · ID ( PARG_LIST ), }
JUST_STMT -> · EXPR > EXPR, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, char
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
TERM -> · FACTOR TERM2 , -
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
FACTOR -> · ID, return
STMT -> · EXPR, double

[node|352]: [begin]
CODE_BLOCK -> { STMT_LIST · }, ;

[node|353]: [begin]
CODE_BLOCK -> { STMT_LIST · }, ;
CODE_BLOCK -> { STMT_LIST · }, else

[node|354]: [begin]
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, ;
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, ;
IF_STMT -> if ( STMT ) STMT ; ·, ;

[node|355]: [begin]
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
CODE_BLOCK -> · { STMT_LIST }, ;
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;

[node|356]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, ;
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR < EXPR, )
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
EXPR -> · TERM EXPR2, !=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, ;
EXPR -> · TERM EXPR2, )
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, >

[node|357]: [begin]
EXPR2 -> + TERM EXPR2 ·, int
EXPR2 -> + TERM EXPR2 ·, while
EXPR2 -> + TERM EXPR2 ·, for
EXPR2 -> + TERM EXPR2 ·, char
EXPR2 -> + TERM EXPR2 ·, CONST
EXPR2 -> + TERM EXPR2 ·, }
EXPR2 -> + TERM EXPR2 ·, double
EXPR2 -> + TERM EXPR2 ·, return
EXPR2 -> + TERM EXPR2 ·, ID
EXPR2 -> + TERM EXPR2 ·, (
EXPR2 -> + TERM EXPR2 ·, if
EXPR2 -> + TERM EXPR2 ·, float
EXPR2 -> + TERM EXPR2 ·, void

[node|358]: [begin]
EXPR2 -> - TERM EXPR2 ·, CONST
EXPR2 -> - TERM EXPR2 ·, (
EXPR2 -> - TERM EXPR2 ·, ID
EXPR2 -> - TERM EXPR2 ·, if
EXPR2 -> - TERM EXPR2 ·, return
EXPR2 -> - TERM EXPR2 ·, float
EXPR2 -> - TERM EXPR2 ·, void
EXPR2 -> - TERM EXPR2 ·, for
EXPR2 -> - TERM EXPR2 ·, int
EXPR2 -> - TERM EXPR2 ·, double
EXPR2 -> - TERM EXPR2 ·, while
EXPR2 -> - TERM EXPR2 ·, char
EXPR2 -> - TERM EXPR2 ·, }

[node|359]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, int
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, CONST
CALL_STMT -> ID ( PARG_LIST ) ·, for
CALL_STMT -> ID ( PARG_LIST ) ·, char
CALL_STMT -> ID ( PARG_LIST ) ·, while
CALL_STMT -> ID ( PARG_LIST ) ·, }
CALL_STMT -> ID ( PARG_LIST ) ·, double
CALL_STMT -> ID ( PARG_LIST ) ·, float
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, ID
CALL_STMT -> ID ( PARG_LIST ) ·, return
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, if
CALL_STMT -> ID ( PARG_LIST ) ·, (
CALL_STMT -> ID ( PARG_LIST ) ·, void

[node|360]: [begin]
TERM2 -> * FACTOR TERM2 ·, for
TERM2 -> * FACTOR TERM2 ·, while
TERM2 -> * FACTOR TERM2 ·, CONST
TERM2 -> * FACTOR TERM2 ·, }
TERM2 -> * FACTOR TERM2 ·, float
TERM2 -> * FACTOR TERM2 ·, return
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, (
TERM2 -> * FACTOR TERM2 ·, ID
TERM2 -> * FACTOR TERM2 ·, char
TERM2 -> * FACTOR TERM2 ·, if
TERM2 -> * FACTOR TERM2 ·, double
TERM2 -> * FACTOR TERM2 ·, void
TERM2 -> * FACTOR TERM2 ·, int
TERM2 -> * FACTOR TERM2 ·, +

[node|361]: [begin]
TERM2 -> / FACTOR TERM2 ·, ID
TERM2 -> / FACTOR TERM2 ·, (
TERM2 -> / FACTOR TERM2 ·, double
TERM2 -> / FACTOR TERM2 ·, return
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, char
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, CONST
TERM2 -> / FACTOR TERM2 ·, while
TERM2 -> / FACTOR TERM2 ·, for
TERM2 -> / FACTOR TERM2 ·, }
TERM2 -> / FACTOR TERM2 ·, int
TERM2 -> / FACTOR TERM2 ·, float
TERM2 -> / FACTOR TERM2 ·, if
TERM2 -> / FACTOR TERM2 ·, void

[node|362]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, )

[node|363]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, else
CODE_BLOCK -> { STMT_LIST } ·, )

[node|364]: [begin]
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, )
CODE_BLOCK -> · { STMT_LIST }, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> · if ( STMT ) STMT ;, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, )

[node|365]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, )

[node|366]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, )

[node|367]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, )
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, )

[node|368]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, }
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, int
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, if
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, void
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, (
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, return
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, double
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, ID
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, CONST
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, char
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, while
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, for

[node|369]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, int
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, CONST
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, void
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, return
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, if
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, ID
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, (
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, for
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, }
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, char
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, while
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, double

[node|370]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, ;

[node|371]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, ;
CODE_BLOCK -> { STMT_LIST } ·, else

[node|372]: [begin]
CODE_BLOCK -> · { STMT_LIST }, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, ;
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;

[node|373]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, ;

[node|374]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, ;

[node|375]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, ;
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, ;

[node|376]: [begin]
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, )

[node|377]: [begin]
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, )

[node|378]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · CONST, /
FACTOR -> · CONST, -
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
STMT -> · ASSIGN_STMT, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), /
STMT -> · INIT_STMT, )
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR == EXPR, )
FACTOR -> · CONST, *
STMT -> · JUST_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR < EXPR, )
CODE_BLOCK -> · { STMT_LIST }, )
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, )
FACTOR -> · CONST, !=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, )
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
STMT -> · ITER_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , +
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, )
FACTOR -> · CALL_STMT, )
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
JUST_STMT -> · EXPR <= EXPR, )
STMT -> · IF_STMT, )
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
FACTOR -> · ID, /
FACTOR -> · ID, -
CALL_STMT -> · ID ( PARG_LIST ), )
TYPE_SPEC -> · void, ID
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · ( EXPR ), )
EXPR -> · TERM EXPR2, !=
TERM -> · FACTOR TERM2 , )
FACTOR -> · CALL_STMT, *
RTN_STMT -> · return EXPR, )
STMT -> · RTN_STMT, )
FACTOR -> · CONST, >
EXPR -> · TERM EXPR2, )
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, )
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, <
FACTOR -> · ID, !=
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
JUST_STMT -> · EXPR >= EXPR, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
JUST_STMT -> · EXPR != EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), ==
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, >

[node|379]: [begin]
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, ;

[node|380]: [begin]
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, ;

[node|381]: [begin]
TYPE_SPEC -> · float, ID
RTN_STMT -> · return EXPR, ;
FACTOR -> · CONST, /
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
JUST_STMT -> · EXPR == EXPR, ;
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), -
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ==
FACTOR -> · ( EXPR ), *
STMT -> · IF_STMT, ;
JUST_STMT -> · EXPR <= EXPR, ;
TERM -> · FACTOR TERM2 , <
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CONST, ==
EXPR -> · TERM EXPR2, >=
FACTOR -> · CONST, *
JUST_STMT -> · EXPR >= EXPR, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · CALL_STMT, <=
STMT -> · ITER_STMT, ;
TYPE_SPEC -> · int, ID
FACTOR -> · CONST, !=
FACTOR -> · ID, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
TERM -> · FACTOR TERM2 , !=
FACTOR -> · ID, +
FACTOR -> · ( EXPR ), <
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, ;
STMT -> · JUST_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · CALL_STMT, /
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , >
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, >
FACTOR -> · ( EXPR ), >=
TYPE_SPEC -> · double, ID
TERM -> · FACTOR TERM2 , <=
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
EXPR -> · TERM EXPR2, <=
FACTOR -> · CONST, >=
FACTOR -> · CONST, <
FACTOR -> · ID, *
FACTOR -> · ID, /
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
TYPE_SPEC -> · void, ID
FACTOR -> · ID, <=
TYPE_SPEC -> · char, ID
FACTOR -> · CALL_STMT, ==
FACTOR -> · CALL_STMT, ;
EXPR -> · TERM EXPR2, !=
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), ;
IF_STMT -> · if ( STMT ) STMT ;, ;
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
FACTOR -> · CALL_STMT, *
JUST_STMT -> · EXPR > EXPR, ;
JUST_STMT -> · EXPR != EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · CONST, >
TERM -> · FACTOR TERM2 , >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, ==
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · CALL_STMT, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , ==
CALL_STMT -> · ID ( PARG_LIST ), !=
ITER_STMT -> · while ( STMT ) STMT, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, !=
FACTOR -> · ID, <
CODE_BLOCK -> · { STMT_LIST }, ;
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), !=
FACTOR -> · CONST, +
FACTOR -> · ( EXPR ), ==
FACTOR -> · CALL_STMT, >=
CALL_STMT -> · ID ( PARG_LIST ), ==
TERM -> · FACTOR TERM2 , -
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, ;
JUST_STMT -> · EXPR < EXPR, ;
EXPR -> · TERM EXPR2, >

[node|382]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, )

[node|383]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, )

[node|384]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, ;

[node|385]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, ;

[edge|0]:
0 -> 1 : CMPL_UNIT

[edge|1]:
0 -> 2 : int

[edge|2]:
0 -> 3 : void

[edge|3]:
0 -> 4 : FUNC_DEF

[edge|4]:
0 -> 5 : FUNC_LIST

[edge|5]:
0 -> 6 : INIT_STMT

[edge|6]:
0 -> 7 : double

[edge|7]:
0 -> 8 : TYPE_SPEC

[edge|8]:
0 -> 9 : float

[edge|9]:
0 -> 10 : char

[edge|10]:
4 -> 2 : int

[edge|11]:
4 -> 3 : void

[edge|12]:
4 -> 4 : FUNC_DEF

[edge|13]:
4 -> 11 : FUNC_LIST

[edge|14]:
4 -> 6 : INIT_STMT

[edge|15]:
4 -> 7 : double

[edge|16]:
4 -> 8 : TYPE_SPEC

[edge|17]:
4 -> 9 : float

[edge|18]:
4 -> 10 : char

[edge|19]:
6 -> 12 : ;

[edge|20]:
8 -> 13 : ID

[edge|21]:
13 -> 14 : =

[edge|22]:
13 -> 15 : (

[edge|23]:
14 -> 16 : (

[edge|24]:
14 -> 17 : CALL_STMT

[edge|25]:
14 -> 18 : EXPR

[edge|26]:
14 -> 19 : TERM

[edge|27]:
14 -> 20 : ID

[edge|28]:
14 -> 21 : FACTOR

[edge|29]:
14 -> 22 : CONST

[edge|30]:
15 -> 2 : int

[edge|31]:
15 -> 3 : void

[edge|32]:
15 -> 23 : ARGUMENT

[edge|33]:
15 -> 24 : ARG_LIST

[edge|34]:
15 -> 7 : double

[edge|35]:
15 -> 25 : TYPE_SPEC

[edge|36]:
15 -> 9 : float

[edge|37]:
15 -> 10 : char

[edge|38]:
16 -> 26 : (

[edge|39]:
16 -> 27 : CALL_STMT

[edge|40]:
16 -> 28 : EXPR

[edge|41]:
16 -> 29 : TERM

[edge|42]:
16 -> 30 : ID

[edge|43]:
16 -> 31 : FACTOR

[edge|44]:
16 -> 32 : CONST

[edge|45]:
19 -> 33 : +

[edge|46]:
19 -> 34 : EXPR2

[edge|47]:
19 -> 35 : -

[edge|48]:
20 -> 36 : (

[edge|49]:
21 -> 37 : *

[edge|50]:
21 -> 38 : /

[edge|51]:
21 -> 39 : TERM2

[edge|52]:
23 -> 40 : ,

[edge|53]:
24 -> 41 : )

[edge|54]:
25 -> 42 : ID

[edge|55]:
26 -> 26 : (

[edge|56]:
26 -> 27 : CALL_STMT

[edge|57]:
26 -> 43 : EXPR

[edge|58]:
26 -> 29 : TERM

[edge|59]:
26 -> 30 : ID

[edge|60]:
26 -> 31 : FACTOR

[edge|61]:
26 -> 32 : CONST

[edge|62]:
28 -> 44 : )

[edge|63]:
29 -> 45 : +

[edge|64]:
29 -> 46 : EXPR2

[edge|65]:
29 -> 47 : -

[edge|66]:
30 -> 48 : (

[edge|67]:
31 -> 49 : *

[edge|68]:
31 -> 50 : /

[edge|69]:
31 -> 51 : TERM2

[edge|70]:
33 -> 16 : (

[edge|71]:
33 -> 17 : CALL_STMT

[edge|72]:
33 -> 52 : TERM

[edge|73]:
33 -> 20 : ID

[edge|74]:
33 -> 21 : FACTOR

[edge|75]:
33 -> 22 : CONST

[edge|76]:
35 -> 16 : (

[edge|77]:
35 -> 17 : CALL_STMT

[edge|78]:
35 -> 53 : TERM

[edge|79]:
35 -> 20 : ID

[edge|80]:
35 -> 21 : FACTOR

[edge|81]:
35 -> 22 : CONST

[edge|82]:
36 -> 54 : PARG

[edge|83]:
36 -> 55 : ID

[edge|84]:
36 -> 56 : PARG_LIST

[edge|85]:
37 -> 16 : (

[edge|86]:
37 -> 17 : CALL_STMT

[edge|87]:
37 -> 20 : ID

[edge|88]:
37 -> 57 : FACTOR

[edge|89]:
37 -> 22 : CONST

[edge|90]:
38 -> 16 : (

[edge|91]:
38 -> 17 : CALL_STMT

[edge|92]:
38 -> 20 : ID

[edge|93]:
38 -> 58 : FACTOR

[edge|94]:
38 -> 22 : CONST

[edge|95]:
40 -> 2 : int

[edge|96]:
40 -> 3 : void

[edge|97]:
40 -> 23 : ARGUMENT

[edge|98]:
40 -> 59 : ARG_LIST

[edge|99]:
40 -> 7 : double

[edge|100]:
40 -> 25 : TYPE_SPEC

[edge|101]:
40 -> 9 : float

[edge|102]:
40 -> 10 : char

[edge|103]:
41 -> 60 : {

[edge|104]:
41 -> 61 : CODE_BLOCK

[edge|105]:
43 -> 62 : )

[edge|106]:
45 -> 26 : (

[edge|107]:
45 -> 27 : CALL_STMT

[edge|108]:
45 -> 63 : TERM

[edge|109]:
45 -> 30 : ID

[edge|110]:
45 -> 31 : FACTOR

[edge|111]:
45 -> 32 : CONST

[edge|112]:
47 -> 26 : (

[edge|113]:
47 -> 27 : CALL_STMT

[edge|114]:
47 -> 64 : TERM

[edge|115]:
47 -> 30 : ID

[edge|116]:
47 -> 31 : FACTOR

[edge|117]:
47 -> 32 : CONST

[edge|118]:
48 -> 54 : PARG

[edge|119]:
48 -> 55 : ID

[edge|120]:
48 -> 65 : PARG_LIST

[edge|121]:
49 -> 26 : (

[edge|122]:
49 -> 27 : CALL_STMT

[edge|123]:
49 -> 30 : ID

[edge|124]:
49 -> 66 : FACTOR

[edge|125]:
49 -> 32 : CONST

[edge|126]:
50 -> 26 : (

[edge|127]:
50 -> 27 : CALL_STMT

[edge|128]:
50 -> 30 : ID

[edge|129]:
50 -> 67 : FACTOR

[edge|130]:
50 -> 32 : CONST

[edge|131]:
52 -> 33 : +

[edge|132]:
52 -> 68 : EXPR2

[edge|133]:
52 -> 35 : -

[edge|134]:
53 -> 33 : +

[edge|135]:
53 -> 69 : EXPR2

[edge|136]:
53 -> 35 : -

[edge|137]:
54 -> 70 : ,

[edge|138]:
56 -> 71 : )

[edge|139]:
57 -> 37 : *

[edge|140]:
57 -> 38 : /

[edge|141]:
57 -> 72 : TERM2

[edge|142]:
58 -> 37 : *

[edge|143]:
58 -> 38 : /

[edge|144]:
58 -> 73 : TERM2

[edge|145]:
60 -> 2 : int

[edge|146]:
60 -> 74 : ITER_STMT

[edge|147]:
60 -> 3 : void

[edge|148]:
60 -> 16 : (

[edge|149]:
60 -> 75 : ASSIGN_STMT

[edge|150]:
60 -> 76 : return

[edge|151]:
60 -> 77 : INIT_STMT

[edge|152]:
60 -> 7 : double

[edge|153]:
60 -> 17 : CALL_STMT

[edge|154]:
60 -> 78 : STMT_LIST

[edge|155]:
60 -> 79 : EXPR

[edge|156]:
60 -> 80 : while

[edge|157]:
60 -> 81 : RTN_STMT

[edge|158]:
60 -> 82 : TYPE_SPEC

[edge|159]:
60 -> 19 : TERM

[edge|160]:
60 -> 83 : if

[edge|161]:
60 -> 84 : ID

[edge|162]:
60 -> 21 : FACTOR

[edge|163]:
60 -> 9 : float

[edge|164]:
60 -> 85 : for

[edge|165]:
60 -> 22 : CONST

[edge|166]:
60 -> 86 : IF_STMT

[edge|167]:
60 -> 10 : char

[edge|168]:
63 -> 45 : +

[edge|169]:
63 -> 87 : EXPR2

[edge|170]:
63 -> 47 : -

[edge|171]:
64 -> 45 : +

[edge|172]:
64 -> 88 : EXPR2

[edge|173]:
64 -> 47 : -

[edge|174]:
65 -> 89 : )

[edge|175]:
66 -> 49 : *

[edge|176]:
66 -> 50 : /

[edge|177]:
66 -> 90 : TERM2

[edge|178]:
67 -> 49 : *

[edge|179]:
67 -> 50 : /

[edge|180]:
67 -> 91 : TERM2

[edge|181]:
70 -> 54 : PARG

[edge|182]:
70 -> 55 : ID

[edge|183]:
70 -> 92 : PARG_LIST

[edge|184]:
74 -> 2 : int

[edge|185]:
74 -> 74 : ITER_STMT

[edge|186]:
74 -> 3 : void

[edge|187]:
74 -> 16 : (

[edge|188]:
74 -> 75 : ASSIGN_STMT

[edge|189]:
74 -> 76 : return

[edge|190]:
74 -> 77 : INIT_STMT

[edge|191]:
74 -> 7 : double

[edge|192]:
74 -> 17 : CALL_STMT

[edge|193]:
74 -> 93 : STMT_LIST

[edge|194]:
74 -> 79 : EXPR

[edge|195]:
74 -> 80 : while

[edge|196]:
74 -> 81 : RTN_STMT

[edge|197]:
74 -> 82 : TYPE_SPEC

[edge|198]:
74 -> 19 : TERM

[edge|199]:
74 -> 83 : if

[edge|200]:
74 -> 84 : ID

[edge|201]:
74 -> 21 : FACTOR

[edge|202]:
74 -> 9 : float

[edge|203]:
74 -> 85 : for

[edge|204]:
74 -> 22 : CONST

[edge|205]:
74 -> 86 : IF_STMT

[edge|206]:
74 -> 10 : char

[edge|207]:
75 -> 94 : ;

[edge|208]:
76 -> 16 : (

[edge|209]:
76 -> 17 : CALL_STMT

[edge|210]:
76 -> 95 : EXPR

[edge|211]:
76 -> 19 : TERM

[edge|212]:
76 -> 20 : ID

[edge|213]:
76 -> 21 : FACTOR

[edge|214]:
76 -> 22 : CONST

[edge|215]:
77 -> 96 : ;

[edge|216]:
78 -> 97 : }

[edge|217]:
79 -> 98 : ;

[edge|218]:
80 -> 99 : (

[edge|219]:
81 -> 100 : ;

[edge|220]:
82 -> 101 : ID

[edge|221]:
83 -> 102 : (

[edge|222]:
84 -> 103 : =

[edge|223]:
84 -> 36 : (

[edge|224]:
85 -> 104 : (

[edge|225]:
86 -> 2 : int

[edge|226]:
86 -> 74 : ITER_STMT

[edge|227]:
86 -> 3 : void

[edge|228]:
86 -> 16 : (

[edge|229]:
86 -> 75 : ASSIGN_STMT

[edge|230]:
86 -> 76 : return

[edge|231]:
86 -> 77 : INIT_STMT

[edge|232]:
86 -> 7 : double

[edge|233]:
86 -> 17 : CALL_STMT

[edge|234]:
86 -> 105 : STMT_LIST

[edge|235]:
86 -> 79 : EXPR

[edge|236]:
86 -> 80 : while

[edge|237]:
86 -> 81 : RTN_STMT

[edge|238]:
86 -> 82 : TYPE_SPEC

[edge|239]:
86 -> 19 : TERM

[edge|240]:
86 -> 83 : if

[edge|241]:
86 -> 84 : ID

[edge|242]:
86 -> 21 : FACTOR

[edge|243]:
86 -> 9 : float

[edge|244]:
86 -> 85 : for

[edge|245]:
86 -> 22 : CONST

[edge|246]:
86 -> 86 : IF_STMT

[edge|247]:
86 -> 10 : char

[edge|248]:
94 -> 2 : int

[edge|249]:
94 -> 74 : ITER_STMT

[edge|250]:
94 -> 3 : void

[edge|251]:
94 -> 16 : (

[edge|252]:
94 -> 75 : ASSIGN_STMT

[edge|253]:
94 -> 76 : return

[edge|254]:
94 -> 77 : INIT_STMT

[edge|255]:
94 -> 7 : double

[edge|256]:
94 -> 17 : CALL_STMT

[edge|257]:
94 -> 106 : STMT_LIST

[edge|258]:
94 -> 79 : EXPR

[edge|259]:
94 -> 80 : while

[edge|260]:
94 -> 81 : RTN_STMT

[edge|261]:
94 -> 82 : TYPE_SPEC

[edge|262]:
94 -> 19 : TERM

[edge|263]:
94 -> 83 : if

[edge|264]:
94 -> 84 : ID

[edge|265]:
94 -> 21 : FACTOR

[edge|266]:
94 -> 9 : float

[edge|267]:
94 -> 85 : for

[edge|268]:
94 -> 22 : CONST

[edge|269]:
94 -> 86 : IF_STMT

[edge|270]:
94 -> 10 : char

[edge|271]:
96 -> 2 : int

[edge|272]:
96 -> 74 : ITER_STMT

[edge|273]:
96 -> 3 : void

[edge|274]:
96 -> 16 : (

[edge|275]:
96 -> 75 : ASSIGN_STMT

[edge|276]:
96 -> 76 : return

[edge|277]:
96 -> 77 : INIT_STMT

[edge|278]:
96 -> 7 : double

[edge|279]:
96 -> 17 : CALL_STMT

[edge|280]:
96 -> 107 : STMT_LIST

[edge|281]:
96 -> 79 : EXPR

[edge|282]:
96 -> 80 : while

[edge|283]:
96 -> 81 : RTN_STMT

[edge|284]:
96 -> 82 : TYPE_SPEC

[edge|285]:
96 -> 19 : TERM

[edge|286]:
96 -> 83 : if

[edge|287]:
96 -> 84 : ID

[edge|288]:
96 -> 21 : FACTOR

[edge|289]:
96 -> 9 : float

[edge|290]:
96 -> 85 : for

[edge|291]:
96 -> 22 : CONST

[edge|292]:
96 -> 86 : IF_STMT

[edge|293]:
96 -> 10 : char

[edge|294]:
98 -> 2 : int

[edge|295]:
98 -> 74 : ITER_STMT

[edge|296]:
98 -> 3 : void

[edge|297]:
98 -> 16 : (

[edge|298]:
98 -> 75 : ASSIGN_STMT

[edge|299]:
98 -> 76 : return

[edge|300]:
98 -> 77 : INIT_STMT

[edge|301]:
98 -> 7 : double

[edge|302]:
98 -> 17 : CALL_STMT

[edge|303]:
98 -> 108 : STMT_LIST

[edge|304]:
98 -> 79 : EXPR

[edge|305]:
98 -> 80 : while

[edge|306]:
98 -> 81 : RTN_STMT

[edge|307]:
98 -> 82 : TYPE_SPEC

[edge|308]:
98 -> 19 : TERM

[edge|309]:
98 -> 83 : if

[edge|310]:
98 -> 84 : ID

[edge|311]:
98 -> 21 : FACTOR

[edge|312]:
98 -> 9 : float

[edge|313]:
98 -> 85 : for

[edge|314]:
98 -> 22 : CONST

[edge|315]:
98 -> 86 : IF_STMT

[edge|316]:
98 -> 10 : char

[edge|317]:
99 -> 2 : int

[edge|318]:
99 -> 109 : ITER_STMT

[edge|319]:
99 -> 3 : void

[edge|320]:
99 -> 110 : (

[edge|321]:
99 -> 111 : ASSIGN_STMT

[edge|322]:
99 -> 112 : return

[edge|323]:
99 -> 113 : STMT

[edge|324]:
99 -> 114 : INIT_STMT

[edge|325]:
99 -> 7 : double

[edge|326]:
99 -> 115 : CALL_STMT

[edge|327]:
99 -> 116 : EXPR

[edge|328]:
99 -> 117 : while

[edge|329]:
99 -> 118 : RTN_STMT

[edge|330]:
99 -> 119 : TYPE_SPEC

[edge|331]:
99 -> 120 : TERM

[edge|332]:
99 -> 121 : if

[edge|333]:
99 -> 122 : ID

[edge|334]:
99 -> 123 : FACTOR

[edge|335]:
99 -> 124 : JUST_STMT

[edge|336]:
99 -> 9 : float

[edge|337]:
99 -> 125 : for

[edge|338]:
99 -> 126 : CONST

[edge|339]:
99 -> 127 : IF_STMT

[edge|340]:
99 -> 10 : char

[edge|341]:
100 -> 2 : int

[edge|342]:
100 -> 74 : ITER_STMT

[edge|343]:
100 -> 3 : void

[edge|344]:
100 -> 16 : (

[edge|345]:
100 -> 75 : ASSIGN_STMT

[edge|346]:
100 -> 76 : return

[edge|347]:
100 -> 77 : INIT_STMT

[edge|348]:
100 -> 7 : double

[edge|349]:
100 -> 17 : CALL_STMT

[edge|350]:
100 -> 128 : STMT_LIST

[edge|351]:
100 -> 79 : EXPR

[edge|352]:
100 -> 80 : while

[edge|353]:
100 -> 81 : RTN_STMT

[edge|354]:
100 -> 82 : TYPE_SPEC

[edge|355]:
100 -> 19 : TERM

[edge|356]:
100 -> 83 : if

[edge|357]:
100 -> 84 : ID

[edge|358]:
100 -> 21 : FACTOR

[edge|359]:
100 -> 9 : float

[edge|360]:
100 -> 85 : for

[edge|361]:
100 -> 22 : CONST

[edge|362]:
100 -> 86 : IF_STMT

[edge|363]:
100 -> 10 : char

[edge|364]:
101 -> 14 : =

[edge|365]:
102 -> 2 : int

[edge|366]:
102 -> 109 : ITER_STMT

[edge|367]:
102 -> 3 : void

[edge|368]:
102 -> 110 : (

[edge|369]:
102 -> 111 : ASSIGN_STMT

[edge|370]:
102 -> 112 : return

[edge|371]:
102 -> 129 : STMT

[edge|372]:
102 -> 114 : INIT_STMT

[edge|373]:
102 -> 7 : double

[edge|374]:
102 -> 115 : CALL_STMT

[edge|375]:
102 -> 116 : EXPR

[edge|376]:
102 -> 117 : while

[edge|377]:
102 -> 118 : RTN_STMT

[edge|378]:
102 -> 119 : TYPE_SPEC

[edge|379]:
102 -> 120 : TERM

[edge|380]:
102 -> 121 : if

[edge|381]:
102 -> 122 : ID

[edge|382]:
102 -> 123 : FACTOR

[edge|383]:
102 -> 124 : JUST_STMT

[edge|384]:
102 -> 9 : float

[edge|385]:
102 -> 125 : for

[edge|386]:
102 -> 126 : CONST

[edge|387]:
102 -> 127 : IF_STMT

[edge|388]:
102 -> 10 : char

[edge|389]:
103 -> 16 : (

[edge|390]:
103 -> 17 : CALL_STMT

[edge|391]:
103 -> 130 : EXPR

[edge|392]:
103 -> 19 : TERM

[edge|393]:
103 -> 20 : ID

[edge|394]:
103 -> 21 : FACTOR

[edge|395]:
103 -> 22 : CONST

[edge|396]:
104 -> 2 : int

[edge|397]:
104 -> 131 : ITER_STMT

[edge|398]:
104 -> 3 : void

[edge|399]:
104 -> 132 : (

[edge|400]:
104 -> 133 : ASSIGN_STMT

[edge|401]:
104 -> 76 : return

[edge|402]:
104 -> 134 : STMT

[edge|403]:
104 -> 135 : INIT_STMT

[edge|404]:
104 -> 7 : double

[edge|405]:
104 -> 136 : CALL_STMT

[edge|406]:
104 -> 137 : EXPR

[edge|407]:
104 -> 138 : while

[edge|408]:
104 -> 139 : RTN_STMT

[edge|409]:
104 -> 82 : TYPE_SPEC

[edge|410]:
104 -> 140 : TERM

[edge|411]:
104 -> 141 : if

[edge|412]:
104 -> 142 : ID

[edge|413]:
104 -> 143 : FACTOR

[edge|414]:
104 -> 144 : JUST_STMT

[edge|415]:
104 -> 9 : float

[edge|416]:
104 -> 145 : for

[edge|417]:
104 -> 146 : CONST

[edge|418]:
104 -> 147 : IF_STMT

[edge|419]:
104 -> 10 : char

[edge|420]:
110 -> 26 : (

[edge|421]:
110 -> 27 : CALL_STMT

[edge|422]:
110 -> 148 : EXPR

[edge|423]:
110 -> 29 : TERM

[edge|424]:
110 -> 30 : ID

[edge|425]:
110 -> 31 : FACTOR

[edge|426]:
110 -> 32 : CONST

[edge|427]:
112 -> 26 : (

[edge|428]:
112 -> 27 : CALL_STMT

[edge|429]:
112 -> 149 : EXPR

[edge|430]:
112 -> 29 : TERM

[edge|431]:
112 -> 30 : ID

[edge|432]:
112 -> 31 : FACTOR

[edge|433]:
112 -> 32 : CONST

[edge|434]:
113 -> 150 : )

[edge|435]:
116 -> 151 : <

[edge|436]:
116 -> 152 : <=

[edge|437]:
116 -> 153 : >=

[edge|438]:
116 -> 154 : ==

[edge|439]:
116 -> 155 : >

[edge|440]:
116 -> 156 : !=

[edge|441]:
117 -> 157 : (

[edge|442]:
119 -> 158 : ID

[edge|443]:
120 -> 159 : +

[edge|444]:
120 -> 160 : EXPR2

[edge|445]:
120 -> 161 : -

[edge|446]:
121 -> 162 : (

[edge|447]:
122 -> 163 : =

[edge|448]:
122 -> 164 : (

[edge|449]:
123 -> 165 : *

[edge|450]:
123 -> 166 : /

[edge|451]:
123 -> 167 : TERM2

[edge|452]:
125 -> 168 : (

[edge|453]:
129 -> 169 : )

[edge|454]:
132 -> 26 : (

[edge|455]:
132 -> 27 : CALL_STMT

[edge|456]:
132 -> 170 : EXPR

[edge|457]:
132 -> 29 : TERM

[edge|458]:
132 -> 30 : ID

[edge|459]:
132 -> 31 : FACTOR

[edge|460]:
132 -> 32 : CONST

[edge|461]:
134 -> 171 : ;

[edge|462]:
137 -> 172 : <

[edge|463]:
137 -> 173 : <=

[edge|464]:
137 -> 174 : >=

[edge|465]:
137 -> 175 : ==

[edge|466]:
137 -> 176 : >

[edge|467]:
137 -> 177 : !=

[edge|468]:
138 -> 178 : (

[edge|469]:
140 -> 179 : +

[edge|470]:
140 -> 180 : EXPR2

[edge|471]:
140 -> 181 : -

[edge|472]:
141 -> 182 : (

[edge|473]:
142 -> 103 : =

[edge|474]:
142 -> 183 : (

[edge|475]:
143 -> 184 : *

[edge|476]:
143 -> 185 : /

[edge|477]:
143 -> 186 : TERM2

[edge|478]:
145 -> 187 : (

[edge|479]:
148 -> 188 : )

[edge|480]:
150 -> 2 : int

[edge|481]:
150 -> 189 : ITER_STMT

[edge|482]:
150 -> 3 : void

[edge|483]:
150 -> 190 : (

[edge|484]:
150 -> 191 : ASSIGN_STMT

[edge|485]:
150 -> 192 : return

[edge|486]:
150 -> 193 : {

[edge|487]:
150 -> 194 : STMT

[edge|488]:
150 -> 195 : INIT_STMT

[edge|489]:
150 -> 7 : double

[edge|490]:
150 -> 196 : CALL_STMT

[edge|491]:
150 -> 197 : EXPR

[edge|492]:
150 -> 80 : while

[edge|493]:
150 -> 198 : RTN_STMT

[edge|494]:
150 -> 199 : TYPE_SPEC

[edge|495]:
150 -> 200 : TERM

[edge|496]:
150 -> 83 : if

[edge|497]:
150 -> 201 : ID

[edge|498]:
150 -> 202 : FACTOR

[edge|499]:
150 -> 203 : JUST_STMT

[edge|500]:
150 -> 9 : float

[edge|501]:
150 -> 204 : CODE_BLOCK

[edge|502]:
150 -> 85 : for

[edge|503]:
150 -> 205 : CONST

[edge|504]:
150 -> 206 : IF_STMT

[edge|505]:
150 -> 10 : char

[edge|506]:
151 -> 26 : (

[edge|507]:
151 -> 27 : CALL_STMT

[edge|508]:
151 -> 207 : EXPR

[edge|509]:
151 -> 29 : TERM

[edge|510]:
151 -> 30 : ID

[edge|511]:
151 -> 31 : FACTOR

[edge|512]:
151 -> 32 : CONST

[edge|513]:
152 -> 26 : (

[edge|514]:
152 -> 27 : CALL_STMT

[edge|515]:
152 -> 208 : EXPR

[edge|516]:
152 -> 29 : TERM

[edge|517]:
152 -> 30 : ID

[edge|518]:
152 -> 31 : FACTOR

[edge|519]:
152 -> 32 : CONST

[edge|520]:
153 -> 26 : (

[edge|521]:
153 -> 27 : CALL_STMT

[edge|522]:
153 -> 209 : EXPR

[edge|523]:
153 -> 29 : TERM

[edge|524]:
153 -> 30 : ID

[edge|525]:
153 -> 31 : FACTOR

[edge|526]:
153 -> 32 : CONST

[edge|527]:
154 -> 26 : (

[edge|528]:
154 -> 27 : CALL_STMT

[edge|529]:
154 -> 210 : EXPR

[edge|530]:
154 -> 29 : TERM

[edge|531]:
154 -> 30 : ID

[edge|532]:
154 -> 31 : FACTOR

[edge|533]:
154 -> 32 : CONST

[edge|534]:
155 -> 26 : (

[edge|535]:
155 -> 27 : CALL_STMT

[edge|536]:
155 -> 211 : EXPR

[edge|537]:
155 -> 29 : TERM

[edge|538]:
155 -> 30 : ID

[edge|539]:
155 -> 31 : FACTOR

[edge|540]:
155 -> 32 : CONST

[edge|541]:
156 -> 26 : (

[edge|542]:
156 -> 27 : CALL_STMT

[edge|543]:
156 -> 212 : EXPR

[edge|544]:
156 -> 29 : TERM

[edge|545]:
156 -> 30 : ID

[edge|546]:
156 -> 31 : FACTOR

[edge|547]:
156 -> 32 : CONST

[edge|548]:
157 -> 2 : int

[edge|549]:
157 -> 109 : ITER_STMT

[edge|550]:
157 -> 3 : void

[edge|551]:
157 -> 110 : (

[edge|552]:
157 -> 111 : ASSIGN_STMT

[edge|553]:
157 -> 112 : return

[edge|554]:
157 -> 213 : STMT

[edge|555]:
157 -> 114 : INIT_STMT

[edge|556]:
157 -> 7 : double

[edge|557]:
157 -> 115 : CALL_STMT

[edge|558]:
157 -> 116 : EXPR

[edge|559]:
157 -> 117 : while

[edge|560]:
157 -> 118 : RTN_STMT

[edge|561]:
157 -> 119 : TYPE_SPEC

[edge|562]:
157 -> 120 : TERM

[edge|563]:
157 -> 121 : if

[edge|564]:
157 -> 122 : ID

[edge|565]:
157 -> 123 : FACTOR

[edge|566]:
157 -> 124 : JUST_STMT

[edge|567]:
157 -> 9 : float

[edge|568]:
157 -> 125 : for

[edge|569]:
157 -> 126 : CONST

[edge|570]:
157 -> 127 : IF_STMT

[edge|571]:
157 -> 10 : char

[edge|572]:
158 -> 214 : =

[edge|573]:
159 -> 110 : (

[edge|574]:
159 -> 115 : CALL_STMT

[edge|575]:
159 -> 215 : TERM

[edge|576]:
159 -> 216 : ID

[edge|577]:
159 -> 123 : FACTOR

[edge|578]:
159 -> 126 : CONST

[edge|579]:
161 -> 110 : (

[edge|580]:
161 -> 115 : CALL_STMT

[edge|581]:
161 -> 217 : TERM

[edge|582]:
161 -> 216 : ID

[edge|583]:
161 -> 123 : FACTOR

[edge|584]:
161 -> 126 : CONST

[edge|585]:
162 -> 2 : int

[edge|586]:
162 -> 109 : ITER_STMT

[edge|587]:
162 -> 3 : void

[edge|588]:
162 -> 110 : (

[edge|589]:
162 -> 111 : ASSIGN_STMT

[edge|590]:
162 -> 112 : return

[edge|591]:
162 -> 218 : STMT

[edge|592]:
162 -> 114 : INIT_STMT

[edge|593]:
162 -> 7 : double

[edge|594]:
162 -> 115 : CALL_STMT

[edge|595]:
162 -> 116 : EXPR

[edge|596]:
162 -> 117 : while

[edge|597]:
162 -> 118 : RTN_STMT

[edge|598]:
162 -> 119 : TYPE_SPEC

[edge|599]:
162 -> 120 : TERM

[edge|600]:
162 -> 121 : if

[edge|601]:
162 -> 122 : ID

[edge|602]:
162 -> 123 : FACTOR

[edge|603]:
162 -> 124 : JUST_STMT

[edge|604]:
162 -> 9 : float

[edge|605]:
162 -> 125 : for

[edge|606]:
162 -> 126 : CONST

[edge|607]:
162 -> 127 : IF_STMT

[edge|608]:
162 -> 10 : char

[edge|609]:
163 -> 26 : (

[edge|610]:
163 -> 27 : CALL_STMT

[edge|611]:
163 -> 219 : EXPR

[edge|612]:
163 -> 29 : TERM

[edge|613]:
163 -> 30 : ID

[edge|614]:
163 -> 31 : FACTOR

[edge|615]:
163 -> 32 : CONST

[edge|616]:
164 -> 54 : PARG

[edge|617]:
164 -> 55 : ID

[edge|618]:
164 -> 220 : PARG_LIST

[edge|619]:
165 -> 110 : (

[edge|620]:
165 -> 115 : CALL_STMT

[edge|621]:
165 -> 216 : ID

[edge|622]:
165 -> 221 : FACTOR

[edge|623]:
165 -> 126 : CONST

[edge|624]:
166 -> 110 : (

[edge|625]:
166 -> 115 : CALL_STMT

[edge|626]:
166 -> 216 : ID

[edge|627]:
166 -> 222 : FACTOR

[edge|628]:
166 -> 126 : CONST

[edge|629]:
168 -> 2 : int

[edge|630]:
168 -> 131 : ITER_STMT

[edge|631]:
168 -> 3 : void

[edge|632]:
168 -> 132 : (

[edge|633]:
168 -> 133 : ASSIGN_STMT

[edge|634]:
168 -> 76 : return

[edge|635]:
168 -> 223 : STMT

[edge|636]:
168 -> 135 : INIT_STMT

[edge|637]:
168 -> 7 : double

[edge|638]:
168 -> 136 : CALL_STMT

[edge|639]:
168 -> 137 : EXPR

[edge|640]:
168 -> 138 : while

[edge|641]:
168 -> 139 : RTN_STMT

[edge|642]:
168 -> 82 : TYPE_SPEC

[edge|643]:
168 -> 140 : TERM

[edge|644]:
168 -> 141 : if

[edge|645]:
168 -> 142 : ID

[edge|646]:
168 -> 143 : FACTOR

[edge|647]:
168 -> 144 : JUST_STMT

[edge|648]:
168 -> 9 : float

[edge|649]:
168 -> 145 : for

[edge|650]:
168 -> 146 : CONST

[edge|651]:
168 -> 147 : IF_STMT

[edge|652]:
168 -> 10 : char

[edge|653]:
169 -> 2 : int

[edge|654]:
169 -> 131 : ITER_STMT

[edge|655]:
169 -> 3 : void

[edge|656]:
169 -> 132 : (

[edge|657]:
169 -> 133 : ASSIGN_STMT

[edge|658]:
169 -> 76 : return

[edge|659]:
169 -> 224 : {

[edge|660]:
169 -> 225 : STMT

[edge|661]:
169 -> 135 : INIT_STMT

[edge|662]:
169 -> 7 : double

[edge|663]:
169 -> 136 : CALL_STMT

[edge|664]:
169 -> 137 : EXPR

[edge|665]:
169 -> 138 : while

[edge|666]:
169 -> 139 : RTN_STMT

[edge|667]:
169 -> 82 : TYPE_SPEC

[edge|668]:
169 -> 140 : TERM

[edge|669]:
169 -> 141 : if

[edge|670]:
169 -> 142 : ID

[edge|671]:
169 -> 143 : FACTOR

[edge|672]:
169 -> 144 : JUST_STMT

[edge|673]:
169 -> 9 : float

[edge|674]:
169 -> 226 : CODE_BLOCK

[edge|675]:
169 -> 145 : for

[edge|676]:
169 -> 146 : CONST

[edge|677]:
169 -> 147 : IF_STMT

[edge|678]:
169 -> 10 : char

[edge|679]:
170 -> 227 : )

[edge|680]:
171 -> 2 : int

[edge|681]:
171 -> 131 : ITER_STMT

[edge|682]:
171 -> 3 : void

[edge|683]:
171 -> 132 : (

[edge|684]:
171 -> 133 : ASSIGN_STMT

[edge|685]:
171 -> 76 : return

[edge|686]:
171 -> 228 : STMT

[edge|687]:
171 -> 135 : INIT_STMT

[edge|688]:
171 -> 7 : double

[edge|689]:
171 -> 136 : CALL_STMT

[edge|690]:
171 -> 137 : EXPR

[edge|691]:
171 -> 138 : while

[edge|692]:
171 -> 139 : RTN_STMT

[edge|693]:
171 -> 82 : TYPE_SPEC

[edge|694]:
171 -> 140 : TERM

[edge|695]:
171 -> 141 : if

[edge|696]:
171 -> 142 : ID

[edge|697]:
171 -> 143 : FACTOR

[edge|698]:
171 -> 144 : JUST_STMT

[edge|699]:
171 -> 9 : float

[edge|700]:
171 -> 145 : for

[edge|701]:
171 -> 146 : CONST

[edge|702]:
171 -> 147 : IF_STMT

[edge|703]:
171 -> 10 : char

[edge|704]:
172 -> 16 : (

[edge|705]:
172 -> 17 : CALL_STMT

[edge|706]:
172 -> 229 : EXPR

[edge|707]:
172 -> 19 : TERM

[edge|708]:
172 -> 20 : ID

[edge|709]:
172 -> 21 : FACTOR

[edge|710]:
172 -> 22 : CONST

[edge|711]:
173 -> 16 : (

[edge|712]:
173 -> 17 : CALL_STMT

[edge|713]:
173 -> 230 : EXPR

[edge|714]:
173 -> 19 : TERM

[edge|715]:
173 -> 20 : ID

[edge|716]:
173 -> 21 : FACTOR

[edge|717]:
173 -> 22 : CONST

[edge|718]:
174 -> 16 : (

[edge|719]:
174 -> 17 : CALL_STMT

[edge|720]:
174 -> 231 : EXPR

[edge|721]:
174 -> 19 : TERM

[edge|722]:
174 -> 20 : ID

[edge|723]:
174 -> 21 : FACTOR

[edge|724]:
174 -> 22 : CONST

[edge|725]:
175 -> 16 : (

[edge|726]:
175 -> 17 : CALL_STMT

[edge|727]:
175 -> 232 : EXPR

[edge|728]:
175 -> 19 : TERM

[edge|729]:
175 -> 20 : ID

[edge|730]:
175 -> 21 : FACTOR

[edge|731]:
175 -> 22 : CONST

[edge|732]:
176 -> 16 : (

[edge|733]:
176 -> 17 : CALL_STMT

[edge|734]:
176 -> 233 : EXPR

[edge|735]:
176 -> 19 : TERM

[edge|736]:
176 -> 20 : ID

[edge|737]:
176 -> 21 : FACTOR

[edge|738]:
176 -> 22 : CONST

[edge|739]:
177 -> 16 : (

[edge|740]:
177 -> 17 : CALL_STMT

[edge|741]:
177 -> 234 : EXPR

[edge|742]:
177 -> 19 : TERM

[edge|743]:
177 -> 20 : ID

[edge|744]:
177 -> 21 : FACTOR

[edge|745]:
177 -> 22 : CONST

[edge|746]:
178 -> 2 : int

[edge|747]:
178 -> 109 : ITER_STMT

[edge|748]:
178 -> 3 : void

[edge|749]:
178 -> 110 : (

[edge|750]:
178 -> 111 : ASSIGN_STMT

[edge|751]:
178 -> 112 : return

[edge|752]:
178 -> 235 : STMT

[edge|753]:
178 -> 114 : INIT_STMT

[edge|754]:
178 -> 7 : double

[edge|755]:
178 -> 115 : CALL_STMT

[edge|756]:
178 -> 116 : EXPR

[edge|757]:
178 -> 117 : while

[edge|758]:
178 -> 118 : RTN_STMT

[edge|759]:
178 -> 119 : TYPE_SPEC

[edge|760]:
178 -> 120 : TERM

[edge|761]:
178 -> 121 : if

[edge|762]:
178 -> 122 : ID

[edge|763]:
178 -> 123 : FACTOR

[edge|764]:
178 -> 124 : JUST_STMT

[edge|765]:
178 -> 9 : float

[edge|766]:
178 -> 125 : for

[edge|767]:
178 -> 126 : CONST

[edge|768]:
178 -> 127 : IF_STMT

[edge|769]:
178 -> 10 : char

[edge|770]:
179 -> 132 : (

[edge|771]:
179 -> 136 : CALL_STMT

[edge|772]:
179 -> 236 : TERM

[edge|773]:
179 -> 237 : ID

[edge|774]:
179 -> 143 : FACTOR

[edge|775]:
179 -> 146 : CONST

[edge|776]:
181 -> 132 : (

[edge|777]:
181 -> 136 : CALL_STMT

[edge|778]:
181 -> 238 : TERM

[edge|779]:
181 -> 237 : ID

[edge|780]:
181 -> 143 : FACTOR

[edge|781]:
181 -> 146 : CONST

[edge|782]:
182 -> 2 : int

[edge|783]:
182 -> 109 : ITER_STMT

[edge|784]:
182 -> 3 : void

[edge|785]:
182 -> 110 : (

[edge|786]:
182 -> 111 : ASSIGN_STMT

[edge|787]:
182 -> 112 : return

[edge|788]:
182 -> 239 : STMT

[edge|789]:
182 -> 114 : INIT_STMT

[edge|790]:
182 -> 7 : double

[edge|791]:
182 -> 115 : CALL_STMT

[edge|792]:
182 -> 116 : EXPR

[edge|793]:
182 -> 117 : while

[edge|794]:
182 -> 118 : RTN_STMT

[edge|795]:
182 -> 119 : TYPE_SPEC

[edge|796]:
182 -> 120 : TERM

[edge|797]:
182 -> 121 : if

[edge|798]:
182 -> 122 : ID

[edge|799]:
182 -> 123 : FACTOR

[edge|800]:
182 -> 124 : JUST_STMT

[edge|801]:
182 -> 9 : float

[edge|802]:
182 -> 125 : for

[edge|803]:
182 -> 126 : CONST

[edge|804]:
182 -> 127 : IF_STMT

[edge|805]:
182 -> 10 : char

[edge|806]:
183 -> 54 : PARG

[edge|807]:
183 -> 55 : ID

[edge|808]:
183 -> 240 : PARG_LIST

[edge|809]:
184 -> 132 : (

[edge|810]:
184 -> 136 : CALL_STMT

[edge|811]:
184 -> 237 : ID

[edge|812]:
184 -> 241 : FACTOR

[edge|813]:
184 -> 146 : CONST

[edge|814]:
185 -> 132 : (

[edge|815]:
185 -> 136 : CALL_STMT

[edge|816]:
185 -> 237 : ID

[edge|817]:
185 -> 242 : FACTOR

[edge|818]:
185 -> 146 : CONST

[edge|819]:
187 -> 2 : int

[edge|820]:
187 -> 131 : ITER_STMT

[edge|821]:
187 -> 3 : void

[edge|822]:
187 -> 132 : (

[edge|823]:
187 -> 133 : ASSIGN_STMT

[edge|824]:
187 -> 76 : return

[edge|825]:
187 -> 243 : STMT

[edge|826]:
187 -> 135 : INIT_STMT

[edge|827]:
187 -> 7 : double

[edge|828]:
187 -> 136 : CALL_STMT

[edge|829]:
187 -> 137 : EXPR

[edge|830]:
187 -> 138 : while

[edge|831]:
187 -> 139 : RTN_STMT

[edge|832]:
187 -> 82 : TYPE_SPEC

[edge|833]:
187 -> 140 : TERM

[edge|834]:
187 -> 141 : if

[edge|835]:
187 -> 142 : ID

[edge|836]:
187 -> 143 : FACTOR

[edge|837]:
187 -> 144 : JUST_STMT

[edge|838]:
187 -> 9 : float

[edge|839]:
187 -> 145 : for

[edge|840]:
187 -> 146 : CONST

[edge|841]:
187 -> 147 : IF_STMT

[edge|842]:
187 -> 10 : char

[edge|843]:
190 -> 26 : (

[edge|844]:
190 -> 27 : CALL_STMT

[edge|845]:
190 -> 244 : EXPR

[edge|846]:
190 -> 29 : TERM

[edge|847]:
190 -> 30 : ID

[edge|848]:
190 -> 31 : FACTOR

[edge|849]:
190 -> 32 : CONST

[edge|850]:
192 -> 245 : (

[edge|851]:
192 -> 246 : CALL_STMT

[edge|852]:
192 -> 247 : EXPR

[edge|853]:
192 -> 248 : TERM

[edge|854]:
192 -> 249 : ID

[edge|855]:
192 -> 250 : FACTOR

[edge|856]:
192 -> 251 : CONST

[edge|857]:
193 -> 2 : int

[edge|858]:
193 -> 74 : ITER_STMT

[edge|859]:
193 -> 3 : void

[edge|860]:
193 -> 16 : (

[edge|861]:
193 -> 75 : ASSIGN_STMT

[edge|862]:
193 -> 76 : return

[edge|863]:
193 -> 77 : INIT_STMT

[edge|864]:
193 -> 7 : double

[edge|865]:
193 -> 17 : CALL_STMT

[edge|866]:
193 -> 252 : STMT_LIST

[edge|867]:
193 -> 79 : EXPR

[edge|868]:
193 -> 80 : while

[edge|869]:
193 -> 81 : RTN_STMT

[edge|870]:
193 -> 82 : TYPE_SPEC

[edge|871]:
193 -> 19 : TERM

[edge|872]:
193 -> 83 : if

[edge|873]:
193 -> 84 : ID

[edge|874]:
193 -> 21 : FACTOR

[edge|875]:
193 -> 9 : float

[edge|876]:
193 -> 85 : for

[edge|877]:
193 -> 22 : CONST

[edge|878]:
193 -> 86 : IF_STMT

[edge|879]:
193 -> 10 : char

[edge|880]:
197 -> 253 : <

[edge|881]:
197 -> 254 : <=

[edge|882]:
197 -> 255 : >=

[edge|883]:
197 -> 256 : ==

[edge|884]:
197 -> 257 : >

[edge|885]:
197 -> 258 : !=

[edge|886]:
199 -> 259 : ID

[edge|887]:
200 -> 260 : +

[edge|888]:
200 -> 261 : EXPR2

[edge|889]:
200 -> 262 : -

[edge|890]:
201 -> 263 : =

[edge|891]:
201 -> 264 : (

[edge|892]:
202 -> 265 : *

[edge|893]:
202 -> 266 : /

[edge|894]:
202 -> 267 : TERM2

[edge|895]:
213 -> 268 : )

[edge|896]:
214 -> 26 : (

[edge|897]:
214 -> 27 : CALL_STMT

[edge|898]:
214 -> 269 : EXPR

[edge|899]:
214 -> 29 : TERM

[edge|900]:
214 -> 30 : ID

[edge|901]:
214 -> 31 : FACTOR

[edge|902]:
214 -> 32 : CONST

[edge|903]:
215 -> 159 : +

[edge|904]:
215 -> 270 : EXPR2

[edge|905]:
215 -> 161 : -

[edge|906]:
216 -> 164 : (

[edge|907]:
217 -> 159 : +

[edge|908]:
217 -> 271 : EXPR2

[edge|909]:
217 -> 161 : -

[edge|910]:
218 -> 272 : )

[edge|911]:
220 -> 273 : )

[edge|912]:
221 -> 165 : *

[edge|913]:
221 -> 166 : /

[edge|914]:
221 -> 274 : TERM2

[edge|915]:
222 -> 165 : *

[edge|916]:
222 -> 166 : /

[edge|917]:
222 -> 275 : TERM2

[edge|918]:
223 -> 276 : ;

[edge|919]:
224 -> 2 : int

[edge|920]:
224 -> 74 : ITER_STMT

[edge|921]:
224 -> 3 : void

[edge|922]:
224 -> 16 : (

[edge|923]:
224 -> 75 : ASSIGN_STMT

[edge|924]:
224 -> 76 : return

[edge|925]:
224 -> 77 : INIT_STMT

[edge|926]:
224 -> 7 : double

[edge|927]:
224 -> 17 : CALL_STMT

[edge|928]:
224 -> 277 : STMT_LIST

[edge|929]:
224 -> 79 : EXPR

[edge|930]:
224 -> 80 : while

[edge|931]:
224 -> 81 : RTN_STMT

[edge|932]:
224 -> 82 : TYPE_SPEC

[edge|933]:
224 -> 19 : TERM

[edge|934]:
224 -> 83 : if

[edge|935]:
224 -> 84 : ID

[edge|936]:
224 -> 21 : FACTOR

[edge|937]:
224 -> 9 : float

[edge|938]:
224 -> 85 : for

[edge|939]:
224 -> 22 : CONST

[edge|940]:
224 -> 86 : IF_STMT

[edge|941]:
224 -> 10 : char

[edge|942]:
225 -> 278 : ;

[edge|943]:
226 -> 279 : else

[edge|944]:
228 -> 280 : ;

[edge|945]:
235 -> 281 : )

[edge|946]:
236 -> 179 : +

[edge|947]:
236 -> 282 : EXPR2

[edge|948]:
236 -> 181 : -

[edge|949]:
237 -> 183 : (

[edge|950]:
238 -> 179 : +

[edge|951]:
238 -> 283 : EXPR2

[edge|952]:
238 -> 181 : -

[edge|953]:
239 -> 284 : )

[edge|954]:
240 -> 285 : )

[edge|955]:
241 -> 184 : *

[edge|956]:
241 -> 185 : /

[edge|957]:
241 -> 286 : TERM2

[edge|958]:
242 -> 184 : *

[edge|959]:
242 -> 185 : /

[edge|960]:
242 -> 287 : TERM2

[edge|961]:
243 -> 288 : ;

[edge|962]:
244 -> 289 : )

[edge|963]:
245 -> 26 : (

[edge|964]:
245 -> 27 : CALL_STMT

[edge|965]:
245 -> 290 : EXPR

[edge|966]:
245 -> 29 : TERM

[edge|967]:
245 -> 30 : ID

[edge|968]:
245 -> 31 : FACTOR

[edge|969]:
245 -> 32 : CONST

[edge|970]:
248 -> 291 : +

[edge|971]:
248 -> 292 : EXPR2

[edge|972]:
248 -> 293 : -

[edge|973]:
249 -> 294 : (

[edge|974]:
250 -> 295 : *

[edge|975]:
250 -> 296 : /

[edge|976]:
250 -> 297 : TERM2

[edge|977]:
252 -> 298 : }

[edge|978]:
253 -> 245 : (

[edge|979]:
253 -> 246 : CALL_STMT

[edge|980]:
253 -> 299 : EXPR

[edge|981]:
253 -> 248 : TERM

[edge|982]:
253 -> 249 : ID

[edge|983]:
253 -> 250 : FACTOR

[edge|984]:
253 -> 251 : CONST

[edge|985]:
254 -> 245 : (

[edge|986]:
254 -> 246 : CALL_STMT

[edge|987]:
254 -> 300 : EXPR

[edge|988]:
254 -> 248 : TERM

[edge|989]:
254 -> 249 : ID

[edge|990]:
254 -> 250 : FACTOR

[edge|991]:
254 -> 251 : CONST

[edge|992]:
255 -> 245 : (

[edge|993]:
255 -> 246 : CALL_STMT

[edge|994]:
255 -> 301 : EXPR

[edge|995]:
255 -> 248 : TERM

[edge|996]:
255 -> 249 : ID

[edge|997]:
255 -> 250 : FACTOR

[edge|998]:
255 -> 251 : CONST

[edge|999]:
256 -> 245 : (

[edge|1000]:
256 -> 246 : CALL_STMT

[edge|1001]:
256 -> 302 : EXPR

[edge|1002]:
256 -> 248 : TERM

[edge|1003]:
256 -> 249 : ID

[edge|1004]:
256 -> 250 : FACTOR

[edge|1005]:
256 -> 251 : CONST

[edge|1006]:
257 -> 245 : (

[edge|1007]:
257 -> 246 : CALL_STMT

[edge|1008]:
257 -> 303 : EXPR

[edge|1009]:
257 -> 248 : TERM

[edge|1010]:
257 -> 249 : ID

[edge|1011]:
257 -> 250 : FACTOR

[edge|1012]:
257 -> 251 : CONST

[edge|1013]:
258 -> 245 : (

[edge|1014]:
258 -> 246 : CALL_STMT

[edge|1015]:
258 -> 304 : EXPR

[edge|1016]:
258 -> 248 : TERM

[edge|1017]:
258 -> 249 : ID

[edge|1018]:
258 -> 250 : FACTOR

[edge|1019]:
258 -> 251 : CONST

[edge|1020]:
259 -> 305 : =

[edge|1021]:
260 -> 190 : (

[edge|1022]:
260 -> 196 : CALL_STMT

[edge|1023]:
260 -> 306 : TERM

[edge|1024]:
260 -> 307 : ID

[edge|1025]:
260 -> 202 : FACTOR

[edge|1026]:
260 -> 205 : CONST

[edge|1027]:
262 -> 190 : (

[edge|1028]:
262 -> 196 : CALL_STMT

[edge|1029]:
262 -> 308 : TERM

[edge|1030]:
262 -> 307 : ID

[edge|1031]:
262 -> 202 : FACTOR

[edge|1032]:
262 -> 205 : CONST

[edge|1033]:
263 -> 245 : (

[edge|1034]:
263 -> 246 : CALL_STMT

[edge|1035]:
263 -> 309 : EXPR

[edge|1036]:
263 -> 248 : TERM

[edge|1037]:
263 -> 249 : ID

[edge|1038]:
263 -> 250 : FACTOR

[edge|1039]:
263 -> 251 : CONST

[edge|1040]:
264 -> 54 : PARG

[edge|1041]:
264 -> 55 : ID

[edge|1042]:
264 -> 310 : PARG_LIST

[edge|1043]:
265 -> 190 : (

[edge|1044]:
265 -> 196 : CALL_STMT

[edge|1045]:
265 -> 307 : ID

[edge|1046]:
265 -> 311 : FACTOR

[edge|1047]:
265 -> 205 : CONST

[edge|1048]:
266 -> 190 : (

[edge|1049]:
266 -> 196 : CALL_STMT

[edge|1050]:
266 -> 307 : ID

[edge|1051]:
266 -> 312 : FACTOR

[edge|1052]:
266 -> 205 : CONST

[edge|1053]:
268 -> 2 : int

[edge|1054]:
268 -> 109 : ITER_STMT

[edge|1055]:
268 -> 3 : void

[edge|1056]:
268 -> 110 : (

[edge|1057]:
268 -> 111 : ASSIGN_STMT

[edge|1058]:
268 -> 112 : return

[edge|1059]:
268 -> 313 : {

[edge|1060]:
268 -> 314 : STMT

[edge|1061]:
268 -> 114 : INIT_STMT

[edge|1062]:
268 -> 7 : double

[edge|1063]:
268 -> 115 : CALL_STMT

[edge|1064]:
268 -> 116 : EXPR

[edge|1065]:
268 -> 117 : while

[edge|1066]:
268 -> 118 : RTN_STMT

[edge|1067]:
268 -> 119 : TYPE_SPEC

[edge|1068]:
268 -> 120 : TERM

[edge|1069]:
268 -> 121 : if

[edge|1070]:
268 -> 122 : ID

[edge|1071]:
268 -> 123 : FACTOR

[edge|1072]:
268 -> 124 : JUST_STMT

[edge|1073]:
268 -> 9 : float

[edge|1074]:
268 -> 315 : CODE_BLOCK

[edge|1075]:
268 -> 125 : for

[edge|1076]:
268 -> 126 : CONST

[edge|1077]:
268 -> 127 : IF_STMT

[edge|1078]:
268 -> 10 : char

[edge|1079]:
272 -> 2 : int

[edge|1080]:
272 -> 131 : ITER_STMT

[edge|1081]:
272 -> 3 : void

[edge|1082]:
272 -> 132 : (

[edge|1083]:
272 -> 133 : ASSIGN_STMT

[edge|1084]:
272 -> 76 : return

[edge|1085]:
272 -> 316 : {

[edge|1086]:
272 -> 317 : STMT

[edge|1087]:
272 -> 135 : INIT_STMT

[edge|1088]:
272 -> 7 : double

[edge|1089]:
272 -> 136 : CALL_STMT

[edge|1090]:
272 -> 137 : EXPR

[edge|1091]:
272 -> 138 : while

[edge|1092]:
272 -> 139 : RTN_STMT

[edge|1093]:
272 -> 82 : TYPE_SPEC

[edge|1094]:
272 -> 140 : TERM

[edge|1095]:
272 -> 141 : if

[edge|1096]:
272 -> 142 : ID

[edge|1097]:
272 -> 143 : FACTOR

[edge|1098]:
272 -> 144 : JUST_STMT

[edge|1099]:
272 -> 9 : float

[edge|1100]:
272 -> 318 : CODE_BLOCK

[edge|1101]:
272 -> 145 : for

[edge|1102]:
272 -> 146 : CONST

[edge|1103]:
272 -> 147 : IF_STMT

[edge|1104]:
272 -> 10 : char

[edge|1105]:
276 -> 2 : int

[edge|1106]:
276 -> 131 : ITER_STMT

[edge|1107]:
276 -> 3 : void

[edge|1108]:
276 -> 132 : (

[edge|1109]:
276 -> 133 : ASSIGN_STMT

[edge|1110]:
276 -> 76 : return

[edge|1111]:
276 -> 319 : STMT

[edge|1112]:
276 -> 135 : INIT_STMT

[edge|1113]:
276 -> 7 : double

[edge|1114]:
276 -> 136 : CALL_STMT

[edge|1115]:
276 -> 137 : EXPR

[edge|1116]:
276 -> 138 : while

[edge|1117]:
276 -> 139 : RTN_STMT

[edge|1118]:
276 -> 82 : TYPE_SPEC

[edge|1119]:
276 -> 140 : TERM

[edge|1120]:
276 -> 141 : if

[edge|1121]:
276 -> 142 : ID

[edge|1122]:
276 -> 143 : FACTOR

[edge|1123]:
276 -> 144 : JUST_STMT

[edge|1124]:
276 -> 9 : float

[edge|1125]:
276 -> 145 : for

[edge|1126]:
276 -> 146 : CONST

[edge|1127]:
276 -> 147 : IF_STMT

[edge|1128]:
276 -> 10 : char

[edge|1129]:
277 -> 320 : }

[edge|1130]:
278 -> 321 : else

[edge|1131]:
279 -> 193 : {

[edge|1132]:
279 -> 83 : if

[edge|1133]:
279 -> 322 : CODE_BLOCK

[edge|1134]:
279 -> 323 : IF_STMT

[edge|1135]:
280 -> 2 : int

[edge|1136]:
280 -> 109 : ITER_STMT

[edge|1137]:
280 -> 3 : void

[edge|1138]:
280 -> 110 : (

[edge|1139]:
280 -> 111 : ASSIGN_STMT

[edge|1140]:
280 -> 112 : return

[edge|1141]:
280 -> 324 : STMT

[edge|1142]:
280 -> 114 : INIT_STMT

[edge|1143]:
280 -> 7 : double

[edge|1144]:
280 -> 115 : CALL_STMT

[edge|1145]:
280 -> 116 : EXPR

[edge|1146]:
280 -> 117 : while

[edge|1147]:
280 -> 118 : RTN_STMT

[edge|1148]:
280 -> 119 : TYPE_SPEC

[edge|1149]:
280 -> 120 : TERM

[edge|1150]:
280 -> 121 : if

[edge|1151]:
280 -> 122 : ID

[edge|1152]:
280 -> 123 : FACTOR

[edge|1153]:
280 -> 124 : JUST_STMT

[edge|1154]:
280 -> 9 : float

[edge|1155]:
280 -> 125 : for

[edge|1156]:
280 -> 126 : CONST

[edge|1157]:
280 -> 127 : IF_STMT

[edge|1158]:
280 -> 10 : char

[edge|1159]:
281 -> 2 : int

[edge|1160]:
281 -> 131 : ITER_STMT

[edge|1161]:
281 -> 3 : void

[edge|1162]:
281 -> 132 : (

[edge|1163]:
281 -> 133 : ASSIGN_STMT

[edge|1164]:
281 -> 76 : return

[edge|1165]:
281 -> 325 : {

[edge|1166]:
281 -> 326 : STMT

[edge|1167]:
281 -> 135 : INIT_STMT

[edge|1168]:
281 -> 7 : double

[edge|1169]:
281 -> 136 : CALL_STMT

[edge|1170]:
281 -> 137 : EXPR

[edge|1171]:
281 -> 138 : while

[edge|1172]:
281 -> 139 : RTN_STMT

[edge|1173]:
281 -> 82 : TYPE_SPEC

[edge|1174]:
281 -> 140 : TERM

[edge|1175]:
281 -> 141 : if

[edge|1176]:
281 -> 142 : ID

[edge|1177]:
281 -> 143 : FACTOR

[edge|1178]:
281 -> 144 : JUST_STMT

[edge|1179]:
281 -> 9 : float

[edge|1180]:
281 -> 327 : CODE_BLOCK

[edge|1181]:
281 -> 145 : for

[edge|1182]:
281 -> 146 : CONST

[edge|1183]:
281 -> 147 : IF_STMT

[edge|1184]:
281 -> 10 : char

[edge|1185]:
284 -> 2 : int

[edge|1186]:
284 -> 131 : ITER_STMT

[edge|1187]:
284 -> 3 : void

[edge|1188]:
284 -> 132 : (

[edge|1189]:
284 -> 133 : ASSIGN_STMT

[edge|1190]:
284 -> 76 : return

[edge|1191]:
284 -> 328 : {

[edge|1192]:
284 -> 329 : STMT

[edge|1193]:
284 -> 135 : INIT_STMT

[edge|1194]:
284 -> 7 : double

[edge|1195]:
284 -> 136 : CALL_STMT

[edge|1196]:
284 -> 137 : EXPR

[edge|1197]:
284 -> 138 : while

[edge|1198]:
284 -> 139 : RTN_STMT

[edge|1199]:
284 -> 82 : TYPE_SPEC

[edge|1200]:
284 -> 140 : TERM

[edge|1201]:
284 -> 141 : if

[edge|1202]:
284 -> 142 : ID

[edge|1203]:
284 -> 143 : FACTOR

[edge|1204]:
284 -> 144 : JUST_STMT

[edge|1205]:
284 -> 9 : float

[edge|1206]:
284 -> 330 : CODE_BLOCK

[edge|1207]:
284 -> 145 : for

[edge|1208]:
284 -> 146 : CONST

[edge|1209]:
284 -> 147 : IF_STMT

[edge|1210]:
284 -> 10 : char

[edge|1211]:
288 -> 2 : int

[edge|1212]:
288 -> 131 : ITER_STMT

[edge|1213]:
288 -> 3 : void

[edge|1214]:
288 -> 132 : (

[edge|1215]:
288 -> 133 : ASSIGN_STMT

[edge|1216]:
288 -> 76 : return

[edge|1217]:
288 -> 331 : STMT

[edge|1218]:
288 -> 135 : INIT_STMT

[edge|1219]:
288 -> 7 : double

[edge|1220]:
288 -> 136 : CALL_STMT

[edge|1221]:
288 -> 137 : EXPR

[edge|1222]:
288 -> 138 : while

[edge|1223]:
288 -> 139 : RTN_STMT

[edge|1224]:
288 -> 82 : TYPE_SPEC

[edge|1225]:
288 -> 140 : TERM

[edge|1226]:
288 -> 141 : if

[edge|1227]:
288 -> 142 : ID

[edge|1228]:
288 -> 143 : FACTOR

[edge|1229]:
288 -> 144 : JUST_STMT

[edge|1230]:
288 -> 9 : float

[edge|1231]:
288 -> 145 : for

[edge|1232]:
288 -> 146 : CONST

[edge|1233]:
288 -> 147 : IF_STMT

[edge|1234]:
288 -> 10 : char

[edge|1235]:
290 -> 332 : )

[edge|1236]:
291 -> 245 : (

[edge|1237]:
291 -> 246 : CALL_STMT

[edge|1238]:
291 -> 333 : TERM

[edge|1239]:
291 -> 249 : ID

[edge|1240]:
291 -> 250 : FACTOR

[edge|1241]:
291 -> 251 : CONST

[edge|1242]:
293 -> 245 : (

[edge|1243]:
293 -> 246 : CALL_STMT

[edge|1244]:
293 -> 334 : TERM

[edge|1245]:
293 -> 249 : ID

[edge|1246]:
293 -> 250 : FACTOR

[edge|1247]:
293 -> 251 : CONST

[edge|1248]:
294 -> 54 : PARG

[edge|1249]:
294 -> 55 : ID

[edge|1250]:
294 -> 335 : PARG_LIST

[edge|1251]:
295 -> 245 : (

[edge|1252]:
295 -> 246 : CALL_STMT

[edge|1253]:
295 -> 249 : ID

[edge|1254]:
295 -> 336 : FACTOR

[edge|1255]:
295 -> 251 : CONST

[edge|1256]:
296 -> 245 : (

[edge|1257]:
296 -> 246 : CALL_STMT

[edge|1258]:
296 -> 249 : ID

[edge|1259]:
296 -> 337 : FACTOR

[edge|1260]:
296 -> 251 : CONST

[edge|1261]:
305 -> 245 : (

[edge|1262]:
305 -> 246 : CALL_STMT

[edge|1263]:
305 -> 338 : EXPR

[edge|1264]:
305 -> 248 : TERM

[edge|1265]:
305 -> 249 : ID

[edge|1266]:
305 -> 250 : FACTOR

[edge|1267]:
305 -> 251 : CONST

[edge|1268]:
306 -> 260 : +

[edge|1269]:
306 -> 339 : EXPR2

[edge|1270]:
306 -> 262 : -

[edge|1271]:
307 -> 264 : (

[edge|1272]:
308 -> 260 : +

[edge|1273]:
308 -> 340 : EXPR2

[edge|1274]:
308 -> 262 : -

[edge|1275]:
310 -> 341 : )

[edge|1276]:
311 -> 265 : *

[edge|1277]:
311 -> 266 : /

[edge|1278]:
311 -> 342 : TERM2

[edge|1279]:
312 -> 265 : *

[edge|1280]:
312 -> 266 : /

[edge|1281]:
312 -> 343 : TERM2

[edge|1282]:
313 -> 2 : int

[edge|1283]:
313 -> 74 : ITER_STMT

[edge|1284]:
313 -> 3 : void

[edge|1285]:
313 -> 16 : (

[edge|1286]:
313 -> 75 : ASSIGN_STMT

[edge|1287]:
313 -> 76 : return

[edge|1288]:
313 -> 77 : INIT_STMT

[edge|1289]:
313 -> 7 : double

[edge|1290]:
313 -> 17 : CALL_STMT

[edge|1291]:
313 -> 344 : STMT_LIST

[edge|1292]:
313 -> 79 : EXPR

[edge|1293]:
313 -> 80 : while

[edge|1294]:
313 -> 81 : RTN_STMT

[edge|1295]:
313 -> 82 : TYPE_SPEC

[edge|1296]:
313 -> 19 : TERM

[edge|1297]:
313 -> 83 : if

[edge|1298]:
313 -> 84 : ID

[edge|1299]:
313 -> 21 : FACTOR

[edge|1300]:
313 -> 9 : float

[edge|1301]:
313 -> 85 : for

[edge|1302]:
313 -> 22 : CONST

[edge|1303]:
313 -> 86 : IF_STMT

[edge|1304]:
313 -> 10 : char

[edge|1305]:
316 -> 2 : int

[edge|1306]:
316 -> 74 : ITER_STMT

[edge|1307]:
316 -> 3 : void

[edge|1308]:
316 -> 16 : (

[edge|1309]:
316 -> 75 : ASSIGN_STMT

[edge|1310]:
316 -> 76 : return

[edge|1311]:
316 -> 77 : INIT_STMT

[edge|1312]:
316 -> 7 : double

[edge|1313]:
316 -> 17 : CALL_STMT

[edge|1314]:
316 -> 345 : STMT_LIST

[edge|1315]:
316 -> 79 : EXPR

[edge|1316]:
316 -> 80 : while

[edge|1317]:
316 -> 81 : RTN_STMT

[edge|1318]:
316 -> 82 : TYPE_SPEC

[edge|1319]:
316 -> 19 : TERM

[edge|1320]:
316 -> 83 : if

[edge|1321]:
316 -> 84 : ID

[edge|1322]:
316 -> 21 : FACTOR

[edge|1323]:
316 -> 9 : float

[edge|1324]:
316 -> 85 : for

[edge|1325]:
316 -> 22 : CONST

[edge|1326]:
316 -> 86 : IF_STMT

[edge|1327]:
316 -> 10 : char

[edge|1328]:
317 -> 346 : ;

[edge|1329]:
318 -> 347 : else

[edge|1330]:
319 -> 348 : ;

[edge|1331]:
321 -> 193 : {

[edge|1332]:
321 -> 83 : if

[edge|1333]:
321 -> 349 : CODE_BLOCK

[edge|1334]:
321 -> 350 : IF_STMT

[edge|1335]:
324 -> 351 : )

[edge|1336]:
325 -> 2 : int

[edge|1337]:
325 -> 74 : ITER_STMT

[edge|1338]:
325 -> 3 : void

[edge|1339]:
325 -> 16 : (

[edge|1340]:
325 -> 75 : ASSIGN_STMT

[edge|1341]:
325 -> 76 : return

[edge|1342]:
325 -> 77 : INIT_STMT

[edge|1343]:
325 -> 7 : double

[edge|1344]:
325 -> 17 : CALL_STMT

[edge|1345]:
325 -> 352 : STMT_LIST

[edge|1346]:
325 -> 79 : EXPR

[edge|1347]:
325 -> 80 : while

[edge|1348]:
325 -> 81 : RTN_STMT

[edge|1349]:
325 -> 82 : TYPE_SPEC

[edge|1350]:
325 -> 19 : TERM

[edge|1351]:
325 -> 83 : if

[edge|1352]:
325 -> 84 : ID

[edge|1353]:
325 -> 21 : FACTOR

[edge|1354]:
325 -> 9 : float

[edge|1355]:
325 -> 85 : for

[edge|1356]:
325 -> 22 : CONST

[edge|1357]:
325 -> 86 : IF_STMT

[edge|1358]:
325 -> 10 : char

[edge|1359]:
328 -> 2 : int

[edge|1360]:
328 -> 74 : ITER_STMT

[edge|1361]:
328 -> 3 : void

[edge|1362]:
328 -> 16 : (

[edge|1363]:
328 -> 75 : ASSIGN_STMT

[edge|1364]:
328 -> 76 : return

[edge|1365]:
328 -> 77 : INIT_STMT

[edge|1366]:
328 -> 7 : double

[edge|1367]:
328 -> 17 : CALL_STMT

[edge|1368]:
328 -> 353 : STMT_LIST

[edge|1369]:
328 -> 79 : EXPR

[edge|1370]:
328 -> 80 : while

[edge|1371]:
328 -> 81 : RTN_STMT

[edge|1372]:
328 -> 82 : TYPE_SPEC

[edge|1373]:
328 -> 19 : TERM

[edge|1374]:
328 -> 83 : if

[edge|1375]:
328 -> 84 : ID

[edge|1376]:
328 -> 21 : FACTOR

[edge|1377]:
328 -> 9 : float

[edge|1378]:
328 -> 85 : for

[edge|1379]:
328 -> 22 : CONST

[edge|1380]:
328 -> 86 : IF_STMT

[edge|1381]:
328 -> 10 : char

[edge|1382]:
329 -> 354 : ;

[edge|1383]:
330 -> 355 : else

[edge|1384]:
331 -> 356 : ;

[edge|1385]:
333 -> 291 : +

[edge|1386]:
333 -> 357 : EXPR2

[edge|1387]:
333 -> 293 : -

[edge|1388]:
334 -> 291 : +

[edge|1389]:
334 -> 358 : EXPR2

[edge|1390]:
334 -> 293 : -

[edge|1391]:
335 -> 359 : )

[edge|1392]:
336 -> 295 : *

[edge|1393]:
336 -> 296 : /

[edge|1394]:
336 -> 360 : TERM2

[edge|1395]:
337 -> 295 : *

[edge|1396]:
337 -> 296 : /

[edge|1397]:
337 -> 361 : TERM2

[edge|1398]:
344 -> 362 : }

[edge|1399]:
345 -> 363 : }

[edge|1400]:
346 -> 364 : else

[edge|1401]:
347 -> 313 : {

[edge|1402]:
347 -> 121 : if

[edge|1403]:
347 -> 365 : CODE_BLOCK

[edge|1404]:
347 -> 366 : IF_STMT

[edge|1405]:
348 -> 2 : int

[edge|1406]:
348 -> 109 : ITER_STMT

[edge|1407]:
348 -> 3 : void

[edge|1408]:
348 -> 110 : (

[edge|1409]:
348 -> 111 : ASSIGN_STMT

[edge|1410]:
348 -> 112 : return

[edge|1411]:
348 -> 367 : STMT

[edge|1412]:
348 -> 114 : INIT_STMT

[edge|1413]:
348 -> 7 : double

[edge|1414]:
348 -> 115 : CALL_STMT

[edge|1415]:
348 -> 116 : EXPR

[edge|1416]:
348 -> 117 : while

[edge|1417]:
348 -> 118 : RTN_STMT

[edge|1418]:
348 -> 119 : TYPE_SPEC

[edge|1419]:
348 -> 120 : TERM

[edge|1420]:
348 -> 121 : if

[edge|1421]:
348 -> 122 : ID

[edge|1422]:
348 -> 123 : FACTOR

[edge|1423]:
348 -> 124 : JUST_STMT

[edge|1424]:
348 -> 9 : float

[edge|1425]:
348 -> 125 : for

[edge|1426]:
348 -> 126 : CONST

[edge|1427]:
348 -> 127 : IF_STMT

[edge|1428]:
348 -> 10 : char

[edge|1429]:
351 -> 2 : int

[edge|1430]:
351 -> 189 : ITER_STMT

[edge|1431]:
351 -> 3 : void

[edge|1432]:
351 -> 190 : (

[edge|1433]:
351 -> 191 : ASSIGN_STMT

[edge|1434]:
351 -> 192 : return

[edge|1435]:
351 -> 193 : {

[edge|1436]:
351 -> 368 : STMT

[edge|1437]:
351 -> 195 : INIT_STMT

[edge|1438]:
351 -> 7 : double

[edge|1439]:
351 -> 196 : CALL_STMT

[edge|1440]:
351 -> 197 : EXPR

[edge|1441]:
351 -> 80 : while

[edge|1442]:
351 -> 198 : RTN_STMT

[edge|1443]:
351 -> 199 : TYPE_SPEC

[edge|1444]:
351 -> 200 : TERM

[edge|1445]:
351 -> 83 : if

[edge|1446]:
351 -> 201 : ID

[edge|1447]:
351 -> 202 : FACTOR

[edge|1448]:
351 -> 203 : JUST_STMT

[edge|1449]:
351 -> 9 : float

[edge|1450]:
351 -> 369 : CODE_BLOCK

[edge|1451]:
351 -> 85 : for

[edge|1452]:
351 -> 205 : CONST

[edge|1453]:
351 -> 206 : IF_STMT

[edge|1454]:
351 -> 10 : char

[edge|1455]:
352 -> 370 : }

[edge|1456]:
353 -> 371 : }

[edge|1457]:
354 -> 372 : else

[edge|1458]:
355 -> 325 : {

[edge|1459]:
355 -> 141 : if

[edge|1460]:
355 -> 373 : CODE_BLOCK

[edge|1461]:
355 -> 374 : IF_STMT

[edge|1462]:
356 -> 2 : int

[edge|1463]:
356 -> 109 : ITER_STMT

[edge|1464]:
356 -> 3 : void

[edge|1465]:
356 -> 110 : (

[edge|1466]:
356 -> 111 : ASSIGN_STMT

[edge|1467]:
356 -> 112 : return

[edge|1468]:
356 -> 375 : STMT

[edge|1469]:
356 -> 114 : INIT_STMT

[edge|1470]:
356 -> 7 : double

[edge|1471]:
356 -> 115 : CALL_STMT

[edge|1472]:
356 -> 116 : EXPR

[edge|1473]:
356 -> 117 : while

[edge|1474]:
356 -> 118 : RTN_STMT

[edge|1475]:
356 -> 119 : TYPE_SPEC

[edge|1476]:
356 -> 120 : TERM

[edge|1477]:
356 -> 121 : if

[edge|1478]:
356 -> 122 : ID

[edge|1479]:
356 -> 123 : FACTOR

[edge|1480]:
356 -> 124 : JUST_STMT

[edge|1481]:
356 -> 9 : float

[edge|1482]:
356 -> 125 : for

[edge|1483]:
356 -> 126 : CONST

[edge|1484]:
356 -> 127 : IF_STMT

[edge|1485]:
356 -> 10 : char

[edge|1486]:
364 -> 313 : {

[edge|1487]:
364 -> 121 : if

[edge|1488]:
364 -> 376 : CODE_BLOCK

[edge|1489]:
364 -> 377 : IF_STMT

[edge|1490]:
367 -> 378 : )

[edge|1491]:
372 -> 325 : {

[edge|1492]:
372 -> 141 : if

[edge|1493]:
372 -> 379 : CODE_BLOCK

[edge|1494]:
372 -> 380 : IF_STMT

[edge|1495]:
375 -> 381 : )

[edge|1496]:
378 -> 2 : int

[edge|1497]:
378 -> 109 : ITER_STMT

[edge|1498]:
378 -> 3 : void

[edge|1499]:
378 -> 110 : (

[edge|1500]:
378 -> 111 : ASSIGN_STMT

[edge|1501]:
378 -> 112 : return

[edge|1502]:
378 -> 313 : {

[edge|1503]:
378 -> 382 : STMT

[edge|1504]:
378 -> 114 : INIT_STMT

[edge|1505]:
378 -> 7 : double

[edge|1506]:
378 -> 115 : CALL_STMT

[edge|1507]:
378 -> 116 : EXPR

[edge|1508]:
378 -> 117 : while

[edge|1509]:
378 -> 118 : RTN_STMT

[edge|1510]:
378 -> 119 : TYPE_SPEC

[edge|1511]:
378 -> 120 : TERM

[edge|1512]:
378 -> 121 : if

[edge|1513]:
378 -> 122 : ID

[edge|1514]:
378 -> 123 : FACTOR

[edge|1515]:
378 -> 124 : JUST_STMT

[edge|1516]:
378 -> 9 : float

[edge|1517]:
378 -> 383 : CODE_BLOCK

[edge|1518]:
378 -> 125 : for

[edge|1519]:
378 -> 126 : CONST

[edge|1520]:
378 -> 127 : IF_STMT

[edge|1521]:
378 -> 10 : char

[edge|1522]:
381 -> 2 : int

[edge|1523]:
381 -> 131 : ITER_STMT

[edge|1524]:
381 -> 3 : void

[edge|1525]:
381 -> 132 : (

[edge|1526]:
381 -> 133 : ASSIGN_STMT

[edge|1527]:
381 -> 76 : return

[edge|1528]:
381 -> 325 : {

[edge|1529]:
381 -> 384 : STMT

[edge|1530]:
381 -> 135 : INIT_STMT

[edge|1531]:
381 -> 7 : double

[edge|1532]:
381 -> 136 : CALL_STMT

[edge|1533]:
381 -> 137 : EXPR

[edge|1534]:
381 -> 138 : while

[edge|1535]:
381 -> 139 : RTN_STMT

[edge|1536]:
381 -> 82 : TYPE_SPEC

[edge|1537]:
381 -> 140 : TERM

[edge|1538]:
381 -> 141 : if

[edge|1539]:
381 -> 142 : ID

[edge|1540]:
381 -> 143 : FACTOR

[edge|1541]:
381 -> 144 : JUST_STMT

[edge|1542]:
381 -> 9 : float

[edge|1543]:
381 -> 385 : CODE_BLOCK

[edge|1544]:
381 -> 145 : for

[edge|1545]:
381 -> 146 : CONST

[edge|1546]:
381 -> 147 : IF_STMT

[edge|1547]:
381 -> 10 : char

