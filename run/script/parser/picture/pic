[node|0]: [begin]
TYPE_SPEC -> · float, ID
INIT_STMT -> · TYPE_SPEC ID, ;
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, int
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · void, ID
FUNC_LIST -> ·, #
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
CMPL_UNIT -> · INIT_STMT ; CMPL_UNIT , #
TYPE_SPEC -> · double, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, double
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, void
CMPL_UNIT -> · FUNC_LIST, #
PROGRAM -> · CMPL_UNIT, #
FUNC_LIST -> · FUNC_DEF FUNC_LIST, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, float

[node|1]: [begin]
PROGRAM -> CMPL_UNIT ·, #

[node|2]: [begin]
TYPE_SPEC -> double ·, ID

[node|3]: [begin]
TYPE_SPEC -> int ·, ID

[node|4]: [begin]
TYPE_SPEC -> void ·, ID

[node|5]: [begin]
TYPE_SPEC -> float ·, ID

[node|6]: [begin]
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, float
INIT_STMT -> TYPE_SPEC · ID = EXPR, ;
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, void
INIT_STMT -> TYPE_SPEC · ID, ;
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, double

[node|7]: [begin]
TYPE_SPEC -> · float, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, int
TYPE_SPEC -> · void, ID
FUNC_LIST -> FUNC_DEF · FUNC_LIST, #
FUNC_LIST -> ·, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, #
FUNC_LIST -> · FUNC_DEF FUNC_LIST, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, float
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, double
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, void

[node|8]: [begin]
CMPL_UNIT -> INIT_STMT · ; CMPL_UNIT, #

[node|9]: [begin]
CMPL_UNIT -> FUNC_LIST ·, #

[node|10]: [begin]
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, void
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, #
INIT_STMT -> TYPE_SPEC ID ·, ;
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, double
INIT_STMT -> TYPE_SPEC ID · = EXPR, ;
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, float

[node|11]: [begin]
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, float
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, void
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, double

[node|12]: [begin]
FUNC_LIST -> FUNC_DEF FUNC_LIST ·, #

[node|13]: [begin]
TYPE_SPEC -> · float, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, int
FUNC_LIST -> ·, #
CMPL_UNIT -> · INIT_STMT ; CMPL_UNIT , #
FUNC_LIST -> · FUNC_DEF FUNC_LIST, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, float
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, double
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, void
TYPE_SPEC -> · void, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, #
CMPL_UNIT -> · FUNC_LIST, #
INIT_STMT -> · TYPE_SPEC ID, ;
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
CMPL_UNIT -> INIT_STMT ; · CMPL_UNIT, #

[node|14]: [begin]
TYPE_SPEC -> · float, ID
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, double
TYPE_SPEC -> · void, ID
ARGUMENT -> · TYPE_SPEC ID, )
ARG_LIST -> · ARGUMENT, )
ARG_LIST -> · ARGUMENT , ARG_LIST, )
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, float
TYPE_SPEC -> · int, ID
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, int
TYPE_SPEC -> · double, ID
ARGUMENT -> · TYPE_SPEC ID, ,
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, #
ARG_LIST -> ·, )
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, void

[node|15]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *
INIT_STMT -> TYPE_SPEC ID = · EXPR, ;

[node|16]: [begin]
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, void
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, double
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, float

[node|17]: [begin]
CMPL_UNIT -> INIT_STMT ; CMPL_UNIT ·, #

[node|18]: [begin]
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, void
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, double
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, float
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, int

[node|19]: [begin]
ARGUMENT -> TYPE_SPEC · ID, )
ARGUMENT -> TYPE_SPEC · ID, ,

[node|20]: [begin]
ARG_LIST -> ARGUMENT · , ARG_LIST, )
ARG_LIST -> ARGUMENT ·, )

[node|21]: [begin]
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, ;

[node|22]: [begin]
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM -> FACTOR · TERM2, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, ;
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, +
TERM2 -> ·, +
TERM -> FACTOR · TERM2, +
TERM -> FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, ;

[node|23]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, -
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), -
FACTOR -> ID ·, *
FACTOR -> ID ·, ;
CALL_STMT -> ID · ( PARG_LIST ), ;
CALL_STMT -> ID · ( PARG_LIST ), *

[node|24]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), *
FACTOR -> ( · EXPR ), ;
FACTOR -> ( · EXPR ), /
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> ( · EXPR ), -
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> ( · EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|25]: [begin]
EXPR -> TERM · EXPR2, ;
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, ;

[node|26]: [begin]
INIT_STMT -> TYPE_SPEC ID = EXPR ·, ;

[node|27]: [begin]
FACTOR -> CONST ·, ;
FACTOR -> CONST ·, *
FACTOR -> CONST ·, +
FACTOR -> CONST ·, /
FACTOR -> CONST ·, -

[node|28]: [begin]
CODE_BLOCK -> · { STMT_LIST }, float
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, #
CODE_BLOCK -> · { STMT_LIST }, double
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, void
CODE_BLOCK -> · { STMT_LIST }, #
CODE_BLOCK -> · { STMT_LIST }, int
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, double
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, float
CODE_BLOCK -> · { STMT_LIST }, void

[node|29]: [begin]
ARGUMENT -> TYPE_SPEC ID ·, ,
ARGUMENT -> TYPE_SPEC ID ·, )

[node|30]: [begin]
TYPE_SPEC -> · float, ID
TYPE_SPEC -> · void, ID
ARGUMENT -> · TYPE_SPEC ID, )
ARG_LIST -> · ARGUMENT, )
ARG_LIST -> ARGUMENT , · ARG_LIST, )
ARG_LIST -> · ARGUMENT , ARG_LIST, )
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
ARGUMENT -> · TYPE_SPEC ID, ,
ARG_LIST -> ·, )

[node|31]: [begin]
TERM2 -> * · FACTOR TERM2, -
FACTOR -> · CONST, /
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ID, /
FACTOR -> · ID, -
TERM2 -> * · FACTOR TERM2, ;
FACTOR -> · CONST, -
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|32]: [begin]
TERM -> FACTOR TERM2 ·, ;
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, -

[node|33]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
TERM2 -> / · FACTOR TERM2, -
FACTOR -> · CONST, -
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
TERM2 -> / · FACTOR TERM2, +
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
TERM2 -> / · FACTOR TERM2, ;
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|34]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), ;
CALL_STMT -> ID ( · PARG_LIST ), *
CALL_STMT -> ID ( · PARG_LIST ), +
PARG_LIST -> ·, )
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), /
PARG_LIST -> · PARG , PARG_LIST, )
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), -
PARG_LIST -> · PARG, )

[node|35]: [begin]
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, )
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, -

[node|36]: [begin]
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, )
TERM2 -> · / FACTOR TERM2, -
TERM -> FACTOR · TERM2, )
TERM2 -> ·, )
TERM2 -> · / FACTOR TERM2, +
TERM2 -> ·, +
TERM2 -> · / FACTOR TERM2, )
TERM -> FACTOR · TERM2, +
TERM -> FACTOR · TERM2, -

[node|37]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), -
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), )
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, )

[node|38]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), *
FACTOR -> ( · EXPR ), /
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> ( · EXPR ), -
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> ( · EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> ( · EXPR ), )
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|39]: [begin]
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> ·, )
EXPR2 -> · - TERM EXPR2, )
EXPR -> TERM · EXPR2, )

[node|40]: [begin]
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), ;
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), /

[node|41]: [begin]
FACTOR -> CONST ·, )
FACTOR -> CONST ·, *
FACTOR -> CONST ·, +
FACTOR -> CONST ·, /
FACTOR -> CONST ·, -

[node|42]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
EXPR2 -> + · TERM EXPR2, ;
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|43]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
EXPR2 -> - · TERM EXPR2, ;
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|44]: [begin]
EXPR -> TERM EXPR2 ·, ;

[node|45]: [begin]
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, #
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, void
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, float
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, int
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, double

[node|46]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
CODE_BLOCK -> { · STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
CODE_BLOCK -> { · STMT_LIST }, #
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
CODE_BLOCK -> { · STMT_LIST }, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> { · STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
CODE_BLOCK -> { · STMT_LIST }, void
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|47]: [begin]
ARG_LIST -> ARGUMENT , ARG_LIST ·, )

[node|48]: [begin]
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM2 -> * FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, ;
TERM2 -> * FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> * FACTOR · TERM2, ;
TERM2 -> · / FACTOR TERM2, +
TERM2 -> ·, +
TERM2 -> · / FACTOR TERM2, ;

[node|49]: [begin]
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM2 -> / FACTOR · TERM2, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, ;
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, +
TERM2 -> ·, +
TERM2 -> / FACTOR · TERM2, -
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · / FACTOR TERM2, ;

[node|50]: [begin]
PARG_LIST -> PARG · , PARG_LIST, )
PARG_LIST -> PARG ·, )

[node|51]: [begin]
PARG -> ID ·, )
PARG -> ID ·, ,

[node|52]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), ;
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), /

[node|53]: [begin]
TERM2 -> * · FACTOR TERM2, -
FACTOR -> · CONST, /
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM2 -> * · FACTOR TERM2, )
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|54]: [begin]
TERM -> FACTOR TERM2 ·, )
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, -

[node|55]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
TERM2 -> / · FACTOR TERM2, )
FACTOR -> · CALL_STMT, )
TERM2 -> / · FACTOR TERM2, -
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM2 -> / · FACTOR TERM2, +
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|56]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), )
CALL_STMT -> ID ( · PARG_LIST ), *
CALL_STMT -> ID ( · PARG_LIST ), +
PARG_LIST -> ·, )
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), /
PARG_LIST -> · PARG , PARG_LIST, )
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), -
PARG_LIST -> · PARG, )

[node|57]: [begin]
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), )
FACTOR -> ( EXPR · ), /

[node|58]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
EXPR2 -> + · TERM EXPR2, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|59]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
EXPR2 -> - · TERM EXPR2, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|60]: [begin]
EXPR -> TERM EXPR2 ·, )

[node|61]: [begin]
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, ;
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, -

[node|62]: [begin]
EXPR2 -> + TERM · EXPR2, ;
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, ;

[node|63]: [begin]
EXPR2 -> ·, ;
EXPR2 -> - TERM · EXPR2, ;
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, ;

[node|64]: [begin]
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, void
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, return
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, return
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, }
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, double
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, float
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, int
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, ID
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, float
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, while

[node|65]: [begin]
ITER_STMT -> while · ( STMT ) CODE_BLOCK, float
ITER_STMT -> while · ( STMT ) STMT, void
ITER_STMT -> while · ( STMT ) CODE_BLOCK, return
ITER_STMT -> while · ( STMT ) CODE_BLOCK, void
ITER_STMT -> while · ( STMT ) CODE_BLOCK, }
ITER_STMT -> while · ( STMT ) STMT, return
ITER_STMT -> while · ( STMT ) STMT, float
ITER_STMT -> while · ( STMT ) CODE_BLOCK, double
ITER_STMT -> while · ( STMT ) STMT, if
ITER_STMT -> while · ( STMT ) STMT, while
ITER_STMT -> while · ( STMT ) STMT, ID
ITER_STMT -> while · ( STMT ) CODE_BLOCK, int
ITER_STMT -> while · ( STMT ) CODE_BLOCK, ID
ITER_STMT -> while · ( STMT ) CODE_BLOCK, for
ITER_STMT -> while · ( STMT ) CODE_BLOCK, if
ITER_STMT -> while · ( STMT ) STMT, for
ITER_STMT -> while · ( STMT ) STMT, int
ITER_STMT -> while · ( STMT ) CODE_BLOCK, while
ITER_STMT -> while · ( STMT ) STMT, double
ITER_STMT -> while · ( STMT ) STMT, }

[node|66]: [begin]
ASSIGN_STMT -> ID · = EXPR, ;

[node|67]: [begin]
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if · ( STMT ) STMT ;, ID
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if · ( STMT ) CODE_BLOCK, void
IF_STMT -> if · ( STMT ) STMT ;, }
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> if · ( STMT ) CODE_BLOCK, return
IF_STMT -> if · ( STMT ) STMT ;, float
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, void
IF_STMT -> if · ( STMT ) CODE_BLOCK, if
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> if · ( STMT ) CODE_BLOCK, for
IF_STMT -> if · ( STMT ) STMT ;, return
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, double
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, while
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> if · ( STMT ) STMT ;, for
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, ID
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> if · ( STMT ) STMT ;, void
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> if · ( STMT ) STMT ;, double
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> if · ( STMT ) CODE_BLOCK, double
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, return
IF_STMT -> if · ( STMT ) CODE_BLOCK, while
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, for
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, double
IF_STMT -> if · ( STMT ) CODE_BLOCK, ID
IF_STMT -> if · ( STMT ) STMT ;, if
IF_STMT -> if · ( STMT ) CODE_BLOCK, int
IF_STMT -> if · ( STMT ) CODE_BLOCK, float
IF_STMT -> if · ( STMT ) STMT ;, while
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, void
IF_STMT -> if · ( STMT ) STMT ;, int
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> if · ( STMT ) CODE_BLOCK, }
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, return
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, float

[node|68]: [begin]
INIT_STMT -> TYPE_SPEC · ID, ;
INIT_STMT -> TYPE_SPEC · ID = EXPR, ;

[node|69]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
STMT_LIST -> ITER_STMT · STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|70]: [begin]
STMT_LIST -> RTN_STMT · ; STMT_LIST, }

[node|71]: [begin]
STMT_LIST -> INIT_STMT · ; STMT_LIST, }

[node|72]: [begin]
STMT_LIST -> ASSIGN_STMT · ; STMT_LIST, }

[node|73]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
RTN_STMT -> return · EXPR, ;
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|74]: [begin]
CODE_BLOCK -> { STMT_LIST · }, double
CODE_BLOCK -> { STMT_LIST · }, float
CODE_BLOCK -> { STMT_LIST · }, int
CODE_BLOCK -> { STMT_LIST · }, #
CODE_BLOCK -> { STMT_LIST · }, void

[node|75]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
STMT_LIST -> IF_STMT · STMT_LIST, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|76]: [begin]
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, ;
TERM2 -> * FACTOR TERM2 ·, +

[node|77]: [begin]
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, ;
TERM2 -> / FACTOR TERM2 ·, +

[node|78]: [begin]
PARG_LIST -> ·, )
PARG -> · ID, )
PARG_LIST -> PARG , · PARG_LIST, )
PARG_LIST -> · PARG , PARG_LIST, )
PARG -> · ID, ,
PARG_LIST -> · PARG, )

[node|79]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, ;
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, +

[node|80]: [begin]
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM2 -> * FACTOR · TERM2, )
TERM2 -> · * FACTOR TERM2, )
TERM2 -> * FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, -
TERM2 -> * FACTOR · TERM2, +
TERM2 -> ·, )
TERM2 -> · / FACTOR TERM2, +
TERM2 -> ·, +
TERM2 -> · / FACTOR TERM2, )

[node|81]: [begin]
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, )
TERM2 -> · / FACTOR TERM2, -
TERM2 -> ·, )
TERM2 -> · / FACTOR TERM2, +
TERM2 -> ·, +
TERM2 -> / FACTOR · TERM2, )
TERM2 -> · / FACTOR TERM2, )
TERM2 -> / FACTOR · TERM2, -
TERM2 -> / FACTOR · TERM2, +

[node|82]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), )
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), /

[node|83]: [begin]
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, )

[node|84]: [begin]
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> ·, )
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> + TERM · EXPR2, )

[node|85]: [begin]
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> ·, )
EXPR2 -> - TERM · EXPR2, )

[node|86]: [begin]
EXPR2 -> + TERM EXPR2 ·, ;

[node|87]: [begin]
EXPR2 -> - TERM EXPR2 ·, ;

[node|88]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, float
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, void
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
JUST_STMT -> · EXPR == EXPR, ;
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, }
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, while
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT -> · IF_STMT, ;
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, ID
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, }
FACTOR -> · ( EXPR ), *
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, double
TYPE_SPEC -> · float, ID
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, double
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, for
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, int
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, while
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, for
FACTOR -> · ID, +
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, if
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, void
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, return
FACTOR -> · CONST, +
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, int
CALL_STMT -> · ID ( PARG_LIST ), /
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, ID
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;

[node|89]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
ITER_STMT -> while ( · STMT ) STMT, void
FACTOR -> · CALL_STMT, )
ITER_STMT -> while ( · STMT ) STMT, float
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
ITER_STMT -> while ( · STMT ) STMT, return
ITER_STMT -> while ( · STMT ) CODE_BLOCK, double
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
ITER_STMT -> while ( · STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
ITER_STMT -> while ( · STMT ) CODE_BLOCK, while
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
ITER_STMT -> while ( · STMT ) STMT, int
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
ITER_STMT -> while ( · STMT ) CODE_BLOCK, float
FACTOR -> · CONST, -
FACTOR -> · ID, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
ITER_STMT -> while ( · STMT ) CODE_BLOCK, for
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
ITER_STMT -> while ( · STMT ) CODE_BLOCK, void
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
ITER_STMT -> while ( · STMT ) CODE_BLOCK, if
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
ITER_STMT -> while ( · STMT ) CODE_BLOCK, ID
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
ITER_STMT -> while ( · STMT ) STMT, for
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
ITER_STMT -> while ( · STMT ) CODE_BLOCK, int
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ITER_STMT -> while ( · STMT ) STMT, while
FACTOR -> · ID, <=
FACTOR -> · ID, >=
ITER_STMT -> while ( · STMT ) CODE_BLOCK, }
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
JUST_STMT -> · EXPR != EXPR, )
ITER_STMT -> while ( · STMT ) STMT, double
FACTOR -> · ID, +
ITER_STMT -> while ( · STMT ) CODE_BLOCK, return
STMT -> · ASSIGN_STMT, )
ITER_STMT -> while ( · STMT ) STMT, ID
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
ITER_STMT -> while ( · STMT ) STMT, if
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )

[node|90]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
ASSIGN_STMT -> ID = · EXPR, ;
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|91]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> if ( · STMT ) CODE_BLOCK, void
FACTOR -> · CALL_STMT, )
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, double
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, void
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, return
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
IF_STMT -> if ( · STMT ) STMT ;, float
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, double
STMT -> · RTN_STMT, )
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
IF_STMT -> if ( · STMT ) STMT ;, }
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, ID
FACTOR -> · ID, *
IF_STMT -> if ( · STMT ) CODE_BLOCK, int
FACTOR -> · CALL_STMT, !=
IF_STMT -> if ( · STMT ) STMT ;, if
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> if ( · STMT ) STMT ;, return
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, return
IF_STMT -> if ( · STMT ) CODE_BLOCK, for
FACTOR -> · ID, )
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, for
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> if ( · STMT ) STMT ;, int
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, return
JUST_STMT -> · EXPR < EXPR, )
IF_STMT -> if ( · STMT ) STMT ;, while
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, if
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, for
FACTOR -> · ( EXPR ), *
IF_STMT -> if ( · STMT ) CODE_BLOCK, ID
IF_STMT -> if ( · STMT ) CODE_BLOCK, return
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, ID
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, float
FACTOR -> · CALL_STMT, ==
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, void
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
IF_STMT -> if ( · STMT ) STMT ;, for
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, double
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, ID
IF_STMT -> if ( · STMT ) CODE_BLOCK, double
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, }
IF_STMT -> if ( · STMT ) CODE_BLOCK, while
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, void
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, if
STMT -> · ITER_STMT, )
IF_STMT -> if ( · STMT ) STMT ;, ID
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
IF_STMT -> if ( · STMT ) STMT ;, void
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, int
FACTOR -> · ID, <=
FACTOR -> · ID, >=
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, if
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, }
JUST_STMT -> · EXPR != EXPR, )
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, int
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, for
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
IF_STMT -> if ( · STMT ) CODE_BLOCK, float
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> if ( · STMT ) STMT ;, double
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, while
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, float
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, while
IF_STMT -> if ( · STMT ) CODE_BLOCK, }
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, while
TYPE_SPEC -> · double, ID
IF_STMT -> if ( · STMT ) CODE_BLOCK, if
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, return

[node|92]: [begin]
INIT_STMT -> TYPE_SPEC ID ·, ;
INIT_STMT -> TYPE_SPEC ID · = EXPR, ;

[node|93]: [begin]
STMT_LIST -> ITER_STMT STMT_LIST ·, }

[node|94]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
STMT_LIST -> RTN_STMT ; · STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|95]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
STMT_LIST -> INIT_STMT ; · STMT_LIST, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|96]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
STMT_LIST -> ASSIGN_STMT ; · STMT_LIST, }
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|97]: [begin]
RTN_STMT -> return EXPR ·, ;

[node|98]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, void
CODE_BLOCK -> { STMT_LIST } ·, #
CODE_BLOCK -> { STMT_LIST } ·, int
CODE_BLOCK -> { STMT_LIST } ·, double
CODE_BLOCK -> { STMT_LIST } ·, float

[node|99]: [begin]
STMT_LIST -> IF_STMT STMT_LIST ·, }

[node|100]: [begin]
PARG_LIST -> PARG , PARG_LIST ·, )

[node|101]: [begin]
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, )
TERM2 -> * FACTOR TERM2 ·, +

[node|102]: [begin]
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, )
TERM2 -> / FACTOR TERM2 ·, +

[node|103]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, )
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, +

[node|104]: [begin]
EXPR2 -> + TERM EXPR2 ·, )

[node|105]: [begin]
EXPR2 -> - TERM EXPR2 ·, )

[node|106]: [begin]
FACTOR -> CALL_STMT ·, <=
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, >=
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, ==
FACTOR -> CALL_STMT ·, >
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, <
FACTOR -> CALL_STMT ·, !=
FACTOR -> CALL_STMT ·, ;

[node|107]: [begin]
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> ·, <
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> ·, >
TERM2 -> · * FACTOR TERM2, +
TERM -> FACTOR · TERM2, >=
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> ·, ==
TERM2 -> · * FACTOR TERM2, -
TERM -> FACTOR · TERM2, >
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <=
TERM -> FACTOR · TERM2, ;
TERM2 -> · / FACTOR TERM2, >
TERM -> FACTOR · TERM2, ==
TERM -> FACTOR · TERM2, -
TERM2 -> ·, <=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> ·, ;
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, >
TERM -> FACTOR · TERM2, <=
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, +
TERM -> FACTOR · TERM2, <
TERM2 -> ·, +
TERM -> FACTOR · TERM2, !=
TERM -> FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, !=
TERM2 -> · / FACTOR TERM2, ;

[node|108]: [begin]
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, return
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, }
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, ID
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, void
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, if
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, for
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, return
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, float
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, float
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, if
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, double
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, while
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, ID
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, void
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, int

[node|109]: [begin]
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, ;
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, ;

[node|110]: [begin]
ITER_STMT -> while · ( STMT ) CODE_BLOCK, ;
ITER_STMT -> while · ( STMT ) STMT, ;

[node|111]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), <=
FACTOR -> ID ·, ==
FACTOR -> ID ·, >
CALL_STMT -> ID · ( PARG_LIST ), <
CALL_STMT -> ID · ( PARG_LIST ), -
FACTOR -> ID ·, ;
ASSIGN_STMT -> ID · = EXPR, ;
CALL_STMT -> ID · ( PARG_LIST ), >=
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, !=
CALL_STMT -> ID · ( PARG_LIST ), ;
FACTOR -> ID ·, <
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, >=
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), !=
FACTOR -> ID ·, <=
CALL_STMT -> ID · ( PARG_LIST ), ==
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), >

[node|112]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> ( · EXPR ), !=
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), *
FACTOR -> ( · EXPR ), ;
FACTOR -> ( · EXPR ), <=
FACTOR -> ( · EXPR ), /
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> ( · EXPR ), >=
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> ( · EXPR ), >
FACTOR -> ( · EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> ( · EXPR ), <
FACTOR -> ( · EXPR ), -
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> ( · EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|113]: [begin]
IF_STMT -> if · ( STMT ) STMT ;, ;
IF_STMT -> if · ( STMT ) CODE_BLOCK, ;
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, ;
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, ;
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, ;
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, ;

[node|114]: [begin]
STMT -> ITER_STMT ·, ;

[node|115]: [begin]
STMT -> RTN_STMT ·, ;

[node|116]: [begin]
STMT -> INIT_STMT ·, ;

[node|117]: [begin]
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> ·, !=
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> ·, ==
EXPR -> TERM · EXPR2, <=
EXPR2 -> ·, >=
EXPR2 -> ·, >
EXPR -> TERM · EXPR2, <
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, >
EXPR -> TERM · EXPR2, !=
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> ·, <=
EXPR2 -> ·, ;
EXPR -> TERM · EXPR2, >=
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR -> TERM · EXPR2, ==
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, >=
EXPR -> TERM · EXPR2, >
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, !=
EXPR -> TERM · EXPR2, ;
EXPR2 -> ·, <

[node|118]: [begin]
STMT -> ASSIGN_STMT ·, ;

[node|119]: [begin]
STMT -> JUST_STMT ·, ;

[node|120]: [begin]
STMT -> IF_STMT ·, ;

[node|121]: [begin]
JUST_STMT -> EXPR · >= EXPR, ;
JUST_STMT -> EXPR · > EXPR, ;
JUST_STMT -> EXPR · == EXPR, ;
STMT -> EXPR ·, ;
JUST_STMT -> EXPR · != EXPR, ;
JUST_STMT -> EXPR · < EXPR, ;
JUST_STMT -> EXPR · <= EXPR, ;

[node|122]: [begin]
FACTOR -> CONST ·, !=
FACTOR -> CONST ·, ==
FACTOR -> CONST ·, ;
FACTOR -> CONST ·, *
FACTOR -> CONST ·, <
FACTOR -> CONST ·, +
FACTOR -> CONST ·, >=
FACTOR -> CONST ·, /
FACTOR -> CONST ·, >
FACTOR -> CONST ·, <=
FACTOR -> CONST ·, -

[node|123]: [begin]
FACTOR -> CALL_STMT ·, <=
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, >=
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, ==
FACTOR -> CALL_STMT ·, >
FACTOR -> CALL_STMT ·, )
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, <
FACTOR -> CALL_STMT ·, !=

[node|124]: [begin]
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> ·, <
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> ·, >
TERM2 -> · * FACTOR TERM2, +
TERM -> FACTOR · TERM2, >=
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> ·, ==
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, )
TERM -> FACTOR · TERM2, >
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <=
TERM -> FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, >
TERM -> FACTOR · TERM2, ==
TERM2 -> ·, <=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, !=
TERM -> FACTOR · TERM2, )
TERM2 -> · * FACTOR TERM2, >
TERM -> FACTOR · TERM2, <=
TERM2 -> ·, )
TERM2 -> · / FACTOR TERM2, +
TERM -> FACTOR · TERM2, <
TERM2 -> ·, +
TERM -> FACTOR · TERM2, !=
TERM2 -> · / FACTOR TERM2, )
TERM -> FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, !=

[node|125]: [begin]
ITER_STMT -> while ( STMT · ) STMT, void
ITER_STMT -> while ( STMT · ) CODE_BLOCK, void
ITER_STMT -> while ( STMT · ) CODE_BLOCK, return
ITER_STMT -> while ( STMT · ) STMT, return
ITER_STMT -> while ( STMT · ) CODE_BLOCK, float
ITER_STMT -> while ( STMT · ) STMT, }
ITER_STMT -> while ( STMT · ) STMT, double
ITER_STMT -> while ( STMT · ) CODE_BLOCK, if
ITER_STMT -> while ( STMT · ) CODE_BLOCK, while
ITER_STMT -> while ( STMT · ) CODE_BLOCK, ID
ITER_STMT -> while ( STMT · ) STMT, ID
ITER_STMT -> while ( STMT · ) CODE_BLOCK, for
ITER_STMT -> while ( STMT · ) STMT, if
ITER_STMT -> while ( STMT · ) STMT, for
ITER_STMT -> while ( STMT · ) STMT, int
ITER_STMT -> while ( STMT · ) STMT, float
ITER_STMT -> while ( STMT · ) CODE_BLOCK, int
ITER_STMT -> while ( STMT · ) CODE_BLOCK, double
ITER_STMT -> while ( STMT · ) CODE_BLOCK, }
ITER_STMT -> while ( STMT · ) STMT, while

[node|126]: [begin]
ITER_STMT -> for · ( STMT ; STMT ; STMT ) CODE_BLOCK, )
ITER_STMT -> for · ( STMT ; STMT ; STMT ) STMT, )

[node|127]: [begin]
ITER_STMT -> while · ( STMT ) STMT, )
ITER_STMT -> while · ( STMT ) CODE_BLOCK, )

[node|128]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), <=
FACTOR -> ID ·, ==
FACTOR -> ID ·, >
CALL_STMT -> ID · ( PARG_LIST ), <
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), >=
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, !=
FACTOR -> ID ·, <
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, >=
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), !=
FACTOR -> ID ·, <=
FACTOR -> ID ·, )
ASSIGN_STMT -> ID · = EXPR, )
CALL_STMT -> ID · ( PARG_LIST ), ==
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), >
CALL_STMT -> ID · ( PARG_LIST ), )

[node|129]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> ( · EXPR ), !=
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), *
FACTOR -> ( · EXPR ), <=
FACTOR -> ( · EXPR ), /
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> ( · EXPR ), >=
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> ( · EXPR ), >
FACTOR -> ( · EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> ( · EXPR ), <
FACTOR -> ( · EXPR ), -
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> ( · EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> ( · EXPR ), )
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|130]: [begin]
IF_STMT -> if · ( STMT ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> if · ( STMT ) CODE_BLOCK, )
IF_STMT -> if · ( STMT ) CODE_BLOCK else IF_STMT, )
IF_STMT -> if · ( STMT ) STMT ; else IF_STMT, )
IF_STMT -> if · ( STMT ) STMT ;, )
IF_STMT -> if · ( STMT ) STMT ; else CODE_BLOCK, )

[node|131]: [begin]
INIT_STMT -> TYPE_SPEC · ID, )
INIT_STMT -> TYPE_SPEC · ID = EXPR, )

[node|132]: [begin]
STMT -> ITER_STMT ·, )

[node|133]: [begin]
STMT -> RTN_STMT ·, )

[node|134]: [begin]
STMT -> INIT_STMT ·, )

[node|135]: [begin]
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> ·, !=
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> ·, ==
EXPR -> TERM · EXPR2, <=
EXPR2 -> ·, >=
EXPR2 -> ·, >
EXPR -> TERM · EXPR2, <
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, >
EXPR -> TERM · EXPR2, !=
EXPR2 -> ·, )
EXPR2 -> ·, <=
EXPR2 -> · + TERM EXPR2, )
EXPR -> TERM · EXPR2, >=
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR -> TERM · EXPR2, ==
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, >=
EXPR -> TERM · EXPR2, >
EXPR2 -> · - TERM EXPR2, ==
EXPR -> TERM · EXPR2, )
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> ·, <

[node|136]: [begin]
STMT -> ASSIGN_STMT ·, )

[node|137]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
RTN_STMT -> return · EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|138]: [begin]
STMT -> JUST_STMT ·, )

[node|139]: [begin]
STMT -> IF_STMT ·, )

[node|140]: [begin]
STMT -> EXPR ·, )
JUST_STMT -> EXPR · < EXPR, )
JUST_STMT -> EXPR · <= EXPR, )
JUST_STMT -> EXPR · > EXPR, )
JUST_STMT -> EXPR · == EXPR, )
JUST_STMT -> EXPR · != EXPR, )
JUST_STMT -> EXPR · >= EXPR, )

[node|141]: [begin]
FACTOR -> CONST ·, !=
FACTOR -> CONST ·, )
FACTOR -> CONST ·, ==
FACTOR -> CONST ·, *
FACTOR -> CONST ·, <
FACTOR -> CONST ·, +
FACTOR -> CONST ·, >=
FACTOR -> CONST ·, /
FACTOR -> CONST ·, >
FACTOR -> CONST ·, <=
FACTOR -> CONST ·, -

[node|142]: [begin]
ASSIGN_STMT -> ID = EXPR ·, ;

[node|143]: [begin]
IF_STMT -> if ( STMT · ) STMT ;, float
IF_STMT -> if ( STMT · ) STMT ;, double
IF_STMT -> if ( STMT · ) STMT ;, while
IF_STMT -> if ( STMT · ) CODE_BLOCK, int
IF_STMT -> if ( STMT · ) CODE_BLOCK, return
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, float
IF_STMT -> if ( STMT · ) STMT ;, }
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, for
IF_STMT -> if ( STMT · ) CODE_BLOCK, for
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, float
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, while
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> if ( STMT · ) CODE_BLOCK, void
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, double
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, for
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, if
IF_STMT -> if ( STMT · ) STMT ;, int
IF_STMT -> if ( STMT · ) STMT ;, return
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if ( STMT · ) STMT ;, if
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, for
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, ID
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, void
IF_STMT -> if ( STMT · ) CODE_BLOCK, while
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, return
IF_STMT -> if ( STMT · ) CODE_BLOCK, float
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, while
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if ( STMT · ) STMT ;, ID
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, return
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, void
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, }
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, if
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, int
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, if
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> if ( STMT · ) STMT ;, void
IF_STMT -> if ( STMT · ) STMT ;, for
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, double
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, }
IF_STMT -> if ( STMT · ) CODE_BLOCK, double
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, void
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, float
IF_STMT -> if ( STMT · ) CODE_BLOCK, ID
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, while
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, }
IF_STMT -> if ( STMT · ) CODE_BLOCK, }
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, double
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, ID
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, ID
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, int
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, return
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, int
IF_STMT -> if ( STMT · ) CODE_BLOCK, if

[node|144]: [begin]
STMT_LIST -> RTN_STMT ; STMT_LIST ·, }

[node|145]: [begin]
STMT_LIST -> INIT_STMT ; STMT_LIST ·, }

[node|146]: [begin]
STMT_LIST -> ASSIGN_STMT ; STMT_LIST ·, }

[node|147]: [begin]
TERM2 -> * · FACTOR TERM2, <
FACTOR -> · CONST, /
TERM2 -> * · FACTOR TERM2, +
TERM2 -> * · FACTOR TERM2, -
FACTOR -> · ID, /
FACTOR -> · ID, >=
FACTOR -> · ID, <=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, >
FACTOR -> · ID, <
FACTOR -> · ID, -
TERM2 -> * · FACTOR TERM2, <=
FACTOR -> · CONST, >=
TERM2 -> * · FACTOR TERM2, ;
FACTOR -> · CONST, <
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, ==
FACTOR -> · ID, +
TERM2 -> * · FACTOR TERM2, >
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CALL_STMT, >=
FACTOR -> · ( EXPR ), <=
FACTOR -> · CONST, >
FACTOR -> · ( EXPR ), ;
CALL_STMT -> · ID ( PARG_LIST ), >=
TERM2 -> * · FACTOR TERM2, !=
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), <=
FACTOR -> · CONST, ;
FACTOR -> · CALL_STMT, <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), !=
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ID, !=
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TERM2 -> * · FACTOR TERM2, ==
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, /
TERM2 -> * · FACTOR TERM2, >=
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, !=
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|148]: [begin]
TERM -> FACTOR TERM2 ·, ;
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, !=
TERM -> FACTOR TERM2 ·, >
TERM -> FACTOR TERM2 ·, ==
TERM -> FACTOR TERM2 ·, >=
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, <=
TERM -> FACTOR TERM2 ·, <

[node|149]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, <=
FACTOR -> · ID, /
FACTOR -> · ID, >=
FACTOR -> · ID, >
FACTOR -> · ID, ==
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, <
FACTOR -> · ID, -
FACTOR -> · CONST, >=
TERM2 -> / · FACTOR TERM2, >
TERM2 -> / · FACTOR TERM2, <
TERM2 -> / · FACTOR TERM2, -
FACTOR -> · CONST, <
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, ==
FACTOR -> · ID, +
TERM2 -> / · FACTOR TERM2, !=
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CONST, !=
FACTOR -> · ( EXPR ), <=
FACTOR -> · CALL_STMT, >=
TERM2 -> / · FACTOR TERM2, >=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, >
FACTOR -> · ( EXPR ), ;
CALL_STMT -> · ID ( PARG_LIST ), >=
TERM2 -> / · FACTOR TERM2, +
TERM2 -> / · FACTOR TERM2, ==
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
TERM2 -> / · FACTOR TERM2, ;
CALL_STMT -> · ID ( PARG_LIST ), <
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), <=
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), !=
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
TERM2 -> / · FACTOR TERM2, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, !=
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|150]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, for
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, float
JUST_STMT -> · EXPR == EXPR, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, ID
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, return
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, float
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, if
FACTOR -> · ID, >
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, if
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, int
STMT -> · IF_STMT, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, while
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, for
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, void
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · ID, <
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, ID
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, int
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, }
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, }
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, void
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, return
FACTOR -> · ID, +
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, double
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;

[node|151]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
JUST_STMT -> · EXPR == EXPR, ;
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, ;
STMT -> · IF_STMT, ;
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, ;
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;

[node|152]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
ITER_STMT -> while ( · STMT ) STMT, ;
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
FACTOR -> · ID, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
JUST_STMT -> · EXPR != EXPR, )
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
ITER_STMT -> while ( · STMT ) CODE_BLOCK, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )

[node|153]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), ;
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), <
CALL_STMT -> ID ( · PARG_LIST ), -
CALL_STMT -> ID ( · PARG_LIST ), !=
CALL_STMT -> ID ( · PARG_LIST ), ==
CALL_STMT -> ID ( · PARG_LIST ), >=
CALL_STMT -> ID ( · PARG_LIST ), /
CALL_STMT -> ID ( · PARG_LIST ), >
CALL_STMT -> ID ( · PARG_LIST ), *
PARG_LIST -> ·, )
PARG -> · ID, ,
PARG -> · ID, )
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), <=
PARG_LIST -> · PARG, )

[node|154]: [begin]
FACTOR -> ( EXPR · ), ==
FACTOR -> ( EXPR · ), >
FACTOR -> ( EXPR · ), !=
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), ;
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), <
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), <=
FACTOR -> ( EXPR · ), >=
FACTOR -> ( EXPR · ), /

[node|155]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
IF_STMT -> if ( · STMT ) STMT ;, ;
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
JUST_STMT -> · EXPR != EXPR, )
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
IF_STMT -> if ( · STMT ) CODE_BLOCK, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, ;
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )

[node|156]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
EXPR2 -> + · TERM EXPR2, >=
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
EXPR2 -> + · TERM EXPR2, <
FACTOR -> · CALL_STMT, !=
EXPR2 -> + · TERM EXPR2, ==
EXPR2 -> + · TERM EXPR2, >
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
FACTOR -> · ID, -
EXPR2 -> + · TERM EXPR2, <=
EXPR2 -> + · TERM EXPR2, ;
FACTOR -> · ID, +
EXPR2 -> + · TERM EXPR2, !=
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;

[node|157]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
EXPR2 -> - · TERM EXPR2, <=
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
EXPR2 -> - · TERM EXPR2, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
EXPR2 -> - · TERM EXPR2, >
FACTOR -> · CALL_STMT, ==
EXPR2 -> - · TERM EXPR2, <
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
EXPR2 -> - · TERM EXPR2, >=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), >
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
FACTOR -> · ID, -
EXPR2 -> - · TERM EXPR2, !=
FACTOR -> · ID, +
TERM -> · FACTOR TERM2 , <
EXPR2 -> - · TERM EXPR2, ==
FACTOR -> · CALL_STMT, +
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;

[node|158]: [begin]
EXPR -> TERM EXPR2 ·, !=
EXPR -> TERM EXPR2 ·, >
EXPR -> TERM EXPR2 ·, <
EXPR -> TERM EXPR2 ·, ==
EXPR -> TERM EXPR2 ·, >=
EXPR -> TERM EXPR2 ·, <=
EXPR -> TERM EXPR2 ·, ;

[node|159]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
JUST_STMT -> EXPR >= · EXPR, ;
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|160]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
JUST_STMT -> EXPR > · EXPR, ;
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|161]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
JUST_STMT -> EXPR == · EXPR, ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|162]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
JUST_STMT -> EXPR < · EXPR, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|163]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
JUST_STMT -> EXPR <= · EXPR, ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|164]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · ID, -
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, +
CALL_STMT -> · ID ( PARG_LIST ), +
JUST_STMT -> EXPR != · EXPR, ;
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · ID, *
FACTOR -> · ID, ;
FACTOR -> · ( EXPR ), *

[node|165]: [begin]
TERM2 -> * · FACTOR TERM2, <
FACTOR -> · CONST, /
TERM2 -> * · FACTOR TERM2, +
TERM2 -> * · FACTOR TERM2, -
FACTOR -> · ID, /
FACTOR -> · ID, >=
FACTOR -> · ID, <=
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, >
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, <
FACTOR -> · ID, -
TERM2 -> * · FACTOR TERM2, <=
FACTOR -> · CONST, >=
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, <
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, ==
FACTOR -> · ID, +
TERM2 -> * · FACTOR TERM2, >
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CONST, !=
FACTOR -> · ID, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CALL_STMT, >=
FACTOR -> · ( EXPR ), <=
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TERM2 -> * · FACTOR TERM2, !=
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), <=
FACTOR -> · CALL_STMT, <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), !=
TERM2 -> * · FACTOR TERM2, )
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ID, !=
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TERM2 -> * · FACTOR TERM2, ==
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, /
TERM2 -> * · FACTOR TERM2, >=
FACTOR -> · ( EXPR ), >=
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, !=
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|166]: [begin]
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, !=
TERM -> FACTOR TERM2 ·, >
TERM -> FACTOR TERM2 ·, ==
TERM -> FACTOR TERM2 ·, >=
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, )
TERM -> FACTOR TERM2 ·, <=
TERM -> FACTOR TERM2 ·, <

[node|167]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, <=
FACTOR -> · ID, /
FACTOR -> · ID, >=
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, >
FACTOR -> · ID, ==
CALL_STMT -> · ID ( PARG_LIST ), )
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, <
FACTOR -> · ID, -
FACTOR -> · CONST, >=
TERM2 -> / · FACTOR TERM2, >
TERM2 -> / · FACTOR TERM2, )
FACTOR -> · CALL_STMT, )
TERM2 -> / · FACTOR TERM2, <
TERM2 -> / · FACTOR TERM2, -
FACTOR -> · CONST, <
FACTOR -> · CONST, -
FACTOR -> · CALL_STMT, ==
FACTOR -> · ID, +
TERM2 -> / · FACTOR TERM2, !=
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · ID, )
FACTOR -> · CONST, !=
FACTOR -> · ( EXPR ), <=
FACTOR -> · CALL_STMT, >=
TERM2 -> / · FACTOR TERM2, >=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TERM2 -> / · FACTOR TERM2, +
TERM2 -> / · FACTOR TERM2, ==
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), <
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), !=
CALL_STMT -> · ID ( PARG_LIST ), /
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · ID, !=
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
FACTOR -> · ( EXPR ), ==
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
FACTOR -> · CONST, <=
FACTOR -> · CALL_STMT, /
TERM2 -> / · FACTOR TERM2, <=
FACTOR -> · ( EXPR ), /
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, !=
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|168]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, }
STMT -> · ASSIGN_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
ITER_STMT -> while ( STMT ) · CODE_BLOCK, ID
STMT -> · IF_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), }
INIT_STMT -> · TYPE_SPEC ID = EXPR, if
STMT -> · INIT_STMT, if
STMT -> · ASSIGN_STMT, ID
EXPR -> · TERM EXPR2, int
JUST_STMT -> · EXPR != EXPR, return
CODE_BLOCK -> · { STMT_LIST }, for
STMT -> · JUST_STMT, while
INIT_STMT -> · TYPE_SPEC ID, while
FACTOR -> · ID, void
JUST_STMT -> · EXPR >= EXPR, return
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, double
TERM -> · FACTOR TERM2 , while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
FACTOR -> · CONST, ==
RTN_STMT -> · return EXPR, for
JUST_STMT -> · EXPR <= EXPR, while
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), ==
JUST_STMT -> · EXPR > EXPR, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
ITER_STMT -> while ( STMT ) · STMT, }
FACTOR -> · CALL_STMT, !=
STMT -> · JUST_STMT, ID
INIT_STMT -> · TYPE_SPEC ID, ID
JUST_STMT -> · EXPR == EXPR, }
FACTOR -> · ID, >
FACTOR -> · CONST, float
STMT -> · RTN_STMT, for
FACTOR -> · ID, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) STMT ;, return
STMT -> · ITER_STMT, while
FACTOR -> · CONST, double
JUST_STMT -> · EXPR == EXPR, float
FACTOR -> · CONST, >
JUST_STMT -> · EXPR < EXPR, return
ITER_STMT -> · while ( STMT ) STMT, double
JUST_STMT -> · EXPR > EXPR, double
STMT -> · JUST_STMT, void
INIT_STMT -> · TYPE_SPEC ID, void
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR != EXPR, void
ASSIGN_STMT -> · ID = EXPR, while
JUST_STMT -> · EXPR < EXPR, }
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), for
JUST_STMT -> · EXPR >= EXPR, double
JUST_STMT -> · EXPR == EXPR, if
EXPR -> · TERM EXPR2, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
TYPE_SPEC -> · float, ID
ITER_STMT -> while ( STMT ) · CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
FACTOR -> · ( EXPR ), }
JUST_STMT -> · EXPR <= EXPR, return
STMT -> · IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> while ( STMT ) · STMT, void
JUST_STMT -> · EXPR > EXPR, void
ASSIGN_STMT -> · ID = EXPR, ID
JUST_STMT -> · EXPR <= EXPR, if
TERM -> · FACTOR TERM2 , return
STMT -> · ASSIGN_STMT, }
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
CALL_STMT -> · ID ( PARG_LIST ), ID
STMT -> · ITER_STMT, ID
STMT -> · RTN_STMT, while
TERM -> · FACTOR TERM2 , -
INIT_STMT -> · TYPE_SPEC ID = EXPR, while
RTN_STMT -> · return EXPR, int
IF_STMT -> · if ( STMT ) STMT ;, ID
CODE_BLOCK -> · { STMT_LIST }, int
JUST_STMT -> · EXPR <= EXPR, float
JUST_STMT -> · EXPR >= EXPR, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
ITER_STMT -> while ( STMT ) · STMT, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, for
STMT -> · JUST_STMT, float
INIT_STMT -> · TYPE_SPEC ID, float
STMT -> · EXPR, while
STMT -> · EXPR, int
STMT -> · JUST_STMT, return
INIT_STMT -> · TYPE_SPEC ID, return
STMT -> · ITER_STMT, return
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, }
FACTOR -> · ID, -
ITER_STMT -> while ( STMT ) · STMT, if
ASSIGN_STMT -> · ID = EXPR, return
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
JUST_STMT -> · EXPR != EXPR, ID
TERM -> · FACTOR TERM2 , <
STMT -> · IF_STMT, void
STMT -> · RTN_STMT, }
TERM -> · FACTOR TERM2 , <=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
EXPR -> · TERM EXPR2, if
JUST_STMT -> · EXPR == EXPR, for
CALL_STMT -> · ID ( PARG_LIST ), /
STMT -> · INIT_STMT, return
FACTOR -> · ( EXPR ), -
ITER_STMT -> while ( STMT ) · CODE_BLOCK, return
CODE_BLOCK -> · { STMT_LIST }, while
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
JUST_STMT -> · EXPR > EXPR, ID
FACTOR -> · ID, /
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
STMT -> · EXPR, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, }
CODE_BLOCK -> · { STMT_LIST }, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
STMT -> · IF_STMT, if
RTN_STMT -> · return EXPR, float
FACTOR -> · CALL_STMT, >=
ITER_STMT -> while ( STMT ) · CODE_BLOCK, for
STMT -> · ASSIGN_STMT, int
JUST_STMT -> · EXPR != EXPR, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
FACTOR -> · CALL_STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ASSIGN_STMT -> · ID = EXPR, double
FACTOR -> · CALL_STMT, double
STMT -> · ASSIGN_STMT, for
ITER_STMT -> · while ( STMT ) STMT, int
FACTOR -> · ( EXPR ), <
JUST_STMT -> · EXPR <= EXPR, }
JUST_STMT -> · EXPR >= EXPR, ID
FACTOR -> · CONST, *
STMT -> · ITER_STMT, int
FACTOR -> · ( EXPR ), double
JUST_STMT -> · EXPR != EXPR, double
FACTOR -> · ID, int
FACTOR -> · CONST, >=
STMT -> · ASSIGN_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ASSIGN_STMT -> · ID = EXPR, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
JUST_STMT -> · EXPR >= EXPR, void
FACTOR -> · CONST, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
STMT -> · ASSIGN_STMT, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
TERM -> · FACTOR TERM2 , int
FACTOR -> · ( EXPR ), return
STMT -> · EXPR, ID
FACTOR -> · ( EXPR ), void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
ITER_STMT -> while ( STMT ) · CODE_BLOCK, }
EXPR -> · TERM EXPR2, double
CALL_STMT -> · ID ( PARG_LIST ), !=
EXPR -> · TERM EXPR2, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
STMT -> · INIT_STMT, while
JUST_STMT -> · EXPR >= EXPR, while
EXPR -> · TERM EXPR2, >=
JUST_STMT -> · EXPR < EXPR, void
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
STMT -> · ITER_STMT, double
ITER_STMT -> while ( STMT ) · STMT, int
FACTOR -> · ( EXPR ), >
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
STMT -> · INIT_STMT, for
FACTOR -> · ID, double
STMT -> · ASSIGN_STMT, while
FACTOR -> · CALL_STMT, if
INIT_STMT -> · TYPE_SPEC ID = EXPR, ID
JUST_STMT -> · EXPR < EXPR, if
ITER_STMT -> while ( STMT ) · CODE_BLOCK, while
TERM -> · FACTOR TERM2 , void
IF_STMT -> · if ( STMT ) STMT ;, if
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
CODE_BLOCK -> · { STMT_LIST }, ID
JUST_STMT -> · EXPR == EXPR, return
FACTOR -> · ID, +
TERM -> · FACTOR TERM2 , double
STMT -> · INIT_STMT, }
JUST_STMT -> · EXPR < EXPR, float
EXPR -> · TERM EXPR2, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, void
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
JUST_STMT -> · EXPR != EXPR, for
STMT -> · JUST_STMT, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
INIT_STMT -> · TYPE_SPEC ID, for
JUST_STMT -> · EXPR >= EXPR, }
FACTOR -> · CALL_STMT, /
STMT -> · ITER_STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, void
STMT -> · ITER_STMT, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
JUST_STMT -> · EXPR >= EXPR, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
STMT -> · INIT_STMT, int
JUST_STMT -> · EXPR > EXPR, for
ITER_STMT -> while ( STMT ) · STMT, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
JUST_STMT -> · EXPR != EXPR, int
FACTOR -> · CONST, <
ITER_STMT -> · while ( STMT ) STMT, float
EXPR -> · TERM EXPR2, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
STMT -> · IF_STMT, for
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), ==
STMT -> · IF_STMT, return
FACTOR -> · ( EXPR ), for
JUST_STMT -> · EXPR >= EXPR, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
STMT -> · JUST_STMT, double
INIT_STMT -> · TYPE_SPEC ID, double
FACTOR -> · CALL_STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
FACTOR -> · CONST, <=
INIT_STMT -> · TYPE_SPEC ID = EXPR, return
JUST_STMT -> · EXPR != EXPR, float
STMT -> · IF_STMT, ID
ITER_STMT -> while ( STMT ) · CODE_BLOCK, double
EXPR -> · TERM EXPR2, <=
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
FACTOR -> · ( EXPR ), while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
FACTOR -> · ( EXPR ), if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
JUST_STMT -> · EXPR == EXPR, int
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
FACTOR -> · CONST, for
IF_STMT -> · if ( STMT ) STMT ;, double
CALL_STMT -> · ID ( PARG_LIST ), double
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
STMT -> · RTN_STMT, void
STMT -> · IF_STMT, }
EXPR -> · TERM EXPR2, return
STMT -> · RTN_STMT, return
RTN_STMT -> · return EXPR, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · ( EXPR ), *
ASSIGN_STMT -> · ID = EXPR, void
FACTOR -> · ID, ==
ITER_STMT -> · while ( STMT ) STMT, ID
FACTOR -> · ID, <
STMT -> · EXPR, for
FACTOR -> · CONST, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
RTN_STMT -> · return EXPR, }
FACTOR -> · CALL_STMT, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
JUST_STMT -> · EXPR >= EXPR, for
TERM -> · FACTOR TERM2 , >
JUST_STMT -> · EXPR > EXPR, while
ASSIGN_STMT -> · ID = EXPR, }
JUST_STMT -> · EXPR <= EXPR, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), int
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
FACTOR -> · ID, >=
JUST_STMT -> · EXPR == EXPR, double
ITER_STMT -> · while ( STMT ) STMT, return
JUST_STMT -> · EXPR < EXPR, double
FACTOR -> · ID, }
ITER_STMT -> while ( STMT ) · CODE_BLOCK, if
JUST_STMT -> · EXPR <= EXPR, double
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
FACTOR -> · CALL_STMT, <
EXPR -> · TERM EXPR2, void
FACTOR -> · ID, return
RTN_STMT -> · return EXPR, return
STMT -> · RTN_STMT, ID
CALL_STMT -> · ID ( PARG_LIST ), while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
TERM -> · FACTOR TERM2 , >=
IF_STMT -> · if ( STMT ) STMT ;, float
FACTOR -> · CONST, int
STMT -> · EXPR, }
FACTOR -> · CALL_STMT, >
JUST_STMT -> · EXPR < EXPR, while
INIT_STMT -> · TYPE_SPEC ID = EXPR, float
STMT -> · INIT_STMT, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT -> · RTN_STMT, float
JUST_STMT -> · EXPR > EXPR, return
TERM -> · FACTOR TERM2 , }
JUST_STMT -> · EXPR <= EXPR, void
JUST_STMT -> · EXPR > EXPR, if
FACTOR -> · CONST, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
JUST_STMT -> · EXPR == EXPR, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
STMT -> · RTN_STMT, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
JUST_STMT -> · EXPR > EXPR, float
ITER_STMT -> while ( STMT ) · STMT, double
INIT_STMT -> · TYPE_SPEC ID = EXPR, int
FACTOR -> · CALL_STMT, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
CALL_STMT -> · ID ( PARG_LIST ), *
STMT -> · ITER_STMT, }
ASSIGN_STMT -> · ID = EXPR, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ;, int
FACTOR -> · ( EXPR ), >=
STMT -> · IF_STMT, int
JUST_STMT -> · EXPR < EXPR, int
JUST_STMT -> · EXPR == EXPR, while
STMT -> · ITER_STMT, float
STMT -> · INIT_STMT, void
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · ID, float
ASSIGN_STMT -> · ID = EXPR, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
ITER_STMT -> while ( STMT ) · STMT, return
STMT -> · EXPR, double
CALL_STMT -> · ID ( PARG_LIST ), >=
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
STMT -> · ITER_STMT, if
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
STMT -> · INIT_STMT, ID
FACTOR -> · ( EXPR ), float
STMT -> · EXPR, void
TERM -> · FACTOR TERM2 , float
JUST_STMT -> · EXPR <= EXPR, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
CODE_BLOCK -> · { STMT_LIST }, }
ASSIGN_STMT -> · ID = EXPR, for
FACTOR -> · ID, for
STMT -> · INIT_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
JUST_STMT -> · EXPR != EXPR, while
FACTOR -> · ( EXPR ), ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
TERM -> · FACTOR TERM2 , !=
JUST_STMT -> · EXPR == EXPR, ID
CODE_BLOCK -> · { STMT_LIST }, return
CODE_BLOCK -> · { STMT_LIST }, float
TERM -> · FACTOR TERM2 , if
STMT -> · JUST_STMT, if
INIT_STMT -> · TYPE_SPEC ID, if
FACTOR -> · CONST, !=
ITER_STMT -> · while ( STMT ) STMT, for
STMT -> · JUST_STMT, int
INIT_STMT -> · TYPE_SPEC ID, int
JUST_STMT -> · EXPR <= EXPR, for
JUST_STMT -> · EXPR < EXPR, ID
JUST_STMT -> · EXPR > EXPR, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
ITER_STMT -> while ( STMT ) · CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, if
FACTOR -> · ID, !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
ITER_STMT -> while ( STMT ) · STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
EXPR -> · TERM EXPR2, >
RTN_STMT -> · return EXPR, while
STMT -> · RTN_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), return
JUST_STMT -> · EXPR != EXPR, }
JUST_STMT -> · EXPR < EXPR, for
EXPR -> · TERM EXPR2, <
FACTOR -> · CALL_STMT, void
STMT -> · JUST_STMT, }
INIT_STMT -> · TYPE_SPEC ID, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
RTN_STMT -> · return EXPR, void
RTN_STMT -> · return EXPR, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
CODE_BLOCK -> · { STMT_LIST }, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
STMT -> · EXPR, return
STMT -> · ASSIGN_STMT, return
FACTOR -> · CALL_STMT, +
ITER_STMT -> while ( STMT ) · STMT, while
STMT -> · ASSIGN_STMT, if
STMT -> · EXPR, if
INIT_STMT -> · TYPE_SPEC ID = EXPR, double
ITER_STMT -> while ( STMT ) · CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
STMT -> · IF_STMT, float
RTN_STMT -> · return EXPR, if
ITER_STMT -> · while ( STMT ) STMT, }

[node|169]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
JUST_STMT -> · EXPR == EXPR, ;
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
STMT -> · IF_STMT, ;
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
ITER_STMT -> for ( · STMT ; STMT ; STMT ) CODE_BLOCK, )
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
ITER_STMT -> for ( · STMT ; STMT ; STMT ) STMT, )
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;

[node|170]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
FACTOR -> · ID, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
ITER_STMT -> while ( · STMT ) CODE_BLOCK, )
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
JUST_STMT -> · EXPR != EXPR, )
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
ITER_STMT -> while ( · STMT ) STMT, )
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )

[node|171]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), <
CALL_STMT -> ID ( · PARG_LIST ), -
CALL_STMT -> ID ( · PARG_LIST ), !=
CALL_STMT -> ID ( · PARG_LIST ), ==
CALL_STMT -> ID ( · PARG_LIST ), >=
CALL_STMT -> ID ( · PARG_LIST ), /
CALL_STMT -> ID ( · PARG_LIST ), >
CALL_STMT -> ID ( · PARG_LIST ), )
CALL_STMT -> ID ( · PARG_LIST ), *
PARG_LIST -> ·, )
PARG -> · ID, ,
PARG -> · ID, )
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), <=
PARG_LIST -> · PARG, )

[node|172]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
ASSIGN_STMT -> ID = · EXPR, )
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|173]: [begin]
FACTOR -> ( EXPR · ), ==
FACTOR -> ( EXPR · ), >
FACTOR -> ( EXPR · ), !=
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), <
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), <=
FACTOR -> ( EXPR · ), )
FACTOR -> ( EXPR · ), >=
FACTOR -> ( EXPR · ), /

[node|174]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
IF_STMT -> if ( · STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
IF_STMT -> if ( · STMT ) STMT ; else CODE_BLOCK, )
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
FACTOR -> · ID, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
IF_STMT -> if ( · STMT ) STMT ; else IF_STMT, )
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
IF_STMT -> if ( · STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
IF_STMT -> if ( · STMT ) CODE_BLOCK else IF_STMT, )
FACTOR -> · ID, -
JUST_STMT -> · EXPR != EXPR, )
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
IF_STMT -> if ( · STMT ) STMT ;, )
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )

[node|175]: [begin]
INIT_STMT -> TYPE_SPEC ID · = EXPR, )
INIT_STMT -> TYPE_SPEC ID ·, )

[node|176]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
EXPR2 -> + · TERM EXPR2, >=
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, <
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
EXPR2 -> + · TERM EXPR2, <
FACTOR -> · CALL_STMT, !=
EXPR2 -> + · TERM EXPR2, ==
FACTOR -> · ( EXPR ), )
EXPR2 -> + · TERM EXPR2, >
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
FACTOR -> · ID, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), >
EXPR2 -> + · TERM EXPR2, )
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
EXPR2 -> + · TERM EXPR2, <=
FACTOR -> · ID, +
EXPR2 -> + · TERM EXPR2, !=
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
FACTOR -> · CALL_STMT, /

[node|177]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, <
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
EXPR2 -> - · TERM EXPR2, <=
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
FACTOR -> · ( EXPR ), )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
FACTOR -> · ID, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
EXPR2 -> - · TERM EXPR2, >
EXPR2 -> - · TERM EXPR2, )
FACTOR -> · CALL_STMT, ==
EXPR2 -> - · TERM EXPR2, <
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
EXPR2 -> - · TERM EXPR2, >=
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
EXPR2 -> - · TERM EXPR2, !=
FACTOR -> · ID, +
TERM -> · FACTOR TERM2 , <
EXPR2 -> - · TERM EXPR2, ==
FACTOR -> · CALL_STMT, +
FACTOR -> · CALL_STMT, <
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
FACTOR -> · CALL_STMT, /

[node|178]: [begin]
EXPR -> TERM EXPR2 ·, )
EXPR -> TERM EXPR2 ·, !=
EXPR -> TERM EXPR2 ·, >
EXPR -> TERM EXPR2 ·, <
EXPR -> TERM EXPR2 ·, ==
EXPR -> TERM EXPR2 ·, >=
EXPR -> TERM EXPR2 ·, <=

[node|179]: [begin]
RTN_STMT -> return EXPR ·, )

[node|180]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
JUST_STMT -> EXPR >= · EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|181]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
JUST_STMT -> EXPR > · EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|182]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
JUST_STMT -> EXPR == · EXPR, )
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|183]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
JUST_STMT -> EXPR < · EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|184]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
JUST_STMT -> EXPR <= · EXPR, )
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|185]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
JUST_STMT -> EXPR != · EXPR, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|186]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, ID
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, if
CODE_BLOCK -> · { STMT_LIST }, double
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, return
FACTOR -> · CONST, <
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, int
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
IF_STMT -> if ( STMT ) · STMT ;, while
IF_STMT -> if ( STMT ) · CODE_BLOCK, if
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
CODE_BLOCK -> · { STMT_LIST }, for
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, float
JUST_STMT -> · EXPR == EXPR, ;
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, while
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
IF_STMT -> if ( STMT ) · CODE_BLOCK, float
FACTOR -> · CONST, <=
IF_STMT -> if ( STMT ) · STMT ;, double
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, float
FACTOR -> · ID, *
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, for
FACTOR -> · CALL_STMT, !=
IF_STMT -> if ( STMT ) · CODE_BLOCK, void
EXPR -> · TERM EXPR2, <=
IF_STMT -> if ( STMT ) · STMT ;, for
STMT -> · ITER_STMT, ;
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, double
FACTOR -> · ID, >
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, while
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, double
IF_STMT -> if ( STMT ) · CODE_BLOCK, ID
FACTOR -> · CONST, >=
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, return
FACTOR -> · CONST, -
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, for
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, if
STMT -> · IF_STMT, ;
IF_STMT -> if ( STMT ) · CODE_BLOCK, for
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, double
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, ID
FACTOR -> · CALL_STMT, <=
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if ( STMT ) · STMT ;, float
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CODE_BLOCK -> · { STMT_LIST }, else
IF_STMT -> if ( STMT ) · STMT ;, ID
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
IF_STMT -> if ( STMT ) · STMT ;, void
CODE_BLOCK -> · { STMT_LIST }, }
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, int
FACTOR -> · ( EXPR ), *
IF_STMT -> if ( STMT ) · CODE_BLOCK, double
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, ID
TYPE_SPEC -> · float, ID
JUST_STMT -> · EXPR < EXPR, ;
IF_STMT -> if ( STMT ) · STMT ;, if
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
IF_STMT -> if ( STMT ) · CODE_BLOCK, while
CODE_BLOCK -> · { STMT_LIST }, return
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
CODE_BLOCK -> · { STMT_LIST }, float
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, void
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, return
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, }
TERM -> · FACTOR TERM2 , -
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, void
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
CODE_BLOCK -> · { STMT_LIST }, int
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, while
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, double
FACTOR -> · ( EXPR ), !=
CODE_BLOCK -> · { STMT_LIST }, if
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, }
IF_STMT -> if ( STMT ) · CODE_BLOCK, return
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, void
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, while
IF_STMT -> if ( STMT ) · CODE_BLOCK, }
FACTOR -> · ID, <=
FACTOR -> · ID, >=
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, }
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
IF_STMT -> if ( STMT ) · STMT ;, int
STMT -> · RTN_STMT, ;
CODE_BLOCK -> · { STMT_LIST }, ID
FACTOR -> · ID, +
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, int
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, float
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, return
CODE_BLOCK -> · { STMT_LIST }, void
JUST_STMT -> · EXPR >= EXPR, ;
IF_STMT -> if ( STMT ) · STMT ;, }
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
IF_STMT -> if ( STMT ) · CODE_BLOCK, int
FACTOR -> · CONST, +
IF_STMT -> if ( STMT ) · STMT ;, return
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
CODE_BLOCK -> · { STMT_LIST }, while
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, if
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, for

[node|187]: [begin]
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> ·, -
TERM2 -> ·, <
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> * FACTOR · TERM2, !=
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, <
TERM2 -> * FACTOR · TERM2, <=
TERM2 -> ·, ==
TERM2 -> ·, >
TERM2 -> * FACTOR · TERM2, >
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> * FACTOR · TERM2, -
TERM2 -> * FACTOR · TERM2, <
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> · / FACTOR TERM2, >
TERM2 -> ·, >=
TERM2 -> ·, <=
TERM2 -> ·, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · * FACTOR TERM2, >
TERM2 -> * FACTOR · TERM2, >=
TERM2 -> * FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> * FACTOR · TERM2, ==
TERM2 -> * FACTOR · TERM2, ;
TERM2 -> · / FACTOR TERM2, +
TERM2 -> ·, +
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, !=
TERM2 -> · / FACTOR TERM2, ;

[node|188]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), <=
FACTOR -> ID ·, ==
FACTOR -> ID ·, >
CALL_STMT -> ID · ( PARG_LIST ), <
CALL_STMT -> ID · ( PARG_LIST ), -
FACTOR -> ID ·, ;
CALL_STMT -> ID · ( PARG_LIST ), >=
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, !=
CALL_STMT -> ID · ( PARG_LIST ), ;
FACTOR -> ID ·, <
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, >=
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), !=
FACTOR -> ID ·, <=
CALL_STMT -> ID · ( PARG_LIST ), ==
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), >

[node|189]: [begin]
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> ·, <
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> ·, >
TERM2 -> / FACTOR · TERM2, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> · * FACTOR TERM2, -
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, +
TERM2 -> ·, ==
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> / FACTOR · TERM2, ;
TERM2 -> · / FACTOR TERM2, >
TERM2 -> / FACTOR · TERM2, >
TERM2 -> / FACTOR · TERM2, -
TERM2 -> ·, <=
TERM2 -> ·, ;
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, >
TERM2 -> / FACTOR · TERM2, <=
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, !=
TERM2 -> ·, +
TERM2 -> / FACTOR · TERM2, <
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> / FACTOR · TERM2, ==
TERM2 -> ·, !=
TERM2 -> · / FACTOR TERM2, ;

[node|190]: [begin]
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, while
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, if
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, if
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, ID
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, double
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, for
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, float
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, float
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, int
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, return
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, int
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, ID
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, while
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, void
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, }
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, }
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, return
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, void
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, for
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, double

[node|191]: [begin]
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, ;
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, ;

[node|192]: [begin]
ITER_STMT -> while ( STMT · ) STMT, ;
ITER_STMT -> while ( STMT · ) CODE_BLOCK, ;

[node|193]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), <
CALL_STMT -> ID ( PARG_LIST · ), >
CALL_STMT -> ID ( PARG_LIST · ), ;
CALL_STMT -> ID ( PARG_LIST · ), !=
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), >=
CALL_STMT -> ID ( PARG_LIST · ), <=
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), ==

[node|194]: [begin]
FACTOR -> ( EXPR ) ·, >=
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, ==
FACTOR -> ( EXPR ) ·, >
FACTOR -> ( EXPR ) ·, !=
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, ;
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, <
FACTOR -> ( EXPR ) ·, <=
FACTOR -> ( EXPR ) ·, -

[node|195]: [begin]
IF_STMT -> if ( STMT · ) CODE_BLOCK, ;
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, ;
IF_STMT -> if ( STMT · ) STMT ;, ;
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, ;
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, ;
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, ;

[node|196]: [begin]
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> ·, !=
EXPR2 -> + TERM · EXPR2, !=
EXPR2 -> ·, ==
EXPR2 -> + TERM · EXPR2, ==
EXPR2 -> + TERM · EXPR2, <
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> + TERM · EXPR2, >=
EXPR2 -> ·, >=
EXPR2 -> + TERM · EXPR2, >
EXPR2 -> ·, >
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> ·, <=
EXPR2 -> + TERM · EXPR2, ;
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> + TERM · EXPR2, <=
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, <
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> ·, <

[node|197]: [begin]
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> - TERM · EXPR2, <
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> ·, ==
EXPR2 -> ·, !=
EXPR2 -> - TERM · EXPR2, ==
EXPR2 -> - TERM · EXPR2, >
EXPR2 -> ·, >=
EXPR2 -> ·, >
EXPR2 -> - TERM · EXPR2, >=
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> - TERM · EXPR2, <=
EXPR2 -> · - TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> - TERM · EXPR2, ;
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> ·, <=
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> ·, <
EXPR2 -> - TERM · EXPR2, !=

[node|198]: [begin]
JUST_STMT -> EXPR >= EXPR ·, ;

[node|199]: [begin]
JUST_STMT -> EXPR > EXPR ·, ;

[node|200]: [begin]
JUST_STMT -> EXPR == EXPR ·, ;

[node|201]: [begin]
JUST_STMT -> EXPR < EXPR ·, ;

[node|202]: [begin]
JUST_STMT -> EXPR <= EXPR ·, ;

[node|203]: [begin]
JUST_STMT -> EXPR != EXPR ·, ;

[node|204]: [begin]
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> ·, -
TERM2 -> ·, <
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> ·, >
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> * FACTOR · TERM2, !=
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, <
TERM2 -> * FACTOR · TERM2, <=
TERM2 -> ·, ==
TERM2 -> * FACTOR · TERM2, )
TERM2 -> · * FACTOR TERM2, )
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> * FACTOR · TERM2, -
TERM2 -> * FACTOR · TERM2, <
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> * FACTOR · TERM2, >
TERM2 -> · / FACTOR TERM2, >
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> ·, >=
TERM2 -> ·, <=
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · * FACTOR TERM2, >
TERM2 -> * FACTOR · TERM2, >=
TERM2 -> * FACTOR · TERM2, +
TERM2 -> * FACTOR · TERM2, ==
TERM2 -> ·, )
TERM2 -> · / FACTOR TERM2, +
TERM2 -> ·, +
TERM2 -> · / FACTOR TERM2, )
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, !=

[node|205]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), <=
FACTOR -> ID ·, ==
FACTOR -> ID ·, >
CALL_STMT -> ID · ( PARG_LIST ), <
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), >=
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, !=
FACTOR -> ID ·, <
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, >=
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), !=
FACTOR -> ID ·, <=
FACTOR -> ID ·, )
CALL_STMT -> ID · ( PARG_LIST ), ==
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), >
CALL_STMT -> ID · ( PARG_LIST ), )

[node|206]: [begin]
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> ·, <
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> ·, >
TERM2 -> / FACTOR · TERM2, >=
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> · * FACTOR TERM2, -
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, )
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, ==
TERM2 -> ·, >=
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, >
TERM2 -> / FACTOR · TERM2, >
TERM2 -> / FACTOR · TERM2, -
TERM2 -> ·, <=
TERM2 -> · / FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · * FACTOR TERM2, >
TERM2 -> / FACTOR · TERM2, <=
TERM2 -> ·, )
TERM2 -> · / FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, !=
TERM2 -> ·, +
TERM2 -> / FACTOR · TERM2, )
TERM2 -> · / FACTOR TERM2, )
TERM2 -> / FACTOR · TERM2, <
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> / FACTOR · TERM2, ==
TERM2 -> ·, !=

[node|207]: [begin]
FACTOR -> CALL_STMT ·, <=
FACTOR -> CALL_STMT ·, void
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, return
FACTOR -> CALL_STMT ·, <
FACTOR -> CALL_STMT ·, >=
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, !=
FACTOR -> CALL_STMT ·, ==
FACTOR -> CALL_STMT ·, }
FACTOR -> CALL_STMT ·, double
FACTOR -> CALL_STMT ·, for
FACTOR -> CALL_STMT ·, ID
FACTOR -> CALL_STMT ·, int
FACTOR -> CALL_STMT ·, if
FACTOR -> CALL_STMT ·, >
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, float
FACTOR -> CALL_STMT ·, while

[node|208]: [begin]
TERM2 -> ·, if
TERM2 -> ·, int
TERM -> FACTOR · TERM2, >=
TERM2 -> · * FACTOR TERM2, void
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, return
TERM -> FACTOR · TERM2, ==
TERM2 -> · / FACTOR TERM2, <
TERM2 -> ·, for
TERM2 -> · * FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, float
TERM -> FACTOR · TERM2, ID
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, while
TERM2 -> ·, float
TERM2 -> · / FACTOR TERM2, void
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> ·, >
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, >=
TERM2 -> ·, <=
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> · * FACTOR TERM2, for
TERM2 -> ·, double
TERM2 -> ·, }
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · / FACTOR TERM2, double
TERM -> FACTOR · TERM2, +
TERM -> FACTOR · TERM2, <
TERM2 -> ·, !=
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> · * FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, >=
TERM -> FACTOR · TERM2, return
TERM2 -> ·, ==
TERM -> FACTOR · TERM2, int
TERM2 -> · / FACTOR TERM2, >
TERM -> FACTOR · TERM2, for
TERM2 -> ·, void
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, float
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · * FACTOR TERM2, >
TERM -> FACTOR · TERM2, <=
TERM -> FACTOR · TERM2, while
TERM2 -> · / FACTOR TERM2, for
TERM2 -> · * FACTOR TERM2, return
TERM -> FACTOR · TERM2, if
TERM2 -> · * FACTOR TERM2, int
TERM2 -> ·, <
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> · / FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, -
TERM -> FACTOR · TERM2, >
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, int
TERM2 -> · / FACTOR TERM2, if
TERM -> FACTOR · TERM2, void
TERM -> FACTOR · TERM2, }
TERM2 -> ·, ID
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, if
TERM2 -> ·, +
TERM -> FACTOR · TERM2, double
TERM2 -> · / FACTOR TERM2, ID
TERM -> FACTOR · TERM2, !=
TERM -> FACTOR · TERM2, float
TERM -> FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, ID

[node|209]: [begin]
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, for
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, float
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, while
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, double
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, ID
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, int
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, return
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, }
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, void
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, if

[node|210]: [begin]
ITER_STMT -> while ( STMT ) STMT ·, return
ITER_STMT -> while ( STMT ) STMT ·, }
ITER_STMT -> while ( STMT ) STMT ·, if
ITER_STMT -> while ( STMT ) STMT ·, void
ITER_STMT -> while ( STMT ) STMT ·, for
ITER_STMT -> while ( STMT ) STMT ·, float
ITER_STMT -> while ( STMT ) STMT ·, double
ITER_STMT -> while ( STMT ) STMT ·, while
ITER_STMT -> while ( STMT ) STMT ·, ID
ITER_STMT -> while ( STMT ) STMT ·, int

[node|211]: [begin]
ASSIGN_STMT -> ID · = EXPR, if
CALL_STMT -> ID · ( PARG_LIST ), <=
ASSIGN_STMT -> ID · = EXPR, int
FACTOR -> ID ·, int
CALL_STMT -> ID · ( PARG_LIST ), }
CALL_STMT -> ID · ( PARG_LIST ), double
FACTOR -> ID ·, ==
FACTOR -> ID ·, >
ASSIGN_STMT -> ID · = EXPR, return
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), <
CALL_STMT -> ID · ( PARG_LIST ), while
ASSIGN_STMT -> ID · = EXPR, void
FACTOR -> ID ·, for
FACTOR -> ID ·, void
CALL_STMT -> ID · ( PARG_LIST ), float
ASSIGN_STMT -> ID · = EXPR, for
CALL_STMT -> ID · ( PARG_LIST ), >=
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, ID
FACTOR -> ID ·, !=
FACTOR -> ID ·, double
CALL_STMT -> ID · ( PARG_LIST ), for
FACTOR -> ID ·, float
FACTOR -> ID ·, -
FACTOR -> ID ·, <
ASSIGN_STMT -> ID · = EXPR, while
CALL_STMT -> ID · ( PARG_LIST ), *
ASSIGN_STMT -> ID · = EXPR, float
CALL_STMT -> ID · ( PARG_LIST ), void
FACTOR -> ID ·, return
FACTOR -> ID ·, >=
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), ID
CALL_STMT -> ID · ( PARG_LIST ), !=
CALL_STMT -> ID · ( PARG_LIST ), if
FACTOR -> ID ·, <=
CALL_STMT -> ID · ( PARG_LIST ), return
FACTOR -> ID ·, }
ASSIGN_STMT -> ID · = EXPR, ID
ASSIGN_STMT -> ID · = EXPR, double
CALL_STMT -> ID · ( PARG_LIST ), ==
ASSIGN_STMT -> ID · = EXPR, }
CALL_STMT -> ID · ( PARG_LIST ), int
FACTOR -> ID ·, while
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), >
FACTOR -> ID ·, if

[node|212]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> ( · EXPR ), void
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
FACTOR -> ( · EXPR ), return
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> ( · EXPR ), if
FACTOR -> · ID, -
FACTOR -> ( · EXPR ), !=
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> ( · EXPR ), double
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), for
FACTOR -> ( · EXPR ), *
FACTOR -> ( · EXPR ), <=
FACTOR -> ( · EXPR ), /
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> ( · EXPR ), >=
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> ( · EXPR ), >
FACTOR -> ( · EXPR ), ==
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> ( · EXPR ), -
FACTOR -> ( · EXPR ), int
FACTOR -> ( · EXPR ), float
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
FACTOR -> ( · EXPR ), <
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> ( · EXPR ), while
FACTOR -> · ( EXPR ), -
FACTOR -> ( · EXPR ), }
FACTOR -> ( · EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> ( · EXPR ), ID
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|213]: [begin]
INIT_STMT -> TYPE_SPEC · ID = EXPR, for
INIT_STMT -> TYPE_SPEC · ID = EXPR, float
INIT_STMT -> TYPE_SPEC · ID = EXPR, while
INIT_STMT -> TYPE_SPEC · ID, }
INIT_STMT -> TYPE_SPEC · ID = EXPR, double
INIT_STMT -> TYPE_SPEC · ID, ID
INIT_STMT -> TYPE_SPEC · ID = EXPR, ID
INIT_STMT -> TYPE_SPEC · ID = EXPR, int
INIT_STMT -> TYPE_SPEC · ID = EXPR, return
INIT_STMT -> TYPE_SPEC · ID, return
INIT_STMT -> TYPE_SPEC · ID, int
INIT_STMT -> TYPE_SPEC · ID, float
INIT_STMT -> TYPE_SPEC · ID, double
INIT_STMT -> TYPE_SPEC · ID = EXPR, if
INIT_STMT -> TYPE_SPEC · ID = EXPR, }
INIT_STMT -> TYPE_SPEC · ID = EXPR, void
INIT_STMT -> TYPE_SPEC · ID, while
INIT_STMT -> TYPE_SPEC · ID, if
INIT_STMT -> TYPE_SPEC · ID, for
INIT_STMT -> TYPE_SPEC · ID, void

[node|214]: [begin]
STMT -> ITER_STMT ·, void
STMT -> ITER_STMT ·, return
STMT -> ITER_STMT ·, }
STMT -> ITER_STMT ·, double
STMT -> ITER_STMT ·, ID
STMT -> ITER_STMT ·, if
STMT -> ITER_STMT ·, for
STMT -> ITER_STMT ·, int
STMT -> ITER_STMT ·, float
STMT -> ITER_STMT ·, while

[node|215]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
CODE_BLOCK -> { · STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
CODE_BLOCK -> { · STMT_LIST }, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
CODE_BLOCK -> { · STMT_LIST }, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
CODE_BLOCK -> { · STMT_LIST }, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
CODE_BLOCK -> { · STMT_LIST }, while
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> { · STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
CODE_BLOCK -> { · STMT_LIST }, ID
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
CODE_BLOCK -> { · STMT_LIST }, void
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CODE_BLOCK -> { · STMT_LIST }, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
CODE_BLOCK -> { · STMT_LIST }, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|216]: [begin]
STMT -> RTN_STMT ·, return
STMT -> RTN_STMT ·, void
STMT -> RTN_STMT ·, }
STMT -> RTN_STMT ·, double
STMT -> RTN_STMT ·, for
STMT -> RTN_STMT ·, int
STMT -> RTN_STMT ·, ID
STMT -> RTN_STMT ·, if
STMT -> RTN_STMT ·, while
STMT -> RTN_STMT ·, float

[node|217]: [begin]
STMT -> INIT_STMT ·, if
STMT -> INIT_STMT ·, while
STMT -> INIT_STMT ·, ID
STMT -> INIT_STMT ·, for
STMT -> INIT_STMT ·, int
STMT -> INIT_STMT ·, double
STMT -> INIT_STMT ·, }
STMT -> INIT_STMT ·, void
STMT -> INIT_STMT ·, return
STMT -> INIT_STMT ·, float

[node|218]: [begin]
EXPR2 -> ·, !=
EXPR2 -> · + TERM EXPR2, <
EXPR -> TERM · EXPR2, void
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> ·, return
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, float
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · + TERM EXPR2, ==
EXPR -> TERM · EXPR2, for
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · - TERM EXPR2, return
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> ·, while
EXPR -> TERM · EXPR2, <=
EXPR -> TERM · EXPR2, double
EXPR2 -> ·, >
EXPR2 -> · - TERM EXPR2, if
EXPR -> TERM · EXPR2, <
EXPR -> TERM · EXPR2, ID
EXPR2 -> · + TERM EXPR2, void
EXPR -> TERM · EXPR2, float
EXPR -> TERM · EXPR2, >=
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, void
EXPR -> TERM · EXPR2, int
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> ·, ==
EXPR -> TERM · EXPR2, }
EXPR -> TERM · EXPR2, if
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> ·, for
EXPR -> TERM · EXPR2, !=
EXPR2 -> ·, void
EXPR2 -> · + TERM EXPR2, >
EXPR -> TERM · EXPR2, return
EXPR2 -> · + TERM EXPR2, int
EXPR -> TERM · EXPR2, >
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> ·, <
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> ·, float
EXPR2 -> ·, >=
EXPR -> TERM · EXPR2, while
EXPR2 -> ·, <=
EXPR2 -> ·, double
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> ·, ID
EXPR -> TERM · EXPR2, ==
EXPR2 -> ·, }
EXPR2 -> · - TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> ·, if

[node|219]: [begin]
STMT -> ASSIGN_STMT ·, int
STMT -> ASSIGN_STMT ·, for
STMT -> ASSIGN_STMT ·, ID
STMT -> ASSIGN_STMT ·, while
STMT -> ASSIGN_STMT ·, if
STMT -> ASSIGN_STMT ·, float
STMT -> ASSIGN_STMT ·, return
STMT -> ASSIGN_STMT ·, void
STMT -> ASSIGN_STMT ·, }
STMT -> ASSIGN_STMT ·, double

[node|220]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), }
RTN_STMT -> return · EXPR, if
FACTOR -> · ID, ID
EXPR -> · TERM EXPR2, int
RTN_STMT -> return · EXPR, int
FACTOR -> · ( EXPR ), for
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
TERM -> · FACTOR TERM2 , while
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
RTN_STMT -> return · EXPR, float
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
RTN_STMT -> return · EXPR, return
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
RTN_STMT -> return · EXPR, }
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
EXPR -> · TERM EXPR2, return
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
RTN_STMT -> return · EXPR, for
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, for
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, ID
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
RTN_STMT -> return · EXPR, while
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
RTN_STMT -> return · EXPR, double
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
RTN_STMT -> return · EXPR, ID
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
TERM -> · FACTOR TERM2 , double
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, +
EXPR -> · TERM EXPR2, }
FACTOR -> · ID, return
RTN_STMT -> return · EXPR, void
CALL_STMT -> · ID ( PARG_LIST ), while
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|221]: [begin]
STMT -> JUST_STMT ·, }
STMT -> JUST_STMT ·, return
STMT -> JUST_STMT ·, int
STMT -> JUST_STMT ·, ID
STMT -> JUST_STMT ·, while
STMT -> JUST_STMT ·, double
STMT -> JUST_STMT ·, float
STMT -> JUST_STMT ·, for
STMT -> JUST_STMT ·, void
STMT -> JUST_STMT ·, if

[node|222]: [begin]
STMT -> IF_STMT ·, return
STMT -> IF_STMT ·, }
STMT -> IF_STMT ·, if
STMT -> IF_STMT ·, void
STMT -> IF_STMT ·, for
STMT -> IF_STMT ·, float
STMT -> IF_STMT ·, double
STMT -> IF_STMT ·, while
STMT -> IF_STMT ·, ID
STMT -> IF_STMT ·, int

[node|223]: [begin]
JUST_STMT -> EXPR · >= EXPR, double
JUST_STMT -> EXPR · < EXPR, if
JUST_STMT -> EXPR · <= EXPR, if
JUST_STMT -> EXPR · > EXPR, while
JUST_STMT -> EXPR · > EXPR, double
JUST_STMT -> EXPR · <= EXPR, int
JUST_STMT -> EXPR · < EXPR, int
JUST_STMT -> EXPR · != EXPR, ID
JUST_STMT -> EXPR · == EXPR, for
JUST_STMT -> EXPR · != EXPR, double
JUST_STMT -> EXPR · < EXPR, return
JUST_STMT -> EXPR · == EXPR, if
JUST_STMT -> EXPR · <= EXPR, return
JUST_STMT -> EXPR · != EXPR, float
JUST_STMT -> EXPR · == EXPR, int
STMT -> EXPR ·, void
JUST_STMT -> EXPR · <= EXPR, void
STMT -> EXPR ·, return
JUST_STMT -> EXPR · < EXPR, void
JUST_STMT -> EXPR · != EXPR, while
JUST_STMT -> EXPR · >= EXPR, if
JUST_STMT -> EXPR · <= EXPR, for
JUST_STMT -> EXPR · < EXPR, for
STMT -> EXPR ·, if
JUST_STMT -> EXPR · >= EXPR, while
JUST_STMT -> EXPR · > EXPR, float
STMT -> EXPR ·, for
JUST_STMT -> EXPR · >= EXPR, int
JUST_STMT -> EXPR · != EXPR, int
JUST_STMT -> EXPR · == EXPR, while
JUST_STMT -> EXPR · > EXPR, for
JUST_STMT -> EXPR · == EXPR, }
JUST_STMT -> EXPR · <= EXPR, while
JUST_STMT -> EXPR · <= EXPR, float
JUST_STMT -> EXPR · < EXPR, float
JUST_STMT -> EXPR · < EXPR, while
JUST_STMT -> EXPR · != EXPR, void
STMT -> EXPR ·, double
JUST_STMT -> EXPR · != EXPR, }
JUST_STMT -> EXPR · > EXPR, void
JUST_STMT -> EXPR · >= EXPR, ID
JUST_STMT -> EXPR · != EXPR, for
JUST_STMT -> EXPR · == EXPR, float
STMT -> EXPR ·, while
JUST_STMT -> EXPR · >= EXPR, }
JUST_STMT -> EXPR · == EXPR, ID
JUST_STMT -> EXPR · != EXPR, if
JUST_STMT -> EXPR · > EXPR, ID
JUST_STMT -> EXPR · > EXPR, int
JUST_STMT -> EXPR · > EXPR, return
STMT -> EXPR ·, ID
JUST_STMT -> EXPR · == EXPR, return
JUST_STMT -> EXPR · >= EXPR, float
JUST_STMT -> EXPR · < EXPR, ID
JUST_STMT -> EXPR · <= EXPR, ID
STMT -> EXPR ·, int
STMT -> EXPR ·, float
JUST_STMT -> EXPR · < EXPR, double
JUST_STMT -> EXPR · < EXPR, }
JUST_STMT -> EXPR · != EXPR, return
JUST_STMT -> EXPR · <= EXPR, }
JUST_STMT -> EXPR · >= EXPR, return
JUST_STMT -> EXPR · <= EXPR, double
JUST_STMT -> EXPR · > EXPR, if
JUST_STMT -> EXPR · == EXPR, void
JUST_STMT -> EXPR · == EXPR, double
JUST_STMT -> EXPR · > EXPR, }
JUST_STMT -> EXPR · >= EXPR, for
STMT -> EXPR ·, }
JUST_STMT -> EXPR · >= EXPR, void

[node|224]: [begin]
FACTOR -> CONST ·, while
FACTOR -> CONST ·, if
FACTOR -> CONST ·, ==
FACTOR -> CONST ·, !=
FACTOR -> CONST ·, *
FACTOR -> CONST ·, double
FACTOR -> CONST ·, +
FACTOR -> CONST ·, float
FACTOR -> CONST ·, int
FACTOR -> CONST ·, return
FACTOR -> CONST ·, void
FACTOR -> CONST ·, >=
FACTOR -> CONST ·, for
FACTOR -> CONST ·, >
FACTOR -> CONST ·, ID
FACTOR -> CONST ·, /
FACTOR -> CONST ·, }
FACTOR -> CONST ·, -
FACTOR -> CONST ·, <=
FACTOR -> CONST ·, <

[node|225]: [begin]
ITER_STMT -> for ( STMT · ; STMT ; STMT ) CODE_BLOCK, )
ITER_STMT -> for ( STMT · ; STMT ; STMT ) STMT, )

[node|226]: [begin]
ITER_STMT -> while ( STMT · ) CODE_BLOCK, )
ITER_STMT -> while ( STMT · ) STMT, )

[node|227]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), <
CALL_STMT -> ID ( PARG_LIST · ), >
CALL_STMT -> ID ( PARG_LIST · ), )
CALL_STMT -> ID ( PARG_LIST · ), !=
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), >=
CALL_STMT -> ID ( PARG_LIST · ), <=
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), ==

[node|228]: [begin]
ASSIGN_STMT -> ID = EXPR ·, )

[node|229]: [begin]
FACTOR -> ( EXPR ) ·, >=
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, ==
FACTOR -> ( EXPR ) ·, >
FACTOR -> ( EXPR ) ·, !=
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, <
FACTOR -> ( EXPR ) ·, <=
FACTOR -> ( EXPR ) ·, )

[node|230]: [begin]
IF_STMT -> if ( STMT · ) STMT ; else IF_STMT, )
IF_STMT -> if ( STMT · ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> if ( STMT · ) CODE_BLOCK else IF_STMT, )
IF_STMT -> if ( STMT · ) STMT ; else CODE_BLOCK, )
IF_STMT -> if ( STMT · ) STMT ;, )
IF_STMT -> if ( STMT · ) CODE_BLOCK, )

[node|231]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> · ID, )
INIT_STMT -> TYPE_SPEC ID = · EXPR, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|232]: [begin]
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> ·, !=
EXPR2 -> + TERM · EXPR2, !=
EXPR2 -> ·, ==
EXPR2 -> + TERM · EXPR2, ==
EXPR2 -> + TERM · EXPR2, <
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> + TERM · EXPR2, >=
EXPR2 -> ·, >=
EXPR2 -> + TERM · EXPR2, >
EXPR2 -> ·, >
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> ·, )
EXPR2 -> + TERM · EXPR2, )
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> ·, <=
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> + TERM · EXPR2, <=
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, <
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> ·, <

[node|233]: [begin]
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> - TERM · EXPR2, <
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> ·, ==
EXPR2 -> ·, !=
EXPR2 -> - TERM · EXPR2, ==
EXPR2 -> - TERM · EXPR2, >
EXPR2 -> ·, >=
EXPR2 -> ·, >
EXPR2 -> - TERM · EXPR2, >=
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> - TERM · EXPR2, <=
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> ·, )
EXPR2 -> ·, <=
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> - TERM · EXPR2, )
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> ·, <
EXPR2 -> - TERM · EXPR2, !=

[node|234]: [begin]
JUST_STMT -> EXPR >= EXPR ·, )

[node|235]: [begin]
JUST_STMT -> EXPR > EXPR ·, )

[node|236]: [begin]
JUST_STMT -> EXPR == EXPR ·, )

[node|237]: [begin]
JUST_STMT -> EXPR < EXPR ·, )

[node|238]: [begin]
JUST_STMT -> EXPR <= EXPR ·, )

[node|239]: [begin]
JUST_STMT -> EXPR != EXPR ·, )

[node|240]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK ·, while
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, float
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, void
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, for
IF_STMT -> if ( STMT ) CODE_BLOCK ·, double
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, return
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, double
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, if
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, for
IF_STMT -> if ( STMT ) CODE_BLOCK ·, for
IF_STMT -> if ( STMT ) CODE_BLOCK ·, if
IF_STMT -> if ( STMT ) CODE_BLOCK ·, return
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, double
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, return
IF_STMT -> if ( STMT ) CODE_BLOCK ·, void
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, while
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, if
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) CODE_BLOCK ·, }
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, int
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, float
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, void
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, }
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, while
IF_STMT -> if ( STMT ) CODE_BLOCK ·, float
IF_STMT -> if ( STMT ) CODE_BLOCK ·, int
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, ID
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, }
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, int
IF_STMT -> if ( STMT ) CODE_BLOCK ·, ID

[node|241]: [begin]
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, int
IF_STMT -> if ( STMT ) STMT · ;, ID
IF_STMT -> if ( STMT ) STMT · ;, double
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, for
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, float
IF_STMT -> if ( STMT ) STMT · ;, while
IF_STMT -> if ( STMT ) STMT · ;, float
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, double
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, for
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, if
IF_STMT -> if ( STMT ) STMT · ;, int
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, return
IF_STMT -> if ( STMT ) STMT · ;, void
IF_STMT -> if ( STMT ) STMT · ;, }
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, while
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, if
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, void
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, }
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, double
IF_STMT -> if ( STMT ) STMT · ;, if
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, }
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, void
IF_STMT -> if ( STMT ) STMT · ;, return
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, float
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, while
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, return
IF_STMT -> if ( STMT ) STMT · ;, for
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, ID
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, int

[node|242]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
CODE_BLOCK -> { · STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
CODE_BLOCK -> { · STMT_LIST }, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
CODE_BLOCK -> { · STMT_LIST }, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
CODE_BLOCK -> { · STMT_LIST }, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
CODE_BLOCK -> { · STMT_LIST }, while
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
CODE_BLOCK -> { · STMT_LIST }, else
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> { · STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
CODE_BLOCK -> { · STMT_LIST }, ID
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
CODE_BLOCK -> { · STMT_LIST }, void
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
CODE_BLOCK -> { · STMT_LIST }, return
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
CODE_BLOCK -> { · STMT_LIST }, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|243]: [begin]
TERM2 -> * FACTOR TERM2 ·, ;
TERM2 -> * FACTOR TERM2 ·, ==
TERM2 -> * FACTOR TERM2 ·, !=
TERM2 -> * FACTOR TERM2 ·, +
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, <
TERM2 -> * FACTOR TERM2 ·, <=
TERM2 -> * FACTOR TERM2 ·, >=
TERM2 -> * FACTOR TERM2 ·, >

[node|244]: [begin]
TERM2 -> / FACTOR TERM2 ·, ;
TERM2 -> / FACTOR TERM2 ·, ==
TERM2 -> / FACTOR TERM2 ·, !=
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, <
TERM2 -> / FACTOR TERM2 ·, <=
TERM2 -> / FACTOR TERM2 ·, >=
TERM2 -> / FACTOR TERM2 ·, >

[node|245]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, int
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, return
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, if
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, float
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, void
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, double
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
FACTOR -> · ID, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, double
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, ID
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, void
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, float
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, while
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, }
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, return
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, <=
FACTOR -> · ID, >=
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, }
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
JUST_STMT -> · EXPR != EXPR, )
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, ID
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, for
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )

[node|246]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
JUST_STMT -> · EXPR == EXPR, ;
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
STMT -> · IF_STMT, ;
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, ;
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;

[node|247]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
JUST_STMT -> · EXPR == EXPR, ;
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
ITER_STMT -> while ( STMT ) · STMT, ;
STMT -> · IF_STMT, ;
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
CODE_BLOCK -> · { STMT_LIST }, ;
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
ITER_STMT -> while ( STMT ) · CODE_BLOCK, ;
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;

[node|248]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, >
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, <
CALL_STMT -> ID ( PARG_LIST ) ·, !=
CALL_STMT -> ID ( PARG_LIST ) ·, ;
CALL_STMT -> ID ( PARG_LIST ) ·, <=
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, >=
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, ==

[node|249]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
JUST_STMT -> · EXPR == EXPR, ;
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
STMT -> · IF_STMT, ;
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
CODE_BLOCK -> · { STMT_LIST }, ;
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
CODE_BLOCK -> · { STMT_LIST }, else
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, ;
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, ;
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, ;
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
IF_STMT -> if ( STMT ) · STMT ;, ;
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
FACTOR -> · ID, +
IF_STMT -> if ( STMT ) · CODE_BLOCK, ;
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;

[node|250]: [begin]
EXPR2 -> + TERM EXPR2 ·, <
EXPR2 -> + TERM EXPR2 ·, >
EXPR2 -> + TERM EXPR2 ·, ==
EXPR2 -> + TERM EXPR2 ·, >=
EXPR2 -> + TERM EXPR2 ·, <=
EXPR2 -> + TERM EXPR2 ·, ;
EXPR2 -> + TERM EXPR2 ·, !=

[node|251]: [begin]
EXPR2 -> - TERM EXPR2 ·, !=
EXPR2 -> - TERM EXPR2 ·, ==
EXPR2 -> - TERM EXPR2 ·, ;
EXPR2 -> - TERM EXPR2 ·, >=
EXPR2 -> - TERM EXPR2 ·, >
EXPR2 -> - TERM EXPR2 ·, <=
EXPR2 -> - TERM EXPR2 ·, <

[node|252]: [begin]
TERM2 -> * FACTOR TERM2 ·, ==
TERM2 -> * FACTOR TERM2 ·, !=
TERM2 -> * FACTOR TERM2 ·, +
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, <
TERM2 -> * FACTOR TERM2 ·, )
TERM2 -> * FACTOR TERM2 ·, <=
TERM2 -> * FACTOR TERM2 ·, >=
TERM2 -> * FACTOR TERM2 ·, >

[node|253]: [begin]
TERM2 -> / FACTOR TERM2 ·, ==
TERM2 -> / FACTOR TERM2 ·, !=
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, <
TERM2 -> / FACTOR TERM2 ·, )
TERM2 -> / FACTOR TERM2 ·, <=
TERM2 -> / FACTOR TERM2 ·, >=
TERM2 -> / FACTOR TERM2 ·, >

[node|254]: [begin]
TERM2 -> * · FACTOR TERM2, <
FACTOR -> · CONST, /
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ID, /
TERM2 -> * · FACTOR TERM2, ID
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · CONST, <
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · ( EXPR ), for
TERM2 -> * · FACTOR TERM2, !=
FACTOR -> · CALL_STMT, ID
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
FACTOR -> · ( EXPR ), <
FACTOR -> · CALL_STMT, for
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
TERM2 -> * · FACTOR TERM2, >=
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
TERM2 -> * · FACTOR TERM2, -
TERM2 -> * · FACTOR TERM2, double
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · ID, >
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
TERM2 -> * · FACTOR TERM2, <=
FACTOR -> · ( EXPR ), while
FACTOR -> · CONST, >=
FACTOR -> · ID, while
TERM2 -> * · FACTOR TERM2, for
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
TERM2 -> * · FACTOR TERM2, return
FACTOR -> · CONST, double
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
FACTOR -> · CONST, for
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CONST, if
FACTOR -> · CALL_STMT, <=
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · ( EXPR ), float
TERM2 -> * · FACTOR TERM2, int
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
FACTOR -> · ( EXPR ), }
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
FACTOR -> · CONST, ID
FACTOR -> · CALL_STMT, int
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, void
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
FACTOR -> · ( EXPR ), <=
CALL_STMT -> · ID ( PARG_LIST ), ID
CALL_STMT -> · ID ( PARG_LIST ), -
TERM2 -> * · FACTOR TERM2, }
TERM2 -> * · FACTOR TERM2, void
FACTOR -> · ( EXPR ), !=
FACTOR -> · ID, !=
FACTOR -> · ( EXPR ), int
TERM2 -> * · FACTOR TERM2, ==
FACTOR -> · ( EXPR ), >
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
TERM2 -> * · FACTOR TERM2, float
TERM2 -> * · FACTOR TERM2, while
FACTOR -> · ID, <=
FACTOR -> · ID, >=
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, -
FACTOR -> · CONST, return
TERM2 -> * · FACTOR TERM2, >
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
TERM2 -> * · FACTOR TERM2, if
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
FACTOR -> · CALL_STMT, /

[node|255]: [begin]
TERM -> FACTOR TERM2 ·, float
TERM -> FACTOR TERM2 ·, <=
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, double
TERM -> FACTOR TERM2 ·, while
TERM -> FACTOR TERM2 ·, ID
TERM -> FACTOR TERM2 ·, ==
TERM -> FACTOR TERM2 ·, >
TERM -> FACTOR TERM2 ·, !=
TERM -> FACTOR TERM2 ·, >=
TERM -> FACTOR TERM2 ·, int
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, return
TERM -> FACTOR TERM2 ·, }
TERM -> FACTOR TERM2 ·, <
TERM -> FACTOR TERM2 ·, if
TERM -> FACTOR TERM2 ·, void
TERM -> FACTOR TERM2 ·, for

[node|256]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), }
TERM2 -> / · FACTOR TERM2, <
FACTOR -> · CONST, <
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
TERM2 -> / · FACTOR TERM2, +
FACTOR -> · ( EXPR ), for
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, ID
TERM2 -> / · FACTOR TERM2, for
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), <=
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
FACTOR -> · ( EXPR ), <
FACTOR -> · CALL_STMT, for
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), >=
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · ID, >
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · CONST, >=
FACTOR -> · ID, while
TERM2 -> / · FACTOR TERM2, -
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TERM2 -> / · FACTOR TERM2, int
FACTOR -> · CONST, for
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CONST, if
FACTOR -> · ID, if
FACTOR -> · CALL_STMT, <=
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), >
FACTOR -> · ( EXPR ), float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
TERM2 -> / · FACTOR TERM2, <=
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
FACTOR -> · ( EXPR ), }
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
FACTOR -> · CONST, ID
TERM2 -> / · FACTOR TERM2, }
TERM2 -> / · FACTOR TERM2, >
FACTOR -> · CALL_STMT, int
FACTOR -> · CALL_STMT, ==
TERM2 -> / · FACTOR TERM2, !=
FACTOR -> · CONST, void
FACTOR -> · CONST, !=
TERM2 -> / · FACTOR TERM2, void
FACTOR -> · ( EXPR ), <=
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
TERM2 -> / · FACTOR TERM2, return
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM2 -> / · FACTOR TERM2, float
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
FACTOR -> · ID, !=
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), >
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
TERM2 -> / · FACTOR TERM2, ID
FACTOR -> · CONST, }
TERM2 -> / · FACTOR TERM2, if
FACTOR -> · CALL_STMT, if
FACTOR -> · ID, <=
FACTOR -> · ID, >=
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, -
FACTOR -> · CONST, return
TERM2 -> / · FACTOR TERM2, double
FACTOR -> · ID, }
FACTOR -> · ID, +
TERM2 -> / · FACTOR TERM2, >=
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
TERM2 -> / · FACTOR TERM2, ==
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TERM2 -> / · FACTOR TERM2, while
FACTOR -> · CALL_STMT, /

[node|257]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), <
CALL_STMT -> ID ( · PARG_LIST ), -
CALL_STMT -> ID ( · PARG_LIST ), !=
CALL_STMT -> ID ( · PARG_LIST ), ==
CALL_STMT -> ID ( · PARG_LIST ), float
CALL_STMT -> ID ( · PARG_LIST ), int
CALL_STMT -> ID ( · PARG_LIST ), return
CALL_STMT -> ID ( · PARG_LIST ), >=
CALL_STMT -> ID ( · PARG_LIST ), /
CALL_STMT -> ID ( · PARG_LIST ), >
CALL_STMT -> ID ( · PARG_LIST ), void
CALL_STMT -> ID ( · PARG_LIST ), *
CALL_STMT -> ID ( · PARG_LIST ), double
PARG_LIST -> ·, )
CALL_STMT -> ID ( · PARG_LIST ), ID
CALL_STMT -> ID ( · PARG_LIST ), }
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), while
CALL_STMT -> ID ( · PARG_LIST ), if
PARG -> · ID, )
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), <=
CALL_STMT -> ID ( · PARG_LIST ), for
PARG_LIST -> · PARG, )

[node|258]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ID, ID
EXPR -> · TERM EXPR2, int
ASSIGN_STMT -> ID = · EXPR, for
FACTOR -> · ID, void
FACTOR -> · ( EXPR ), for
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, double
TERM -> · FACTOR TERM2 , while
CALL_STMT -> · ID ( PARG_LIST ), *
ASSIGN_STMT -> ID = · EXPR, float
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
ASSIGN_STMT -> ID = · EXPR, void
ASSIGN_STMT -> ID = · EXPR, return
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
ASSIGN_STMT -> ID = · EXPR, if
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
ASSIGN_STMT -> ID = · EXPR, double
FACTOR -> · CONST, double
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
ASSIGN_STMT -> ID = · EXPR, while
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
EXPR -> · TERM EXPR2, return
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, ID
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
ASSIGN_STMT -> ID = · EXPR, }
FACTOR -> · ID, double
ASSIGN_STMT -> ID = · EXPR, ID
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
TERM -> · FACTOR TERM2 , double
FACTOR -> · CALL_STMT, while
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
EXPR -> · TERM EXPR2, }
CALL_STMT -> · ID ( PARG_LIST ), while
EXPR -> · TERM EXPR2, if
ASSIGN_STMT -> ID = · EXPR, int
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|259]: [begin]
FACTOR -> ( EXPR · ), ==
FACTOR -> ( EXPR · ), >
FACTOR -> ( EXPR · ), !=
FACTOR -> ( EXPR · ), double
FACTOR -> ( EXPR · ), while
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), ID
FACTOR -> ( EXPR · ), float
FACTOR -> ( EXPR · ), for
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), <
FACTOR -> ( EXPR · ), void
FACTOR -> ( EXPR · ), if
FACTOR -> ( EXPR · ), <=
FACTOR -> ( EXPR · ), }
FACTOR -> ( EXPR · ), return
FACTOR -> ( EXPR · ), int
FACTOR -> ( EXPR · ), >=
FACTOR -> ( EXPR · ), /

[node|260]: [begin]
INIT_STMT -> TYPE_SPEC ID ·, }
INIT_STMT -> TYPE_SPEC ID · = EXPR, void
INIT_STMT -> TYPE_SPEC ID · = EXPR, }
INIT_STMT -> TYPE_SPEC ID ·, ID
INIT_STMT -> TYPE_SPEC ID ·, for
INIT_STMT -> TYPE_SPEC ID · = EXPR, return
INIT_STMT -> TYPE_SPEC ID · = EXPR, int
INIT_STMT -> TYPE_SPEC ID · = EXPR, ID
INIT_STMT -> TYPE_SPEC ID ·, if
INIT_STMT -> TYPE_SPEC ID · = EXPR, double
INIT_STMT -> TYPE_SPEC ID ·, void
INIT_STMT -> TYPE_SPEC ID ·, double
INIT_STMT -> TYPE_SPEC ID ·, while
INIT_STMT -> TYPE_SPEC ID ·, float
INIT_STMT -> TYPE_SPEC ID · = EXPR, while
INIT_STMT -> TYPE_SPEC ID · = EXPR, float
INIT_STMT -> TYPE_SPEC ID · = EXPR, for
INIT_STMT -> TYPE_SPEC ID ·, int
INIT_STMT -> TYPE_SPEC ID · = EXPR, if
INIT_STMT -> TYPE_SPEC ID ·, return

[node|261]: [begin]
CODE_BLOCK -> { STMT_LIST · }, while
CODE_BLOCK -> { STMT_LIST · }, if
CODE_BLOCK -> { STMT_LIST · }, double
CODE_BLOCK -> { STMT_LIST · }, float
CODE_BLOCK -> { STMT_LIST · }, int
CODE_BLOCK -> { STMT_LIST · }, return
CODE_BLOCK -> { STMT_LIST · }, ID
CODE_BLOCK -> { STMT_LIST · }, }
CODE_BLOCK -> { STMT_LIST · }, void
CODE_BLOCK -> { STMT_LIST · }, for

[node|262]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
EXPR2 -> + · TERM EXPR2, >=
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR2 -> + · TERM EXPR2, double
FACTOR -> · CONST, <
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · ID, void
FACTOR -> · ( EXPR ), for
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
TERM -> · FACTOR TERM2 , while
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · CALL_STMT, for
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
EXPR2 -> + · TERM EXPR2, <
FACTOR -> · CALL_STMT, !=
EXPR2 -> + · TERM EXPR2, while
EXPR2 -> + · TERM EXPR2, ==
EXPR2 -> + · TERM EXPR2, float
EXPR2 -> + · TERM EXPR2, int
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
EXPR2 -> + · TERM EXPR2, >
FACTOR -> · ID, >
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · CONST, >=
EXPR2 -> + · TERM EXPR2, for
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
EXPR2 -> + · TERM EXPR2, if
FACTOR -> · CONST, for
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CONST, if
FACTOR -> · ID, if
FACTOR -> · CALL_STMT, <=
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
EXPR2 -> + · TERM EXPR2, void
CALL_STMT -> · ID ( PARG_LIST ), >
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
CALL_STMT -> · ID ( PARG_LIST ), for
EXPR2 -> + · TERM EXPR2, ID
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
FACTOR -> · ( EXPR ), }
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, void
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
FACTOR -> · ( EXPR ), <=
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), >
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
EXPR2 -> + · TERM EXPR2, }
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · ID, <=
FACTOR -> · ID, >=
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
EXPR2 -> + · TERM EXPR2, <=
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
TERM -> · FACTOR TERM2 , double
EXPR2 -> + · TERM EXPR2, !=
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
EXPR2 -> + · TERM EXPR2, return
CALL_STMT -> · ID ( PARG_LIST ), while
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|263]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · CONST, <
EXPR2 -> - · TERM EXPR2, void
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · ( EXPR ), for
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
FACTOR -> · CALL_STMT, double
TERM -> · FACTOR TERM2 , while
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · CALL_STMT, for
FACTOR -> · ( EXPR ), ==
EXPR2 -> - · TERM EXPR2, <=
FACTOR -> · CONST, <=
FACTOR -> · CONST, while
FACTOR -> · ( EXPR ), >=
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR2 -> - · TERM EXPR2, if
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · ID, >
FACTOR -> · CONST, float
EXPR2 -> - · TERM EXPR2, }
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · CONST, >=
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
EXPR2 -> - · TERM EXPR2, int
EXPR2 -> - · TERM EXPR2, float
FACTOR -> · CONST, for
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CONST, if
FACTOR -> · ID, if
FACTOR -> · CALL_STMT, <=
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
CALL_STMT -> · ID ( PARG_LIST ), >
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
EXPR2 -> - · TERM EXPR2, while
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
FACTOR -> · ( EXPR ), }
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
TERM -> · FACTOR TERM2 , return
EXPR2 -> - · TERM EXPR2, >
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
EXPR2 -> - · TERM EXPR2, double
FACTOR -> · CALL_STMT, int
FACTOR -> · CALL_STMT, ==
EXPR2 -> - · TERM EXPR2, <
FACTOR -> · CONST, void
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
FACTOR -> · ( EXPR ), <=
EXPR2 -> - · TERM EXPR2, >=
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , >
EXPR2 -> - · TERM EXPR2, return
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
FACTOR -> · ( EXPR ), int
FACTOR -> · ( EXPR ), >
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
EXPR2 -> - · TERM EXPR2, ID
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · ID, <=
FACTOR -> · ID, >=
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
EXPR2 -> - · TERM EXPR2, !=
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
TERM -> · FACTOR TERM2 , double
FACTOR -> · CALL_STMT, while
TERM -> · FACTOR TERM2 , <
EXPR2 -> - · TERM EXPR2, ==
FACTOR -> · CALL_STMT, +
FACTOR -> · CALL_STMT, <
FACTOR -> · ID, return
EXPR2 -> - · TERM EXPR2, for
CALL_STMT -> · ID ( PARG_LIST ), while
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|264]: [begin]
EXPR -> TERM EXPR2 ·, if
EXPR -> TERM EXPR2 ·, !=
EXPR -> TERM EXPR2 ·, ID
EXPR -> TERM EXPR2 ·, >
EXPR -> TERM EXPR2 ·, for
EXPR -> TERM EXPR2 ·, <
EXPR -> TERM EXPR2 ·, while
EXPR -> TERM EXPR2 ·, int
EXPR -> TERM EXPR2 ·, double
EXPR -> TERM EXPR2 ·, }
EXPR -> TERM EXPR2 ·, ==
EXPR -> TERM EXPR2 ·, >=
EXPR -> TERM EXPR2 ·, void
EXPR -> TERM EXPR2 ·, <=
EXPR -> TERM EXPR2 ·, return
EXPR -> TERM EXPR2 ·, float

[node|265]: [begin]
FACTOR -> CALL_STMT ·, void
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, -
FACTOR -> CALL_STMT ·, return
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, }
FACTOR -> CALL_STMT ·, double
FACTOR -> CALL_STMT ·, ID
FACTOR -> CALL_STMT ·, int
FACTOR -> CALL_STMT ·, if
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, for
FACTOR -> CALL_STMT ·, float
FACTOR -> CALL_STMT ·, while

[node|266]: [begin]
TERM2 -> ·, if
TERM2 -> ·, int
TERM2 -> · * FACTOR TERM2, void
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, return
TERM2 -> ·, for
TERM2 -> · * FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, float
TERM -> FACTOR · TERM2, ID
TERM2 -> ·, while
TERM2 -> ·, float
TERM2 -> · / FACTOR TERM2, void
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, for
TERM2 -> ·, double
TERM2 -> ·, }
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · / FACTOR TERM2, double
TERM -> FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, while
TERM -> FACTOR · TERM2, return
TERM -> FACTOR · TERM2, int
TERM -> FACTOR · TERM2, for
TERM2 -> ·, void
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, float
TERM2 -> · / FACTOR TERM2, while
TERM -> FACTOR · TERM2, while
TERM2 -> · / FACTOR TERM2, for
TERM2 -> · * FACTOR TERM2, return
TERM -> FACTOR · TERM2, if
TERM2 -> · * FACTOR TERM2, int
TERM2 -> · / FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, int
TERM2 -> · / FACTOR TERM2, if
TERM -> FACTOR · TERM2, void
TERM -> FACTOR · TERM2, }
TERM2 -> ·, ID
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, if
TERM2 -> ·, +
TERM -> FACTOR · TERM2, double
TERM2 -> · / FACTOR TERM2, ID
TERM -> FACTOR · TERM2, float
TERM -> FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, ID

[node|267]: [begin]
FACTOR -> ID ·, int
CALL_STMT -> ID · ( PARG_LIST ), }
CALL_STMT -> ID · ( PARG_LIST ), double
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), while
FACTOR -> ID ·, for
FACTOR -> ID ·, void
CALL_STMT -> ID · ( PARG_LIST ), float
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, ID
FACTOR -> ID ·, double
CALL_STMT -> ID · ( PARG_LIST ), for
FACTOR -> ID ·, float
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), *
CALL_STMT -> ID · ( PARG_LIST ), void
FACTOR -> ID ·, return
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), ID
CALL_STMT -> ID · ( PARG_LIST ), if
CALL_STMT -> ID · ( PARG_LIST ), return
FACTOR -> ID ·, }
CALL_STMT -> ID · ( PARG_LIST ), int
FACTOR -> ID ·, while
FACTOR -> ID ·, +
FACTOR -> ID ·, if

[node|268]: [begin]
FACTOR -> · CONST, /
TERM -> · FACTOR TERM2 , )
FACTOR -> ( · EXPR ), void
FACTOR -> · ID, /
FACTOR -> · ( EXPR ), )
FACTOR -> ( · EXPR ), return
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> ( · EXPR ), if
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, -
FACTOR -> · ID, +
FACTOR -> ( · EXPR ), double
FACTOR -> · ID, )
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), for
FACTOR -> ( · EXPR ), *
FACTOR -> ( · EXPR ), /
TERM -> · FACTOR TERM2 , -
FACTOR -> · CALL_STMT, -
FACTOR -> · CALL_STMT, +
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> ( · EXPR ), -
FACTOR -> ( · EXPR ), int
FACTOR -> ( · EXPR ), float
FACTOR -> · CONST, +
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> ( · EXPR ), while
FACTOR -> · ( EXPR ), -
FACTOR -> ( · EXPR ), }
FACTOR -> ( · EXPR ), +
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, /
FACTOR -> ( · EXPR ), ID
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), *

[node|269]: [begin]
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> ·, while
EXPR2 -> ·, float
EXPR -> TERM · EXPR2, void
EXPR -> TERM · EXPR2, }
EXPR -> TERM · EXPR2, double
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> ·, return
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, float
EXPR -> TERM · EXPR2, ID
EXPR2 -> · + TERM EXPR2, void
EXPR -> TERM · EXPR2, if
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> ·, for
EXPR -> TERM · EXPR2, while
EXPR -> TERM · EXPR2, float
EXPR2 -> ·, if
EXPR2 -> ·, void
EXPR2 -> ·, double
EXPR2 -> · + TERM EXPR2, for
EXPR -> TERM · EXPR2, return
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> · + TERM EXPR2, int
EXPR2 -> ·, ID
EXPR2 -> ·, }
EXPR -> TERM · EXPR2, for
EXPR -> TERM · EXPR2, int
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, return

[node|270]: [begin]
RTN_STMT -> return EXPR ·, double
RTN_STMT -> return EXPR ·, ID
RTN_STMT -> return EXPR ·, int
RTN_STMT -> return EXPR ·, if
RTN_STMT -> return EXPR ·, for
RTN_STMT -> return EXPR ·, float
RTN_STMT -> return EXPR ·, while
RTN_STMT -> return EXPR ·, void
RTN_STMT -> return EXPR ·, return
RTN_STMT -> return EXPR ·, }

[node|271]: [begin]
FACTOR -> CONST ·, while
FACTOR -> CONST ·, if
FACTOR -> CONST ·, *
FACTOR -> CONST ·, double
FACTOR -> CONST ·, +
FACTOR -> CONST ·, float
FACTOR -> CONST ·, int
FACTOR -> CONST ·, return
FACTOR -> CONST ·, /
FACTOR -> CONST ·, ID
FACTOR -> CONST ·, }
FACTOR -> CONST ·, -
FACTOR -> CONST ·, void
FACTOR -> CONST ·, for

[node|272]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
JUST_STMT -> EXPR >= · EXPR, double
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ID, ID
EXPR -> · TERM EXPR2, int
JUST_STMT -> EXPR >= · EXPR, ID
FACTOR -> · ( EXPR ), for
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
TERM -> · FACTOR TERM2 , while
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
JUST_STMT -> EXPR >= · EXPR, if
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
JUST_STMT -> EXPR >= · EXPR, float
FACTOR -> · CONST, -
FACTOR -> · CONST, double
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
JUST_STMT -> EXPR >= · EXPR, }
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
EXPR -> · TERM EXPR2, return
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, for
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
JUST_STMT -> EXPR >= · EXPR, int
FACTOR -> · ( EXPR ), *
JUST_STMT -> EXPR >= · EXPR, while
FACTOR -> · ( EXPR ), ID
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, ID
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
JUST_STMT -> EXPR >= · EXPR, void
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
JUST_STMT -> EXPR >= · EXPR, for
FACTOR -> · ID, }
FACTOR -> · ID, +
JUST_STMT -> EXPR >= · EXPR, return
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
TERM -> · FACTOR TERM2 , double
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, +
EXPR -> · TERM EXPR2, }
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), while
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|273]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), }
JUST_STMT -> EXPR > · EXPR, for
FACTOR -> · ID, ID
EXPR -> · TERM EXPR2, int
FACTOR -> · ID, void
FACTOR -> · ( EXPR ), for
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, double
TERM -> · FACTOR TERM2 , while
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
JUST_STMT -> EXPR > · EXPR, int
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
EXPR -> · TERM EXPR2, return
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), *
JUST_STMT -> EXPR > · EXPR, }
FACTOR -> · ( EXPR ), ID
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, ID
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
JUST_STMT -> EXPR > · EXPR, return
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
JUST_STMT -> EXPR > · EXPR, float
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , -
JUST_STMT -> EXPR > · EXPR, void
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
JUST_STMT -> EXPR > · EXPR, if
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
JUST_STMT -> EXPR > · EXPR, ID
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
JUST_STMT -> EXPR > · EXPR, double
FACTOR -> · CALL_STMT, float
TERM -> · FACTOR TERM2 , double
FACTOR -> · CALL_STMT, while
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
EXPR -> · TERM EXPR2, }
CALL_STMT -> · ID ( PARG_LIST ), while
EXPR -> · TERM EXPR2, if
JUST_STMT -> EXPR > · EXPR, while
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|274]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
JUST_STMT -> EXPR == · EXPR, if
JUST_STMT -> EXPR == · EXPR, return
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ID, ID
EXPR -> · TERM EXPR2, int
FACTOR -> · ( EXPR ), for
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, ID
JUST_STMT -> EXPR == · EXPR, float
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, double
TERM -> · FACTOR TERM2 , while
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
JUST_STMT -> EXPR == · EXPR, }
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
EXPR -> · TERM EXPR2, return
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, for
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, ID
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , -
JUST_STMT -> EXPR == · EXPR, for
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , +
JUST_STMT -> EXPR == · EXPR, int
FACTOR -> · ( EXPR ), int
JUST_STMT -> EXPR == · EXPR, while
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
TERM -> · FACTOR TERM2 , double
FACTOR -> · CALL_STMT, while
JUST_STMT -> EXPR == · EXPR, double
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, +
EXPR -> · TERM EXPR2, }
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), while
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> EXPR == · EXPR, ID
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
JUST_STMT -> EXPR == · EXPR, void
TERM -> · FACTOR TERM2 , }

[node|275]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
JUST_STMT -> EXPR < · EXPR, }
JUST_STMT -> EXPR < · EXPR, double
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ID, ID
EXPR -> · TERM EXPR2, int
FACTOR -> · ( EXPR ), for
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, double
TERM -> · FACTOR TERM2 , while
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
JUST_STMT -> EXPR < · EXPR, for
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
JUST_STMT -> EXPR < · EXPR, while
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
EXPR -> · TERM EXPR2, return
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
JUST_STMT -> EXPR < · EXPR, if
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, for
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ( EXPR ), *
JUST_STMT -> EXPR < · EXPR, ID
FACTOR -> · ( EXPR ), ID
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), }
JUST_STMT -> EXPR < · EXPR, void
EXPR -> · TERM EXPR2, ID
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
JUST_STMT -> EXPR < · EXPR, float
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
JUST_STMT -> EXPR < · EXPR, return
FACTOR -> · CALL_STMT, float
TERM -> · FACTOR TERM2 , double
FACTOR -> · CALL_STMT, while
JUST_STMT -> EXPR < · EXPR, int
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, +
EXPR -> · TERM EXPR2, }
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), while
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|276]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
JUST_STMT -> EXPR <= · EXPR, double
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ID, ID
EXPR -> · TERM EXPR2, int
JUST_STMT -> EXPR <= · EXPR, for
FACTOR -> · ID, void
FACTOR -> · ( EXPR ), for
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
TERM -> · FACTOR TERM2 , while
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
JUST_STMT -> EXPR <= · EXPR, while
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
JUST_STMT -> EXPR <= · EXPR, if
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
EXPR -> · TERM EXPR2, return
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
JUST_STMT -> EXPR <= · EXPR, float
JUST_STMT -> EXPR <= · EXPR, int
EXPR -> · TERM EXPR2, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ID, for
JUST_STMT -> EXPR <= · EXPR, ID
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, ID
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , -
JUST_STMT -> EXPR <= · EXPR, void
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
TERM -> · FACTOR TERM2 , double
JUST_STMT -> EXPR <= · EXPR, return
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
EXPR -> · TERM EXPR2, }
CALL_STMT -> · ID ( PARG_LIST ), while
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, +
FACTOR -> · CONST, int
JUST_STMT -> EXPR <= · EXPR, }
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|277]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ID, ID
EXPR -> · TERM EXPR2, int
FACTOR -> · ID, void
FACTOR -> · ( EXPR ), for
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
JUST_STMT -> EXPR != · EXPR, return
TERM -> · FACTOR TERM2 , while
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
JUST_STMT -> EXPR != · EXPR, if
FACTOR -> · CALL_STMT, for
JUST_STMT -> EXPR != · EXPR, }
JUST_STMT -> EXPR != · EXPR, ID
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
JUST_STMT -> EXPR != · EXPR, double
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
JUST_STMT -> EXPR != · EXPR, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
JUST_STMT -> EXPR != · EXPR, void
JUST_STMT -> EXPR != · EXPR, for
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
EXPR -> · TERM EXPR2, return
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, ID
JUST_STMT -> EXPR != · EXPR, while
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
JUST_STMT -> EXPR != · EXPR, int
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
TERM -> · FACTOR TERM2 , double
EXPR -> · TERM EXPR2, void
EXPR -> · TERM EXPR2, }
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), while
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|278]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
JUST_STMT -> · EXPR == EXPR, ;
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
ITER_STMT -> for ( STMT ; · STMT ; STMT ) STMT, )
STMT -> · IF_STMT, ;
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ITER_STMT -> for ( STMT ; · STMT ; STMT ) CODE_BLOCK, )
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;

[node|279]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
FACTOR -> · ID, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ITER_STMT -> while ( STMT ) · STMT, )
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
ITER_STMT -> while ( STMT ) · CODE_BLOCK, )
FACTOR -> · ID, -
JUST_STMT -> · EXPR != EXPR, )
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
CODE_BLOCK -> · { STMT_LIST }, )

[node|280]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, >
CALL_STMT -> ID ( PARG_LIST ) ·, )
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, <
CALL_STMT -> ID ( PARG_LIST ) ·, !=
CALL_STMT -> ID ( PARG_LIST ) ·, <=
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, >=
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, ==

[node|281]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
STMT -> · EXPR, ;
IF_STMT -> if ( STMT ) · CODE_BLOCK, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
IF_STMT -> if ( STMT ) · STMT ; else CODE_BLOCK, )
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
JUST_STMT -> · EXPR == EXPR, ;
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
FACTOR -> · ID, >
IF_STMT -> if ( STMT ) · STMT ; else IF_STMT, )
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
STMT -> · IF_STMT, ;
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
IF_STMT -> if ( STMT ) · CODE_BLOCK else CODE_BLOCK, )
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
CODE_BLOCK -> · { STMT_LIST }, else
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
IF_STMT -> if ( STMT ) · STMT ;, )
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
IF_STMT -> if ( STMT ) · CODE_BLOCK else IF_STMT, )
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;
CODE_BLOCK -> · { STMT_LIST }, )

[node|282]: [begin]
INIT_STMT -> TYPE_SPEC ID = EXPR ·, )

[node|283]: [begin]
EXPR2 -> + TERM EXPR2 ·, <
EXPR2 -> + TERM EXPR2 ·, )
EXPR2 -> + TERM EXPR2 ·, >
EXPR2 -> + TERM EXPR2 ·, ==
EXPR2 -> + TERM EXPR2 ·, >=
EXPR2 -> + TERM EXPR2 ·, <=
EXPR2 -> + TERM EXPR2 ·, !=

[node|284]: [begin]
EXPR2 -> - TERM EXPR2 ·, !=
EXPR2 -> - TERM EXPR2 ·, )
EXPR2 -> - TERM EXPR2 ·, ==
EXPR2 -> - TERM EXPR2 ·, >=
EXPR2 -> - TERM EXPR2 ·, >
EXPR2 -> - TERM EXPR2 ·, <=
EXPR2 -> - TERM EXPR2 ·, <

[node|285]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
CODE_BLOCK -> · { STMT_LIST }, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
CODE_BLOCK -> · { STMT_LIST }, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
CODE_BLOCK -> · { STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
CODE_BLOCK -> · { STMT_LIST }, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, ID
CODE_BLOCK -> · { STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, double
CODE_BLOCK -> · { STMT_LIST }, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, if
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, ID
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, }
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, while
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
CODE_BLOCK -> · { STMT_LIST }, ID
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, float
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, void
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, for
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, int
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, while
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
CODE_BLOCK -> · { STMT_LIST }, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
CODE_BLOCK -> · { STMT_LIST }, }
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for

[node|286]: [begin]
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, ID
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, }
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, if
IF_STMT -> if ( STMT ) STMT ; ·, return
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, ID
IF_STMT -> if ( STMT ) STMT ; ·, float
IF_STMT -> if ( STMT ) STMT ; ·, ID
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, while
IF_STMT -> if ( STMT ) STMT ; ·, double
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, if
IF_STMT -> if ( STMT ) STMT ; ·, void
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, int
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, while
IF_STMT -> if ( STMT ) STMT ; ·, for
IF_STMT -> if ( STMT ) STMT ; ·, int
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, void
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, float
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, int
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, for
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, return
IF_STMT -> if ( STMT ) STMT ; ·, while
IF_STMT -> if ( STMT ) STMT ; ·, if
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, double
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, void
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, float
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, for
IF_STMT -> if ( STMT ) STMT ; ·, }
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, return
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, double
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, }

[node|287]: [begin]
CODE_BLOCK -> { STMT_LIST · }, while
CODE_BLOCK -> { STMT_LIST · }, if
CODE_BLOCK -> { STMT_LIST · }, else
CODE_BLOCK -> { STMT_LIST · }, double
CODE_BLOCK -> { STMT_LIST · }, float
CODE_BLOCK -> { STMT_LIST · }, int
CODE_BLOCK -> { STMT_LIST · }, return
CODE_BLOCK -> { STMT_LIST · }, ID
CODE_BLOCK -> { STMT_LIST · }, }
CODE_BLOCK -> { STMT_LIST · }, void
CODE_BLOCK -> { STMT_LIST · }, for

[node|288]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, return
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, }
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, double
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, void
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, return
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, for
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, while
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, if
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, void
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, float
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, int
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, while
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, double
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, float
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, for
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, if
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, ID
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, int
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, ID
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, }

[node|289]: [begin]
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, ;
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, ;

[node|290]: [begin]
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, ;

[node|291]: [begin]
ITER_STMT -> while ( STMT ) STMT ·, ;

[node|292]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
CODE_BLOCK -> { · STMT_LIST }, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|293]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, ;
IF_STMT -> if ( STMT ) CODE_BLOCK ·, ;
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, ;

[node|294]: [begin]
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, ;
IF_STMT -> if ( STMT ) STMT · ;, ;
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, ;

[node|295]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
CODE_BLOCK -> { · STMT_LIST }, else
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
CODE_BLOCK -> { · STMT_LIST }, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|296]: [begin]
TERM2 -> ·, if
TERM2 -> ·, int
TERM2 -> * FACTOR · TERM2, while
TERM2 -> * FACTOR · TERM2, double
TERM2 -> * FACTOR · TERM2, <
TERM2 -> · * FACTOR TERM2, void
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, return
TERM2 -> · / FACTOR TERM2, <
TERM2 -> * FACTOR · TERM2, >=
TERM2 -> · * FACTOR TERM2, double
TERM2 -> ·, for
TERM2 -> · * FACTOR TERM2, float
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, while
TERM2 -> ·, float
TERM2 -> · / FACTOR TERM2, void
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> ·, >
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, <
TERM2 -> * FACTOR · TERM2, void
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, >=
TERM2 -> ·, <=
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> * FACTOR · TERM2, return
TERM2 -> * FACTOR · TERM2, ID
TERM2 -> ·, double
TERM2 -> · * FACTOR TERM2, for
TERM2 -> ·, }
TERM2 -> * FACTOR · TERM2, if
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · / FACTOR TERM2, double
TERM2 -> * FACTOR · TERM2, }
TERM2 -> ·, !=
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> · * FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> * FACTOR · TERM2, <=
TERM2 -> ·, ==
TERM2 -> * FACTOR · TERM2, -
TERM2 -> · / FACTOR TERM2, >
TERM2 -> ·, void
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, float
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · * FACTOR TERM2, >
TERM2 -> * FACTOR · TERM2, float
TERM2 -> * FACTOR · TERM2, for
TERM2 -> · / FACTOR TERM2, for
TERM2 -> · * FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, int
TERM2 -> ·, <
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> * FACTOR · TERM2, !=
TERM2 -> · / FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, int
TERM2 -> · / FACTOR TERM2, if
TERM2 -> * FACTOR · TERM2, int
TERM2 -> * FACTOR · TERM2, +
TERM2 -> * FACTOR · TERM2, ==
TERM2 -> ·, ID
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, if
TERM2 -> ·, +
TERM2 -> · / FACTOR TERM2, ID
TERM2 -> * FACTOR · TERM2, >
TERM2 -> · * FACTOR TERM2, ID

[node|297]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), <=
FACTOR -> ID ·, int
CALL_STMT -> ID · ( PARG_LIST ), }
CALL_STMT -> ID · ( PARG_LIST ), double
FACTOR -> ID ·, ==
FACTOR -> ID ·, >
CALL_STMT -> ID · ( PARG_LIST ), <
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), while
FACTOR -> ID ·, for
FACTOR -> ID ·, void
CALL_STMT -> ID · ( PARG_LIST ), float
CALL_STMT -> ID · ( PARG_LIST ), >=
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, ID
FACTOR -> ID ·, !=
FACTOR -> ID ·, double
CALL_STMT -> ID · ( PARG_LIST ), for
FACTOR -> ID ·, float
FACTOR -> ID ·, <
CALL_STMT -> ID · ( PARG_LIST ), *
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), void
FACTOR -> ID ·, return
FACTOR -> ID ·, >=
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, *
CALL_STMT -> ID · ( PARG_LIST ), ID
CALL_STMT -> ID · ( PARG_LIST ), !=
CALL_STMT -> ID · ( PARG_LIST ), if
FACTOR -> ID ·, <=
CALL_STMT -> ID · ( PARG_LIST ), return
FACTOR -> ID ·, }
CALL_STMT -> ID · ( PARG_LIST ), ==
CALL_STMT -> ID · ( PARG_LIST ), int
FACTOR -> ID ·, while
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), >
FACTOR -> ID ·, if

[node|298]: [begin]
TERM2 -> ·, if
TERM2 -> ·, int
TERM2 -> / FACTOR · TERM2, >=
TERM2 -> · * FACTOR TERM2, void
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, return
TERM2 -> / FACTOR · TERM2, >
TERM2 -> · / FACTOR TERM2, <
TERM2 -> / FACTOR · TERM2, double
TERM2 -> ·, for
TERM2 -> · * FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, float
TERM2 -> · * FACTOR TERM2, >=
TERM2 -> ·, while
TERM2 -> ·, float
TERM2 -> · / FACTOR TERM2, void
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, ==
TERM2 -> / FACTOR · TERM2, return
TERM2 -> ·, >
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, <
TERM2 -> · / FACTOR TERM2, ==
TERM2 -> ·, >=
TERM2 -> / FACTOR · TERM2, if
TERM2 -> ·, <=
TERM2 -> · / FACTOR TERM2, !=
TERM2 -> / FACTOR · TERM2, }
TERM2 -> / FACTOR · TERM2, void
TERM2 -> · * FACTOR TERM2, for
TERM2 -> ·, double
TERM2 -> ·, }
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · / FACTOR TERM2, double
TERM2 -> / FACTOR · TERM2, ID
TERM2 -> / FACTOR · TERM2, -
TERM2 -> ·, !=
TERM2 -> · / FACTOR TERM2, <=
TERM2 -> · * FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, >=
TERM2 -> ·, ==
TERM2 -> / FACTOR · TERM2, float
TERM2 -> · / FACTOR TERM2, >
TERM2 -> / FACTOR · TERM2, for
TERM2 -> ·, void
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, float
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · * FACTOR TERM2, >
TERM2 -> / FACTOR · TERM2, <=
TERM2 -> / FACTOR · TERM2, !=
TERM2 -> · / FACTOR TERM2, for
TERM2 -> · * FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, int
TERM2 -> ·, <
TERM2 -> · * FACTOR TERM2, !=
TERM2 -> · / FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · * FACTOR TERM2, <=
TERM2 -> · / FACTOR TERM2, int
TERM2 -> · / FACTOR TERM2, if
TERM2 -> ·, ID
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, if
TERM2 -> / FACTOR · TERM2, while
TERM2 -> ·, +
TERM2 -> · / FACTOR TERM2, ID
TERM2 -> / FACTOR · TERM2, int
TERM2 -> / FACTOR · TERM2, <
TERM2 -> / FACTOR · TERM2, +
TERM2 -> / FACTOR · TERM2, ==
TERM2 -> · * FACTOR TERM2, ID

[node|299]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), int
CALL_STMT -> ID ( PARG_LIST · ), <
CALL_STMT -> ID ( PARG_LIST · ), >
CALL_STMT -> ID ( PARG_LIST · ), ID
CALL_STMT -> ID ( PARG_LIST · ), if
CALL_STMT -> ID ( PARG_LIST · ), for
CALL_STMT -> ID ( PARG_LIST · ), !=
CALL_STMT -> ID ( PARG_LIST · ), float
CALL_STMT -> ID ( PARG_LIST · ), while
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), >=
CALL_STMT -> ID ( PARG_LIST · ), return
CALL_STMT -> ID ( PARG_LIST · ), void
CALL_STMT -> ID ( PARG_LIST · ), <=
CALL_STMT -> ID ( PARG_LIST · ), }
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), double
CALL_STMT -> ID ( PARG_LIST · ), ==

[node|300]: [begin]
ASSIGN_STMT -> ID = EXPR ·, float
ASSIGN_STMT -> ID = EXPR ·, int
ASSIGN_STMT -> ID = EXPR ·, for
ASSIGN_STMT -> ID = EXPR ·, if
ASSIGN_STMT -> ID = EXPR ·, ID
ASSIGN_STMT -> ID = EXPR ·, double
ASSIGN_STMT -> ID = EXPR ·, }
ASSIGN_STMT -> ID = EXPR ·, return
ASSIGN_STMT -> ID = EXPR ·, void
ASSIGN_STMT -> ID = EXPR ·, while

[node|301]: [begin]
FACTOR -> ( EXPR ) ·, }
FACTOR -> ( EXPR ) ·, void
FACTOR -> ( EXPR ) ·, return
FACTOR -> ( EXPR ) ·, int
FACTOR -> ( EXPR ) ·, >=
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, ==
FACTOR -> ( EXPR ) ·, >
FACTOR -> ( EXPR ) ·, !=
FACTOR -> ( EXPR ) ·, double
FACTOR -> ( EXPR ) ·, while
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, ID
FACTOR -> ( EXPR ) ·, for
FACTOR -> ( EXPR ) ·, float
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, <
FACTOR -> ( EXPR ) ·, <=
FACTOR -> ( EXPR ) ·, if

[node|302]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> TYPE_SPEC ID = · EXPR, if
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ID, ID
INIT_STMT -> TYPE_SPEC ID = · EXPR, double
EXPR -> · TERM EXPR2, int
FACTOR -> · ID, void
FACTOR -> · ( EXPR ), for
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, double
TERM -> · FACTOR TERM2 , while
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
INIT_STMT -> TYPE_SPEC ID = · EXPR, for
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
INIT_STMT -> TYPE_SPEC ID = · EXPR, int
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
EXPR -> · TERM EXPR2, return
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
EXPR -> · TERM EXPR2, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), *
INIT_STMT -> TYPE_SPEC ID = · EXPR, void
INIT_STMT -> TYPE_SPEC ID = · EXPR, return
FACTOR -> · ( EXPR ), ID
EXPR -> · TERM EXPR2, double
FACTOR -> · ( EXPR ), }
EXPR -> · TERM EXPR2, ID
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
INIT_STMT -> TYPE_SPEC ID = · EXPR, while
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
INIT_STMT -> TYPE_SPEC ID = · EXPR, }
INIT_STMT -> TYPE_SPEC ID = · EXPR, ID
FACTOR -> · CALL_STMT, float
TERM -> · FACTOR TERM2 , double
FACTOR -> · CALL_STMT, while
EXPR -> · TERM EXPR2, void
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
EXPR -> · TERM EXPR2, }
CALL_STMT -> · ID ( PARG_LIST ), while
EXPR -> · TERM EXPR2, if
FACTOR -> · CONST, +
FACTOR -> · CONST, int
INIT_STMT -> TYPE_SPEC ID = · EXPR, float
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|303]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, void
CODE_BLOCK -> { STMT_LIST } ·, }
CODE_BLOCK -> { STMT_LIST } ·, return
CODE_BLOCK -> { STMT_LIST } ·, int
CODE_BLOCK -> { STMT_LIST } ·, ID
CODE_BLOCK -> { STMT_LIST } ·, double
CODE_BLOCK -> { STMT_LIST } ·, while
CODE_BLOCK -> { STMT_LIST } ·, float
CODE_BLOCK -> { STMT_LIST } ·, for
CODE_BLOCK -> { STMT_LIST } ·, if

[node|304]: [begin]
EXPR2 -> + TERM · EXPR2, <
EXPR2 -> + TERM · EXPR2, while
EXPR2 -> + TERM · EXPR2, float
EXPR2 -> ·, !=
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> + TERM · EXPR2, >
EXPR2 -> ·, return
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, float
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> + TERM · EXPR2, <=
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> + TERM · EXPR2, }
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> · - TERM EXPR2, return
EXPR2 -> + TERM · EXPR2, if
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> ·, while
EXPR2 -> + TERM · EXPR2, !=
EXPR2 -> ·, >
EXPR2 -> + TERM · EXPR2, return
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> + TERM · EXPR2, for
EXPR2 -> + TERM · EXPR2, void
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> ·, ==
EXPR2 -> + TERM · EXPR2, >=
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> ·, for
EXPR2 -> ·, void
EXPR2 -> + TERM · EXPR2, double
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> · + TERM EXPR2, int
EXPR2 -> + TERM · EXPR2, ID
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> ·, <
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> ·, float
EXPR2 -> + TERM · EXPR2, ==
EXPR2 -> ·, >=
EXPR2 -> + TERM · EXPR2, int
EXPR2 -> ·, <=
EXPR2 -> ·, double
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> ·, ID
EXPR2 -> ·, }
EXPR2 -> · - TERM EXPR2, <
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> ·, if

[node|305]: [begin]
EXPR2 -> - TERM · EXPR2, float
EXPR2 -> ·, !=
EXPR2 -> · + TERM EXPR2, <
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> ·, return
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, float
EXPR2 -> · + TERM EXPR2, <=
EXPR2 -> - TERM · EXPR2, <=
EXPR2 -> · - TERM EXPR2, >
EXPR2 -> - TERM · EXPR2, for
EXPR2 -> · - TERM EXPR2, <=
EXPR2 -> · + TERM EXPR2, ==
EXPR2 -> · - TERM EXPR2, !=
EXPR2 -> - TERM · EXPR2, !=
EXPR2 -> · - TERM EXPR2, return
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> ·, while
EXPR2 -> ·, >
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> - TERM · EXPR2, while
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, >=
EXPR2 -> - TERM · EXPR2, int
EXPR2 -> - TERM · EXPR2, <
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> ·, ==
EXPR2 -> - TERM · EXPR2, ==
EXPR2 -> - TERM · EXPR2, >
EXPR2 -> - TERM · EXPR2, >=
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> ·, for
EXPR2 -> ·, void
EXPR2 -> · + TERM EXPR2, >
EXPR2 -> · + TERM EXPR2, int
EXPR2 -> - TERM · EXPR2, double
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> ·, <
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, !=
EXPR2 -> ·, float
EXPR2 -> - TERM · EXPR2, if
EXPR2 -> ·, >=
EXPR2 -> - TERM · EXPR2, return
EXPR2 -> - TERM · EXPR2, void
EXPR2 -> ·, <=
EXPR2 -> ·, double
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> - TERM · EXPR2, ID
EXPR2 -> ·, ID
EXPR2 -> - TERM · EXPR2, }
EXPR2 -> ·, }
EXPR2 -> · - TERM EXPR2, <
EXPR2 -> · + TERM EXPR2, >=
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> · - TERM EXPR2, ==
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> ·, if

[node|306]: [begin]
FACTOR -> · CONST, /
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ID, /
TERM2 -> * · FACTOR TERM2, ID
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ID, ID
FACTOR -> · ( EXPR ), for
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
TERM2 -> * · FACTOR TERM2, -
TERM2 -> * · FACTOR TERM2, double
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
TERM2 -> * · FACTOR TERM2, for
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
TERM2 -> * · FACTOR TERM2, return
FACTOR -> · CONST, double
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), float
TERM2 -> * · FACTOR TERM2, int
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
FACTOR -> · ( EXPR ), }
FACTOR -> · CONST, ID
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
CALL_STMT -> · ID ( PARG_LIST ), -
TERM2 -> * · FACTOR TERM2, }
TERM2 -> * · FACTOR TERM2, void
FACTOR -> · ( EXPR ), int
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
TERM2 -> * · FACTOR TERM2, float
TERM2 -> * · FACTOR TERM2, while
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, -
FACTOR -> · CONST, return
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
TERM2 -> * · FACTOR TERM2, if
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /

[node|307]: [begin]
TERM -> FACTOR TERM2 ·, float
TERM -> FACTOR TERM2 ·, +
TERM -> FACTOR TERM2 ·, double
TERM -> FACTOR TERM2 ·, while
TERM -> FACTOR TERM2 ·, ID
TERM -> FACTOR TERM2 ·, int
TERM -> FACTOR TERM2 ·, for
TERM -> FACTOR TERM2 ·, return
TERM -> FACTOR TERM2 ·, }
TERM -> FACTOR TERM2 ·, if
TERM -> FACTOR TERM2 ·, void
TERM -> FACTOR TERM2 ·, -

[node|308]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), }
FACTOR -> · ID, ID
TERM2 -> / · FACTOR TERM2, +
FACTOR -> · ( EXPR ), for
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, ID
TERM2 -> / · FACTOR TERM2, for
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
TERM2 -> / · FACTOR TERM2, -
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
TERM2 -> / · FACTOR TERM2, int
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), float
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
FACTOR -> · ( EXPR ), }
FACTOR -> · CONST, ID
TERM2 -> / · FACTOR TERM2, }
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
TERM2 -> / · FACTOR TERM2, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
TERM2 -> / · FACTOR TERM2, return
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM2 -> / · FACTOR TERM2, float
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), int
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
TERM2 -> / · FACTOR TERM2, ID
FACTOR -> · CONST, }
TERM2 -> / · FACTOR TERM2, if
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
FACTOR -> · ID, -
FACTOR -> · CONST, return
TERM2 -> / · FACTOR TERM2, double
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
TERM2 -> / · FACTOR TERM2, while
FACTOR -> · CALL_STMT, /

[node|309]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), +
CALL_STMT -> ID ( · PARG_LIST ), -
CALL_STMT -> ID ( · PARG_LIST ), float
CALL_STMT -> ID ( · PARG_LIST ), int
CALL_STMT -> ID ( · PARG_LIST ), return
CALL_STMT -> ID ( · PARG_LIST ), /
CALL_STMT -> ID ( · PARG_LIST ), void
CALL_STMT -> ID ( · PARG_LIST ), *
CALL_STMT -> ID ( · PARG_LIST ), double
PARG_LIST -> ·, )
CALL_STMT -> ID ( · PARG_LIST ), ID
CALL_STMT -> ID ( · PARG_LIST ), }
PARG -> · ID, ,
CALL_STMT -> ID ( · PARG_LIST ), while
CALL_STMT -> ID ( · PARG_LIST ), if
PARG -> · ID, )
PARG_LIST -> · PARG , PARG_LIST, )
CALL_STMT -> ID ( · PARG_LIST ), for
PARG_LIST -> · PARG, )

[node|310]: [begin]
FACTOR -> ( EXPR · ), ID
FACTOR -> ( EXPR · ), while
FACTOR -> ( EXPR · ), double
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), float
FACTOR -> ( EXPR · ), for
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), void
FACTOR -> ( EXPR · ), if
FACTOR -> ( EXPR · ), }
FACTOR -> ( EXPR · ), return
FACTOR -> ( EXPR · ), int
FACTOR -> ( EXPR · ), /

[node|311]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR2 -> + · TERM EXPR2, double
FACTOR -> · ID, ID
FACTOR -> · ID, void
FACTOR -> · ( EXPR ), for
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
TERM -> · FACTOR TERM2 , while
FACTOR -> · CALL_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
EXPR2 -> + · TERM EXPR2, while
EXPR2 -> + · TERM EXPR2, float
EXPR2 -> + · TERM EXPR2, int
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
EXPR2 -> + · TERM EXPR2, for
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
EXPR2 -> + · TERM EXPR2, if
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
EXPR2 -> + · TERM EXPR2, void
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
CALL_STMT -> · ID ( PARG_LIST ), for
EXPR2 -> + · TERM EXPR2, ID
FACTOR -> · ( EXPR ), return
FACTOR -> · ( EXPR ), void
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
FACTOR -> · ( EXPR ), }
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
EXPR2 -> + · TERM EXPR2, }
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
TERM -> · FACTOR TERM2 , double
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
EXPR2 -> + · TERM EXPR2, return
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|312]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
CALL_STMT -> · ID ( PARG_LIST ), }
EXPR2 -> - · TERM EXPR2, void
FACTOR -> · ID, ID
FACTOR -> · ( EXPR ), for
FACTOR -> · ID, void
FACTOR -> · CALL_STMT, ID
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
FACTOR -> · CALL_STMT, double
TERM -> · FACTOR TERM2 , while
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CALL_STMT, for
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
FACTOR -> · CONST, *
FACTOR -> · ID, *
EXPR2 -> - · TERM EXPR2, if
FACTOR -> · ( EXPR ), double
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · CONST, float
EXPR2 -> - · TERM EXPR2, }
FACTOR -> · ID, int
FACTOR -> · ID, float
FACTOR -> · ( EXPR ), while
FACTOR -> · ID, while
FACTOR -> · ( EXPR ), if
FACTOR -> · CONST, -
FACTOR -> · CONST, double
EXPR2 -> - · TERM EXPR2, int
EXPR2 -> - · TERM EXPR2, float
FACTOR -> · CONST, for
FACTOR -> · CONST, if
FACTOR -> · ID, if
CALL_STMT -> · ID ( PARG_LIST ), double
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
FACTOR -> · ( EXPR ), float
TERM -> · FACTOR TERM2 , int
TERM -> · FACTOR TERM2 , float
EXPR2 -> - · TERM EXPR2, while
CALL_STMT -> · ID ( PARG_LIST ), for
FACTOR -> · ( EXPR ), return
FACTOR -> · ID, for
FACTOR -> · ( EXPR ), void
FACTOR -> · ( EXPR ), *
FACTOR -> · ( EXPR ), ID
FACTOR -> · ( EXPR ), }
TERM -> · FACTOR TERM2 , return
FACTOR -> · CONST, ID
TERM -> · FACTOR TERM2 , if
EXPR2 -> - · TERM EXPR2, double
FACTOR -> · CALL_STMT, int
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), ID
EXPR2 -> - · TERM EXPR2, return
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), int
FACTOR -> · ID, double
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
EXPR2 -> - · TERM EXPR2, ID
CALL_STMT -> · ID ( PARG_LIST ), return
FACTOR -> · CONST, }
FACTOR -> · CALL_STMT, if
FACTOR -> · CALL_STMT, }
FACTOR -> · CALL_STMT, void
TERM -> · FACTOR TERM2 , void
FACTOR -> · ID, -
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
FACTOR -> · ID, }
FACTOR -> · ID, +
FACTOR -> · CALL_STMT, float
TERM -> · FACTOR TERM2 , double
FACTOR -> · CALL_STMT, while
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, return
EXPR2 -> - · TERM EXPR2, for
CALL_STMT -> · ID ( PARG_LIST ), while
FACTOR -> · CONST, +
FACTOR -> · CONST, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, /
TERM -> · FACTOR TERM2 , }

[node|313]: [begin]
EXPR -> TERM EXPR2 ·, if
EXPR -> TERM EXPR2 ·, while
EXPR -> TERM EXPR2 ·, ID
EXPR -> TERM EXPR2 ·, for
EXPR -> TERM EXPR2 ·, int
EXPR -> TERM EXPR2 ·, double
EXPR -> TERM EXPR2 ·, }
EXPR -> TERM EXPR2 ·, void
EXPR -> TERM EXPR2 ·, return
EXPR -> TERM EXPR2 ·, float

[node|314]: [begin]
JUST_STMT -> EXPR >= EXPR ·, float
JUST_STMT -> EXPR >= EXPR ·, int
JUST_STMT -> EXPR >= EXPR ·, for
JUST_STMT -> EXPR >= EXPR ·, if
JUST_STMT -> EXPR >= EXPR ·, ID
JUST_STMT -> EXPR >= EXPR ·, double
JUST_STMT -> EXPR >= EXPR ·, }
JUST_STMT -> EXPR >= EXPR ·, return
JUST_STMT -> EXPR >= EXPR ·, void
JUST_STMT -> EXPR >= EXPR ·, while

[node|315]: [begin]
JUST_STMT -> EXPR > EXPR ·, }
JUST_STMT -> EXPR > EXPR ·, for
JUST_STMT -> EXPR > EXPR ·, if
JUST_STMT -> EXPR > EXPR ·, void
JUST_STMT -> EXPR > EXPR ·, double
JUST_STMT -> EXPR > EXPR ·, while
JUST_STMT -> EXPR > EXPR ·, float
JUST_STMT -> EXPR > EXPR ·, int
JUST_STMT -> EXPR > EXPR ·, ID
JUST_STMT -> EXPR > EXPR ·, return

[node|316]: [begin]
JUST_STMT -> EXPR == EXPR ·, while
JUST_STMT -> EXPR == EXPR ·, if
JUST_STMT -> EXPR == EXPR ·, double
JUST_STMT -> EXPR == EXPR ·, float
JUST_STMT -> EXPR == EXPR ·, int
JUST_STMT -> EXPR == EXPR ·, return
JUST_STMT -> EXPR == EXPR ·, ID
JUST_STMT -> EXPR == EXPR ·, }
JUST_STMT -> EXPR == EXPR ·, void
JUST_STMT -> EXPR == EXPR ·, for

[node|317]: [begin]
JUST_STMT -> EXPR < EXPR ·, }
JUST_STMT -> EXPR < EXPR ·, ID
JUST_STMT -> EXPR < EXPR ·, return
JUST_STMT -> EXPR < EXPR ·, int
JUST_STMT -> EXPR < EXPR ·, float
JUST_STMT -> EXPR < EXPR ·, double
JUST_STMT -> EXPR < EXPR ·, if
JUST_STMT -> EXPR < EXPR ·, while
JUST_STMT -> EXPR < EXPR ·, for
JUST_STMT -> EXPR < EXPR ·, void

[node|318]: [begin]
JUST_STMT -> EXPR <= EXPR ·, if
JUST_STMT -> EXPR <= EXPR ·, while
JUST_STMT -> EXPR <= EXPR ·, ID
JUST_STMT -> EXPR <= EXPR ·, for
JUST_STMT -> EXPR <= EXPR ·, int
JUST_STMT -> EXPR <= EXPR ·, double
JUST_STMT -> EXPR <= EXPR ·, }
JUST_STMT -> EXPR <= EXPR ·, void
JUST_STMT -> EXPR <= EXPR ·, return
JUST_STMT -> EXPR <= EXPR ·, float

[node|319]: [begin]
JUST_STMT -> EXPR != EXPR ·, for
JUST_STMT -> EXPR != EXPR ·, int
JUST_STMT -> EXPR != EXPR ·, ID
JUST_STMT -> EXPR != EXPR ·, if
JUST_STMT -> EXPR != EXPR ·, while
JUST_STMT -> EXPR != EXPR ·, float
JUST_STMT -> EXPR != EXPR ·, return
JUST_STMT -> EXPR != EXPR ·, void
JUST_STMT -> EXPR != EXPR ·, }
JUST_STMT -> EXPR != EXPR ·, double

[node|320]: [begin]
ITER_STMT -> for ( STMT ; STMT · ; STMT ) STMT, )
ITER_STMT -> for ( STMT ; STMT · ; STMT ) CODE_BLOCK, )

[node|321]: [begin]
ITER_STMT -> while ( STMT ) CODE_BLOCK ·, )

[node|322]: [begin]
ITER_STMT -> while ( STMT ) STMT ·, )

[node|323]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
CODE_BLOCK -> { · STMT_LIST }, )
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|324]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK · else CODE_BLOCK, )
IF_STMT -> if ( STMT ) CODE_BLOCK · else IF_STMT, )
IF_STMT -> if ( STMT ) CODE_BLOCK ·, )

[node|325]: [begin]
IF_STMT -> if ( STMT ) STMT · ;, )
IF_STMT -> if ( STMT ) STMT · ; else IF_STMT, )
IF_STMT -> if ( STMT ) STMT · ; else CODE_BLOCK, )

[node|326]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
ITER_STMT -> · while ( STMT ) STMT, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
STMT_LIST -> ·, }
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · while ( STMT ) STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
STMT_LIST -> · ASSIGN_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
CODE_BLOCK -> { · STMT_LIST }, else
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
ITER_STMT -> · while ( STMT ) STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
CODE_BLOCK -> { · STMT_LIST }, )
ITER_STMT -> · while ( STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
IF_STMT -> · if ( STMT ) STMT ;, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
RTN_STMT -> · return EXPR, ;
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
ASSIGN_STMT -> · ID = EXPR, ;
STMT_LIST -> · RTN_STMT ; STMT_LIST, }
STMT_LIST -> · INIT_STMT ; STMT_LIST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
ITER_STMT -> · while ( STMT ) STMT, return
STMT_LIST -> · IF_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
TYPE_SPEC -> · double, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
STMT_LIST -> · ITER_STMT STMT_LIST, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|327]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, if
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, while
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, ID
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, for
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, int
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, double
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, }
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, void
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, return
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, float

[node|328]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, if
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, ID
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, int
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, for
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, double
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, }
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, void
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, return
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, float
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, while

[node|329]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, void
IF_STMT -> · if ( STMT ) STMT ;, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
CODE_BLOCK -> · { STMT_LIST }, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, while
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
IF_STMT -> · if ( STMT ) STMT ;, return
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ;, double
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
CODE_BLOCK -> · { STMT_LIST }, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
CODE_BLOCK -> · { STMT_LIST }, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, double
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, return
CODE_BLOCK -> · { STMT_LIST }, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, if
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, }
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ;, ID
CODE_BLOCK -> · { STMT_LIST }, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
CODE_BLOCK -> · { STMT_LIST }, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, while
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
IF_STMT -> · if ( STMT ) STMT ;, if
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
CODE_BLOCK -> · { STMT_LIST }, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, if
CODE_BLOCK -> · { STMT_LIST }, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
IF_STMT -> · if ( STMT ) STMT ;, while
IF_STMT -> · if ( STMT ) STMT ;, float
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
CODE_BLOCK -> · { STMT_LIST }, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, for
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, float
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, int
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID

[node|330]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, void
CODE_BLOCK -> { STMT_LIST } ·, }
CODE_BLOCK -> { STMT_LIST } ·, return
CODE_BLOCK -> { STMT_LIST } ·, int
CODE_BLOCK -> { STMT_LIST } ·, ID
CODE_BLOCK -> { STMT_LIST } ·, double
CODE_BLOCK -> { STMT_LIST } ·, while
CODE_BLOCK -> { STMT_LIST } ·, float
CODE_BLOCK -> { STMT_LIST } ·, for
CODE_BLOCK -> { STMT_LIST } ·, if
CODE_BLOCK -> { STMT_LIST } ·, else

[node|331]: [begin]
IF_STMT -> · if ( STMT ) STMT ;, }
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, for
STMT -> · ASSIGN_STMT, float
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, void
STMT -> · IF_STMT, double
CALL_STMT -> · ID ( PARG_LIST ), }
INIT_STMT -> · TYPE_SPEC ID = EXPR, if
STMT -> · INIT_STMT, if
STMT -> · ASSIGN_STMT, ID
EXPR -> · TERM EXPR2, int
JUST_STMT -> · EXPR != EXPR, return
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, }
CODE_BLOCK -> · { STMT_LIST }, for
STMT -> · JUST_STMT, while
INIT_STMT -> · TYPE_SPEC ID, while
FACTOR -> · ID, void
JUST_STMT -> · EXPR >= EXPR, return
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, double
TERM -> · FACTOR TERM2 , while
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ID
FACTOR -> · CONST, ==
RTN_STMT -> · return EXPR, for
JUST_STMT -> · EXPR <= EXPR, while
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, ID
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, return
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), ==
JUST_STMT -> · EXPR > EXPR, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, return
FACTOR -> · CONST, while
FACTOR -> · CALL_STMT, return
ITER_STMT -> · while ( STMT ) CODE_BLOCK, float
FACTOR -> · ID, *
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, void
FACTOR -> · CALL_STMT, !=
STMT -> · JUST_STMT, ID
INIT_STMT -> · TYPE_SPEC ID, ID
JUST_STMT -> · EXPR == EXPR, }
FACTOR -> · ID, >
FACTOR -> · CONST, float
STMT -> · RTN_STMT, for
FACTOR -> · ID, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, return
FACTOR -> · CONST, -
IF_STMT -> · if ( STMT ) STMT ;, return
STMT -> · ITER_STMT, while
FACTOR -> · CONST, double
JUST_STMT -> · EXPR == EXPR, float
FACTOR -> · CONST, >
JUST_STMT -> · EXPR < EXPR, return
ITER_STMT -> · while ( STMT ) STMT, double
JUST_STMT -> · EXPR > EXPR, double
STMT -> · JUST_STMT, void
INIT_STMT -> · TYPE_SPEC ID, void
ITER_STMT -> · while ( STMT ) CODE_BLOCK, double
FACTOR -> · CALL_STMT, <=
JUST_STMT -> · EXPR != EXPR, void
ASSIGN_STMT -> · ID = EXPR, while
JUST_STMT -> · EXPR < EXPR, }
FACTOR -> · CALL_STMT, *
TERM -> · FACTOR TERM2 , ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, }
CALL_STMT -> · ID ( PARG_LIST ), for
JUST_STMT -> · EXPR >= EXPR, double
EXPR -> · TERM EXPR2, for
JUST_STMT -> · EXPR == EXPR, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, for
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ID
FACTOR -> · ( EXPR ), }
JUST_STMT -> · EXPR <= EXPR, return
STMT -> · IF_STMT, while
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, }
JUST_STMT -> · EXPR > EXPR, void
ASSIGN_STMT -> · ID = EXPR, ID
JUST_STMT -> · EXPR <= EXPR, if
TERM -> · FACTOR TERM2 , return
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, int
STMT -> · ASSIGN_STMT, }
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, void
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, double
CALL_STMT -> · ID ( PARG_LIST ), ID
STMT -> · ITER_STMT, ID
STMT -> · RTN_STMT, while
TERM -> · FACTOR TERM2 , -
INIT_STMT -> · TYPE_SPEC ID = EXPR, while
RTN_STMT -> · return EXPR, int
IF_STMT -> · if ( STMT ) STMT ;, ID
CODE_BLOCK -> · { STMT_LIST }, int
JUST_STMT -> · EXPR <= EXPR, float
JUST_STMT -> · EXPR >= EXPR, int
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, void
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID = EXPR, for
STMT -> · JUST_STMT, float
INIT_STMT -> · TYPE_SPEC ID, float
STMT -> · EXPR, while
STMT -> · EXPR, int
STMT -> · JUST_STMT, return
INIT_STMT -> · TYPE_SPEC ID, return
STMT -> · ITER_STMT, return
FACTOR -> · ID, <=
FACTOR -> · CALL_STMT, }
FACTOR -> · ID, -
ASSIGN_STMT -> · ID = EXPR, return
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, if
JUST_STMT -> · EXPR != EXPR, ID
TERM -> · FACTOR TERM2 , <
STMT -> · IF_STMT, void
STMT -> · RTN_STMT, }
TERM -> · FACTOR TERM2 , <=
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, if
JUST_STMT -> · EXPR == EXPR, for
EXPR -> · TERM EXPR2, if
CALL_STMT -> · ID ( PARG_LIST ), /
STMT -> · INIT_STMT, return
FACTOR -> · ( EXPR ), -
CODE_BLOCK -> · { STMT_LIST }, while
TYPE_SPEC -> · int, ID
ITER_STMT -> · while ( STMT ) STMT, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, float
JUST_STMT -> · EXPR > EXPR, ID
FACTOR -> · ID, /
IF_STMT -> · if ( STMT ) CODE_BLOCK, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, int
STMT -> · EXPR, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, }
CODE_BLOCK -> · { STMT_LIST }, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, void
STMT -> · IF_STMT, if
RTN_STMT -> · return EXPR, float
FACTOR -> · CALL_STMT, >=
STMT -> · ASSIGN_STMT, int
JUST_STMT -> · EXPR != EXPR, if
IF_STMT -> · if ( STMT ) CODE_BLOCK, if
FACTOR -> · CALL_STMT, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, }
ASSIGN_STMT -> · ID = EXPR, double
FACTOR -> · CALL_STMT, double
STMT -> · ASSIGN_STMT, for
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, float
ITER_STMT -> · while ( STMT ) STMT, int
FACTOR -> · ( EXPR ), <
JUST_STMT -> · EXPR <= EXPR, }
JUST_STMT -> · EXPR >= EXPR, ID
FACTOR -> · CONST, *
STMT -> · ITER_STMT, int
FACTOR -> · ( EXPR ), double
JUST_STMT -> · EXPR != EXPR, double
FACTOR -> · ID, int
FACTOR -> · CONST, >=
STMT -> · ASSIGN_STMT, double
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, while
ASSIGN_STMT -> · ID = EXPR, int
ITER_STMT -> · while ( STMT ) CODE_BLOCK, if
JUST_STMT -> · EXPR >= EXPR, void
FACTOR -> · CONST, if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, int
STMT -> · ASSIGN_STMT, void
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, double
TERM -> · FACTOR TERM2 , int
FACTOR -> · ( EXPR ), return
STMT -> · EXPR, ID
FACTOR -> · ( EXPR ), void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, }
EXPR -> · TERM EXPR2, double
CALL_STMT -> · ID ( PARG_LIST ), !=
EXPR -> · TERM EXPR2, ID
ITER_STMT -> · while ( STMT ) CODE_BLOCK, for
STMT -> · INIT_STMT, while
JUST_STMT -> · EXPR >= EXPR, while
EXPR -> · TERM EXPR2, >=
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, int
JUST_STMT -> · EXPR < EXPR, void
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, while
CALL_STMT -> · ID ( PARG_LIST ), float
CALL_STMT -> · ID ( PARG_LIST ), int
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, for
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
STMT -> · ITER_STMT, double
FACTOR -> · ( EXPR ), >
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, while
STMT -> · INIT_STMT, for
FACTOR -> · ID, double
STMT -> · ASSIGN_STMT, while
FACTOR -> · CALL_STMT, if
INIT_STMT -> · TYPE_SPEC ID = EXPR, ID
JUST_STMT -> · EXPR < EXPR, if
TERM -> · FACTOR TERM2 , void
IF_STMT -> · if ( STMT ) STMT ;, if
FACTOR -> · CONST, return
TERM -> · FACTOR TERM2 , for
CODE_BLOCK -> · { STMT_LIST }, ID
JUST_STMT -> · EXPR == EXPR, return
FACTOR -> · ID, +
TERM -> · FACTOR TERM2 , double
STMT -> · INIT_STMT, }
JUST_STMT -> · EXPR < EXPR, float
EXPR -> · TERM EXPR2, }
INIT_STMT -> · TYPE_SPEC ID = EXPR, void
IF_STMT -> · if ( STMT ) STMT ;, while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, double
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, void
JUST_STMT -> · EXPR != EXPR, for
STMT -> · JUST_STMT, for
INIT_STMT -> · TYPE_SPEC ID, for
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, if
JUST_STMT -> · EXPR >= EXPR, }
FACTOR -> · CALL_STMT, /
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, double
STMT -> · ITER_STMT, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> · if ( STMT ) STMT ;, void
STMT -> · ITER_STMT, for
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, float
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, float
JUST_STMT -> · EXPR >= EXPR, float
IF_STMT -> · if ( STMT ) CODE_BLOCK, for
STMT -> · INIT_STMT, int
JUST_STMT -> · EXPR > EXPR, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, float
JUST_STMT -> · EXPR != EXPR, int
FACTOR -> · CONST, <
ITER_STMT -> · while ( STMT ) STMT, float
STMT -> · IF_STMT, for
EXPR -> · TERM EXPR2, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ID
FACTOR -> · ID, ID
CALL_STMT -> · ID ( PARG_LIST ), ==
STMT -> · IF_STMT, return
FACTOR -> · ( EXPR ), for
JUST_STMT -> · EXPR >= EXPR, if
ITER_STMT -> · while ( STMT ) CODE_BLOCK, void
STMT -> · JUST_STMT, double
INIT_STMT -> · TYPE_SPEC ID, double
FACTOR -> · CALL_STMT, for
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ID
FACTOR -> · CONST, <=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, return
JUST_STMT -> · EXPR != EXPR, float
STMT -> · IF_STMT, ID
EXPR -> · TERM EXPR2, <=
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, return
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, int
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, if
FACTOR -> · ( EXPR ), while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, return
FACTOR -> · ( EXPR ), if
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, int
JUST_STMT -> · EXPR == EXPR, int
IF_STMT -> · if ( STMT ) STMT ;, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · while ( STMT ) STMT, void
TYPE_SPEC -> · void, ID
FACTOR -> · CONST, for
IF_STMT -> · if ( STMT ) STMT ;, double
CALL_STMT -> · ID ( PARG_LIST ), double
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
STMT -> · RTN_STMT, void
STMT -> · IF_STMT, }
EXPR -> · TERM EXPR2, return
STMT -> · RTN_STMT, return
RTN_STMT -> · return EXPR, ID
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, double
IF_STMT -> · if ( STMT ) CODE_BLOCK, }
FACTOR -> · ( EXPR ), *
ASSIGN_STMT -> · ID = EXPR, void
FACTOR -> · ID, ==
ITER_STMT -> · while ( STMT ) STMT, ID
FACTOR -> · ID, <
STMT -> · EXPR, for
FACTOR -> · CONST, ID
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, double
RTN_STMT -> · return EXPR, }
FACTOR -> · CALL_STMT, int
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, double
JUST_STMT -> · EXPR >= EXPR, for
TERM -> · FACTOR TERM2 , >
JUST_STMT -> · EXPR > EXPR, while
ASSIGN_STMT -> · ID = EXPR, }
JUST_STMT -> · EXPR <= EXPR, int
IF_STMT -> · if ( STMT ) CODE_BLOCK, void
FACTOR -> · ( EXPR ), int
CALL_STMT -> · ID ( PARG_LIST ), if
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, while
FACTOR -> · ID, >=
JUST_STMT -> · EXPR == EXPR, double
ITER_STMT -> · while ( STMT ) STMT, return
JUST_STMT -> · EXPR < EXPR, double
FACTOR -> · ID, }
JUST_STMT -> · EXPR <= EXPR, double
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, void
FACTOR -> · CALL_STMT, float
FACTOR -> · CALL_STMT, while
FACTOR -> · CALL_STMT, <
EXPR -> · TERM EXPR2, void
FACTOR -> · ID, return
RTN_STMT -> · return EXPR, return
STMT -> · RTN_STMT, ID
CALL_STMT -> · ID ( PARG_LIST ), while
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, if
TERM -> · FACTOR TERM2 , >=
IF_STMT -> · if ( STMT ) STMT ;, float
FACTOR -> · CONST, int
STMT -> · EXPR, }
FACTOR -> · CALL_STMT, >
JUST_STMT -> · EXPR < EXPR, while
INIT_STMT -> · TYPE_SPEC ID = EXPR, float
STMT -> · INIT_STMT, float
ITER_STMT -> · while ( STMT ) CODE_BLOCK, int
STMT -> · RTN_STMT, float
JUST_STMT -> · EXPR > EXPR, return
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, double
TERM -> · FACTOR TERM2 , }
JUST_STMT -> · EXPR <= EXPR, void
JUST_STMT -> · EXPR > EXPR, if
FACTOR -> · CONST, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ID
JUST_STMT -> · EXPR == EXPR, void
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, void
STMT -> · RTN_STMT, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, }
JUST_STMT -> · EXPR > EXPR, float
INIT_STMT -> · TYPE_SPEC ID = EXPR, int
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, if
FACTOR -> · CALL_STMT, -
IF_STMT -> · if ( STMT ) CODE_BLOCK, return
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, return
CALL_STMT -> · ID ( PARG_LIST ), *
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, return
STMT -> · ITER_STMT, }
ASSIGN_STMT -> · ID = EXPR, float
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, float
IF_STMT -> · if ( STMT ) STMT ;, int
FACTOR -> · ( EXPR ), >=
STMT -> · IF_STMT, int
JUST_STMT -> · EXPR < EXPR, int
JUST_STMT -> · EXPR == EXPR, while
STMT -> · ITER_STMT, float
STMT -> · INIT_STMT, void
CALL_STMT -> · ID ( PARG_LIST ), void
FACTOR -> · ID, float
ASSIGN_STMT -> · ID = EXPR, if
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, if
STMT -> · EXPR, double
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, while
CALL_STMT -> · ID ( PARG_LIST ), >=
ITER_STMT -> · while ( STMT ) CODE_BLOCK, while
STMT -> · ITER_STMT, if
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · ID, if
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, int
STMT -> · INIT_STMT, ID
FACTOR -> · ( EXPR ), float
STMT -> · EXPR, void
TERM -> · FACTOR TERM2 , float
JUST_STMT -> · EXPR <= EXPR, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, return
CODE_BLOCK -> · { STMT_LIST }, }
ASSIGN_STMT -> · ID = EXPR, for
FACTOR -> · ID, for
STMT -> · INIT_STMT, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, }
IF_STMT -> · if ( STMT ) CODE_BLOCK, while
JUST_STMT -> · EXPR != EXPR, while
FACTOR -> · ( EXPR ), ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, }
TERM -> · FACTOR TERM2 , !=
JUST_STMT -> · EXPR == EXPR, ID
CODE_BLOCK -> · { STMT_LIST }, return
CODE_BLOCK -> · { STMT_LIST }, float
TERM -> · FACTOR TERM2 , if
STMT -> · JUST_STMT, if
INIT_STMT -> · TYPE_SPEC ID, if
FACTOR -> · CONST, !=
ITER_STMT -> · while ( STMT ) STMT, for
STMT -> · JUST_STMT, int
INIT_STMT -> · TYPE_SPEC ID, int
JUST_STMT -> · EXPR <= EXPR, for
JUST_STMT -> · EXPR < EXPR, ID
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, }
JUST_STMT -> · EXPR > EXPR, }
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, for
ITER_STMT -> · while ( STMT ) STMT, while
CODE_BLOCK -> · { STMT_LIST }, if
FACTOR -> · ID, !=
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, while
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, void
EXPR -> · TERM EXPR2, >
RTN_STMT -> · return EXPR, while
STMT -> · RTN_STMT, int
CALL_STMT -> · ID ( PARG_LIST ), return
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, for
JUST_STMT -> · EXPR != EXPR, }
JUST_STMT -> · EXPR < EXPR, for
EXPR -> · TERM EXPR2, <
FACTOR -> · CALL_STMT, void
STMT -> · JUST_STMT, }
INIT_STMT -> · TYPE_SPEC ID, }
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, for
EXPR -> · TERM EXPR2, while
EXPR -> · TERM EXPR2, float
RTN_STMT -> · return EXPR, void
RTN_STMT -> · return EXPR, double
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, while
CODE_BLOCK -> · { STMT_LIST }, void
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, if
STMT -> · EXPR, return
STMT -> · ASSIGN_STMT, return
FACTOR -> · CALL_STMT, +
STMT -> · ASSIGN_STMT, if
STMT -> · EXPR, if
INIT_STMT -> · TYPE_SPEC ID = EXPR, double
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, float
STMT -> · IF_STMT, float
RTN_STMT -> · return EXPR, if
ITER_STMT -> · while ( STMT ) STMT, }

[node|332]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
FACTOR -> · ID, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, ;
ASSIGN_STMT -> · ID = EXPR, )
FACTOR -> · ( EXPR ), <=
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, ;
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
JUST_STMT -> · EXPR != EXPR, )
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )

[node|333]: [begin]
CODE_BLOCK -> { STMT_LIST · }, ;

[node|334]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
CODE_BLOCK -> · { STMT_LIST }, ;
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;

[node|335]: [begin]
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, ;
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, ;
IF_STMT -> if ( STMT ) STMT ; ·, ;

[node|336]: [begin]
CODE_BLOCK -> { STMT_LIST · }, else
CODE_BLOCK -> { STMT_LIST · }, ;

[node|337]: [begin]
TERM2 -> * FACTOR TERM2 ·, double
TERM2 -> * FACTOR TERM2 ·, ==
TERM2 -> * FACTOR TERM2 ·, while
TERM2 -> * FACTOR TERM2 ·, float
TERM2 -> * FACTOR TERM2 ·, !=
TERM2 -> * FACTOR TERM2 ·, <
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, for
TERM2 -> * FACTOR TERM2 ·, +
TERM2 -> * FACTOR TERM2 ·, if
TERM2 -> * FACTOR TERM2 ·, ID
TERM2 -> * FACTOR TERM2 ·, void
TERM2 -> * FACTOR TERM2 ·, }
TERM2 -> * FACTOR TERM2 ·, <=
TERM2 -> * FACTOR TERM2 ·, >=
TERM2 -> * FACTOR TERM2 ·, return
TERM2 -> * FACTOR TERM2 ·, int
TERM2 -> * FACTOR TERM2 ·, >

[node|338]: [begin]
TERM2 -> / FACTOR TERM2 ·, double
TERM2 -> / FACTOR TERM2 ·, ==
TERM2 -> / FACTOR TERM2 ·, !=
TERM2 -> / FACTOR TERM2 ·, float
TERM2 -> / FACTOR TERM2 ·, while
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, for
TERM2 -> / FACTOR TERM2 ·, <
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, if
TERM2 -> / FACTOR TERM2 ·, void
TERM2 -> / FACTOR TERM2 ·, }
TERM2 -> / FACTOR TERM2 ·, <=
TERM2 -> / FACTOR TERM2 ·, >=
TERM2 -> / FACTOR TERM2 ·, >
TERM2 -> / FACTOR TERM2 ·, return
TERM2 -> / FACTOR TERM2 ·, int
TERM2 -> / FACTOR TERM2 ·, ID

[node|339]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, double
CALL_STMT -> ID ( PARG_LIST ) ·, >
CALL_STMT -> ID ( PARG_LIST ) ·, int
CALL_STMT -> ID ( PARG_LIST ) ·, ID
CALL_STMT -> ID ( PARG_LIST ) ·, if
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, <
CALL_STMT -> ID ( PARG_LIST ) ·, for
CALL_STMT -> ID ( PARG_LIST ) ·, !=
CALL_STMT -> ID ( PARG_LIST ) ·, float
CALL_STMT -> ID ( PARG_LIST ) ·, while
CALL_STMT -> ID ( PARG_LIST ) ·, void
CALL_STMT -> ID ( PARG_LIST ) ·, <=
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, return
CALL_STMT -> ID ( PARG_LIST ) ·, >=
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, ==
CALL_STMT -> ID ( PARG_LIST ) ·, }

[node|340]: [begin]
INIT_STMT -> TYPE_SPEC ID = EXPR ·, }
INIT_STMT -> TYPE_SPEC ID = EXPR ·, ID
INIT_STMT -> TYPE_SPEC ID = EXPR ·, return
INIT_STMT -> TYPE_SPEC ID = EXPR ·, int
INIT_STMT -> TYPE_SPEC ID = EXPR ·, float
INIT_STMT -> TYPE_SPEC ID = EXPR ·, double
INIT_STMT -> TYPE_SPEC ID = EXPR ·, if
INIT_STMT -> TYPE_SPEC ID = EXPR ·, while
INIT_STMT -> TYPE_SPEC ID = EXPR ·, for
INIT_STMT -> TYPE_SPEC ID = EXPR ·, void

[node|341]: [begin]
EXPR2 -> + TERM EXPR2 ·, <
EXPR2 -> + TERM EXPR2 ·, for
EXPR2 -> + TERM EXPR2 ·, if
EXPR2 -> + TERM EXPR2 ·, int
EXPR2 -> + TERM EXPR2 ·, >
EXPR2 -> + TERM EXPR2 ·, ID
EXPR2 -> + TERM EXPR2 ·, double
EXPR2 -> + TERM EXPR2 ·, }
EXPR2 -> + TERM EXPR2 ·, ==
EXPR2 -> + TERM EXPR2 ·, >=
EXPR2 -> + TERM EXPR2 ·, return
EXPR2 -> + TERM EXPR2 ·, void
EXPR2 -> + TERM EXPR2 ·, while
EXPR2 -> + TERM EXPR2 ·, !=
EXPR2 -> + TERM EXPR2 ·, float
EXPR2 -> + TERM EXPR2 ·, <=

[node|342]: [begin]
EXPR2 -> - TERM EXPR2 ·, !=
EXPR2 -> - TERM EXPR2 ·, if
EXPR2 -> - TERM EXPR2 ·, ==
EXPR2 -> - TERM EXPR2 ·, while
EXPR2 -> - TERM EXPR2 ·, double
EXPR2 -> - TERM EXPR2 ·, float
EXPR2 -> - TERM EXPR2 ·, int
EXPR2 -> - TERM EXPR2 ·, return
EXPR2 -> - TERM EXPR2 ·, for
EXPR2 -> - TERM EXPR2 ·, >=
EXPR2 -> - TERM EXPR2 ·, >
EXPR2 -> - TERM EXPR2 ·, ID
EXPR2 -> - TERM EXPR2 ·, }
EXPR2 -> - TERM EXPR2 ·, <=
EXPR2 -> - TERM EXPR2 ·, void
EXPR2 -> - TERM EXPR2 ·, <

[node|343]: [begin]
TERM2 -> ·, if
TERM2 -> ·, int
TERM2 -> * FACTOR · TERM2, while
TERM2 -> * FACTOR · TERM2, double
TERM2 -> · * FACTOR TERM2, void
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, return
TERM2 -> · * FACTOR TERM2, double
TERM2 -> ·, for
TERM2 -> · * FACTOR TERM2, float
TERM2 -> ·, while
TERM2 -> ·, float
TERM2 -> · / FACTOR TERM2, void
TERM2 -> ·, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> * FACTOR · TERM2, void
TERM2 -> * FACTOR · TERM2, return
TERM2 -> * FACTOR · TERM2, ID
TERM2 -> ·, double
TERM2 -> · * FACTOR TERM2, for
TERM2 -> ·, }
TERM2 -> * FACTOR · TERM2, if
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · / FACTOR TERM2, double
TERM2 -> * FACTOR · TERM2, }
TERM2 -> · * FACTOR TERM2, while
TERM2 -> * FACTOR · TERM2, -
TERM2 -> ·, void
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, float
TERM2 -> · / FACTOR TERM2, while
TERM2 -> * FACTOR · TERM2, float
TERM2 -> * FACTOR · TERM2, for
TERM2 -> · / FACTOR TERM2, for
TERM2 -> · * FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, int
TERM2 -> · / FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, int
TERM2 -> · / FACTOR TERM2, if
TERM2 -> * FACTOR · TERM2, int
TERM2 -> * FACTOR · TERM2, +
TERM2 -> ·, ID
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, if
TERM2 -> ·, +
TERM2 -> · / FACTOR TERM2, ID
TERM2 -> · * FACTOR TERM2, ID

[node|344]: [begin]
TERM2 -> ·, if
TERM2 -> ·, int
TERM2 -> · * FACTOR TERM2, void
TERM2 -> · * FACTOR TERM2, }
TERM2 -> ·, return
TERM2 -> / FACTOR · TERM2, double
TERM2 -> ·, for
TERM2 -> · * FACTOR TERM2, double
TERM2 -> · * FACTOR TERM2, float
TERM2 -> ·, while
TERM2 -> ·, float
TERM2 -> · / FACTOR TERM2, void
TERM2 -> ·, -
TERM2 -> / FACTOR · TERM2, return
TERM2 -> · * FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, if
TERM2 -> / FACTOR · TERM2, }
TERM2 -> / FACTOR · TERM2, void
TERM2 -> · * FACTOR TERM2, for
TERM2 -> ·, double
TERM2 -> ·, }
TERM2 -> · / FACTOR TERM2, }
TERM2 -> · / FACTOR TERM2, double
TERM2 -> / FACTOR · TERM2, ID
TERM2 -> / FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, while
TERM2 -> / FACTOR · TERM2, float
TERM2 -> / FACTOR · TERM2, for
TERM2 -> ·, void
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, float
TERM2 -> · / FACTOR TERM2, while
TERM2 -> · / FACTOR TERM2, for
TERM2 -> · * FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, int
TERM2 -> · / FACTOR TERM2, return
TERM2 -> · * FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, int
TERM2 -> · / FACTOR TERM2, if
TERM2 -> ·, ID
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, if
TERM2 -> / FACTOR · TERM2, while
TERM2 -> ·, +
TERM2 -> · / FACTOR TERM2, ID
TERM2 -> / FACTOR · TERM2, int
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, ID

[node|345]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), int
CALL_STMT -> ID ( PARG_LIST · ), ID
CALL_STMT -> ID ( PARG_LIST · ), for
CALL_STMT -> ID ( PARG_LIST · ), if
CALL_STMT -> ID ( PARG_LIST · ), while
CALL_STMT -> ID ( PARG_LIST · ), float
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), return
CALL_STMT -> ID ( PARG_LIST · ), void
CALL_STMT -> ID ( PARG_LIST · ), }
CALL_STMT -> ID ( PARG_LIST · ), /
CALL_STMT -> ID ( PARG_LIST · ), double

[node|346]: [begin]
FACTOR -> ( EXPR ) ·, }
FACTOR -> ( EXPR ) ·, return
FACTOR -> ( EXPR ) ·, int
FACTOR -> ( EXPR ) ·, /
FACTOR -> ( EXPR ) ·, ID
FACTOR -> ( EXPR ) ·, while
FACTOR -> ( EXPR ) ·, double
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, float
FACTOR -> ( EXPR ) ·, for
FACTOR -> ( EXPR ) ·, void
FACTOR -> ( EXPR ) ·, if

[node|347]: [begin]
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> ·, while
EXPR2 -> + TERM · EXPR2, while
EXPR2 -> + TERM · EXPR2, float
EXPR2 -> ·, float
EXPR2 -> + TERM · EXPR2, if
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> + TERM · EXPR2, int
EXPR2 -> ·, return
EXPR2 -> + TERM · EXPR2, return
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · - TERM EXPR2, float
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> + TERM · EXPR2, for
EXPR2 -> ·, for
EXPR2 -> ·, if
EXPR2 -> ·, void
EXPR2 -> + TERM · EXPR2, void
EXPR2 -> ·, double
EXPR2 -> + TERM · EXPR2, double
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> · + TERM EXPR2, int
EXPR2 -> ·, ID
EXPR2 -> + TERM · EXPR2, ID
EXPR2 -> + TERM · EXPR2, }
EXPR2 -> ·, }
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> · - TERM EXPR2, return

[node|348]: [begin]
EXPR2 -> · + TERM EXPR2, if
EXPR2 -> - TERM · EXPR2, float
EXPR2 -> - TERM · EXPR2, int
EXPR2 -> · + TERM EXPR2, ID
EXPR2 -> ·, float
EXPR2 -> · + TERM EXPR2, while
EXPR2 -> - TERM · EXPR2, while
EXPR2 -> - TERM · EXPR2, if
EXPR2 -> ·, while
EXPR2 -> ·, int
EXPR2 -> · + TERM EXPR2, double
EXPR2 -> · - TERM EXPR2, if
EXPR2 -> · + TERM EXPR2, }
EXPR2 -> ·, return
EXPR2 -> - TERM · EXPR2, return
EXPR2 -> · - TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, float
EXPR2 -> · + TERM EXPR2, void
EXPR2 -> - TERM · EXPR2, void
EXPR2 -> · - TERM EXPR2, double
EXPR2 -> ·, for
EXPR2 -> ·, void
EXPR2 -> ·, double
EXPR2 -> - TERM · EXPR2, for
EXPR2 -> · + TERM EXPR2, for
EXPR2 -> · - TERM EXPR2, }
EXPR2 -> · - TERM EXPR2, return
EXPR2 -> · + TERM EXPR2, int
EXPR2 -> - TERM · EXPR2, ID
EXPR2 -> - TERM · EXPR2, double
EXPR2 -> ·, ID
EXPR2 -> - TERM · EXPR2, }
EXPR2 -> · - TERM EXPR2, void
EXPR2 -> ·, }
EXPR2 -> · - TERM EXPR2, while
EXPR2 -> · + TERM EXPR2, return
EXPR2 -> · + TERM EXPR2, float
EXPR2 -> · - TERM EXPR2, ID
EXPR2 -> · - TERM EXPR2, int
EXPR2 -> ·, if

[node|349]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
FACTOR -> · ID, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
ITER_STMT -> for ( STMT ; STMT ; · STMT ) STMT, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
ITER_STMT -> for ( STMT ; STMT ; · STMT ) CODE_BLOCK, )
JUST_STMT -> · EXPR != EXPR, )
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )

[node|350]: [begin]
CODE_BLOCK -> { STMT_LIST · }, )

[node|351]: [begin]
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
CODE_BLOCK -> · { STMT_LIST }, )
IF_STMT -> if ( STMT ) CODE_BLOCK else · IF_STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
IF_STMT -> · if ( STMT ) STMT ;, )
IF_STMT -> if ( STMT ) CODE_BLOCK else · CODE_BLOCK, )

[node|352]: [begin]
IF_STMT -> if ( STMT ) STMT ; ·, )
IF_STMT -> if ( STMT ) STMT ; · else IF_STMT, )
IF_STMT -> if ( STMT ) STMT ; · else CODE_BLOCK, )

[node|353]: [begin]
CODE_BLOCK -> { STMT_LIST · }, else
CODE_BLOCK -> { STMT_LIST · }, )

[node|354]: [begin]
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, float
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, while
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, double
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, void
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, if
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, for
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, }
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, return
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, ID
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, int

[node|355]: [begin]
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, for
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, float
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, while
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, double
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, ID
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, int
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, return
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, }
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, void
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, if

[node|356]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, double
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, while
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, ID
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, int
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, return
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, }
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, if
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, void
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, for

[node|357]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, }
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, ID
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, return
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, int
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, float
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, double
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, if
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, while
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, for
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, void

[node|358]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, ;
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, ;

[node|359]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, ;

[node|360]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, ;

[node|361]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, ;

[node|362]: [begin]
CODE_BLOCK -> · { STMT_LIST }, ;
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, ;
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;

[node|363]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, ;
CODE_BLOCK -> { STMT_LIST } ·, else

[node|364]: [begin]
TERM2 -> * FACTOR TERM2 ·, double
TERM2 -> * FACTOR TERM2 ·, while
TERM2 -> * FACTOR TERM2 ·, float
TERM2 -> * FACTOR TERM2 ·, +
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, for
TERM2 -> * FACTOR TERM2 ·, if
TERM2 -> * FACTOR TERM2 ·, void
TERM2 -> * FACTOR TERM2 ·, }
TERM2 -> * FACTOR TERM2 ·, return
TERM2 -> * FACTOR TERM2 ·, int
TERM2 -> * FACTOR TERM2 ·, ID

[node|365]: [begin]
TERM2 -> / FACTOR TERM2 ·, double
TERM2 -> / FACTOR TERM2 ·, while
TERM2 -> / FACTOR TERM2 ·, float
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, for
TERM2 -> / FACTOR TERM2 ·, if
TERM2 -> / FACTOR TERM2 ·, void
TERM2 -> / FACTOR TERM2 ·, }
TERM2 -> / FACTOR TERM2 ·, return
TERM2 -> / FACTOR TERM2 ·, int
TERM2 -> / FACTOR TERM2 ·, ID

[node|366]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, double
CALL_STMT -> ID ( PARG_LIST ) ·, ID
CALL_STMT -> ID ( PARG_LIST ) ·, int
CALL_STMT -> ID ( PARG_LIST ) ·, if
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, for
CALL_STMT -> ID ( PARG_LIST ) ·, float
CALL_STMT -> ID ( PARG_LIST ) ·, while
CALL_STMT -> ID ( PARG_LIST ) ·, void
CALL_STMT -> ID ( PARG_LIST ) ·, /
CALL_STMT -> ID ( PARG_LIST ) ·, return
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, }

[node|367]: [begin]
EXPR2 -> + TERM EXPR2 ·, for
EXPR2 -> + TERM EXPR2 ·, if
EXPR2 -> + TERM EXPR2 ·, int
EXPR2 -> + TERM EXPR2 ·, ID
EXPR2 -> + TERM EXPR2 ·, double
EXPR2 -> + TERM EXPR2 ·, }
EXPR2 -> + TERM EXPR2 ·, return
EXPR2 -> + TERM EXPR2 ·, void
EXPR2 -> + TERM EXPR2 ·, while
EXPR2 -> + TERM EXPR2 ·, float

[node|368]: [begin]
EXPR2 -> - TERM EXPR2 ·, while
EXPR2 -> - TERM EXPR2 ·, if
EXPR2 -> - TERM EXPR2 ·, double
EXPR2 -> - TERM EXPR2 ·, float
EXPR2 -> - TERM EXPR2 ·, int
EXPR2 -> - TERM EXPR2 ·, return
EXPR2 -> - TERM EXPR2 ·, ID
EXPR2 -> - TERM EXPR2 ·, }
EXPR2 -> - TERM EXPR2 ·, void
EXPR2 -> - TERM EXPR2 ·, for

[node|369]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT · ) STMT, )
ITER_STMT -> for ( STMT ; STMT ; STMT · ) CODE_BLOCK, )

[node|370]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, )

[node|371]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else CODE_BLOCK ·, )

[node|372]: [begin]
IF_STMT -> if ( STMT ) CODE_BLOCK else IF_STMT ·, )

[node|373]: [begin]
IF_STMT -> if ( STMT ) STMT ; else · CODE_BLOCK, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
IF_STMT -> if ( STMT ) STMT ; else · IF_STMT, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
CODE_BLOCK -> · { STMT_LIST }, )
IF_STMT -> · if ( STMT ) STMT ;, )

[node|374]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, )
CODE_BLOCK -> { STMT_LIST } ·, else

[node|375]: [begin]
FACTOR -> · CONST, /
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, ;
FACTOR -> · ID, /
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, ;
STMT -> · EXPR, ;
ITER_STMT -> · while ( STMT ) CODE_BLOCK, ;
FACTOR -> · CONST, <
TERM -> · FACTOR TERM2 , ;
EXPR -> · TERM EXPR2, ==
ITER_STMT -> · while ( STMT ) STMT, ;
IF_STMT -> · if ( STMT ) STMT ;, ;
CALL_STMT -> · ID ( PARG_LIST ), ==
JUST_STMT -> · EXPR <= EXPR, ;
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
JUST_STMT -> · EXPR == EXPR, ;
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
STMT -> · ITER_STMT, ;
FACTOR -> · ID, >
FACTOR -> · CONST, >=
FACTOR -> · CONST, -
STMT -> · IF_STMT, ;
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
CODE_BLOCK -> · { STMT_LIST }, ;
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, ;
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, ;
CALL_STMT -> · ID ( PARG_LIST ), <
FACTOR -> · CALL_STMT, <=
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, ;
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
JUST_STMT -> · EXPR < EXPR, ;
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, ;
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, ;
FACTOR -> · ID, <
JUST_STMT -> · EXPR > EXPR, ;
EXPR -> · TERM EXPR2, >=
IF_STMT -> · if ( STMT ) CODE_BLOCK, ;
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
FACTOR -> · ( EXPR ), ;
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
STMT -> · ASSIGN_STMT, ;
FACTOR -> · CONST, ;
RTN_STMT -> · return EXPR, ;
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
JUST_STMT -> · EXPR != EXPR, ;
FACTOR -> · ID, !=
FACTOR -> · CALL_STMT, ;
STMT -> · JUST_STMT, ;
INIT_STMT -> · TYPE_SPEC ID, ;
FACTOR -> · ( EXPR ), >
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> · ID = EXPR, ;
FACTOR -> · ID, ;
FACTOR -> · ID, <=
FACTOR -> · ID, >=
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
STMT -> · RTN_STMT, ;
FACTOR -> · ID, +
JUST_STMT -> · EXPR >= EXPR, ;
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR, ;
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
STMT -> · INIT_STMT, ;
EXPR -> · TERM EXPR2, ;

[node|376]: [begin]
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, ;

[node|377]: [begin]
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, ;

[node|378]: [begin]
FACTOR -> · CONST, /
FACTOR -> · ID, /
INIT_STMT -> · TYPE_SPEC ID = EXPR, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else CODE_BLOCK, )
FACTOR -> · CALL_STMT, )
ITER_STMT -> for ( STMT ; STMT ; STMT ) · STMT, )
FACTOR -> · CONST, <
EXPR -> · TERM EXPR2, ==
CALL_STMT -> · ID ( PARG_LIST ), ==
FACTOR -> · CALL_STMT, >=
FACTOR -> · CALL_STMT, -
FACTOR -> · ( EXPR ), +
CALL_STMT -> · ID ( PARG_LIST ), <=
STMT -> · RTN_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · CONST, ==
IF_STMT -> · if ( STMT ) CODE_BLOCK, )
TERM -> · FACTOR TERM2 , ==
FACTOR -> · ( EXPR ), <
FACTOR -> · ( EXPR ), ==
FACTOR -> · CONST, <=
STMT -> · EXPR, )
FACTOR -> · ( EXPR ), >=
FACTOR -> · CONST, *
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, !=
EXPR -> · TERM EXPR2, <=
FACTOR -> · ( EXPR ), )
STMT -> · JUST_STMT, )
ITER_STMT -> · while ( STMT ) STMT, )
INIT_STMT -> · TYPE_SPEC ID, )
FACTOR -> · ID, >
FACTOR -> · CONST, >=
RTN_STMT -> · return EXPR, )
FACTOR -> · CONST, -
ITER_STMT -> for ( STMT ; STMT ; STMT ) · CODE_BLOCK, )
FACTOR -> · ID, )
IF_STMT -> · if ( STMT ) STMT ; else CODE_BLOCK, )
FACTOR -> · CONST, >
CALL_STMT -> · ID ( PARG_LIST ), >=
TYPE_SPEC -> · void, ID
STMT -> · INIT_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), <
STMT -> · IF_STMT, )
ITER_STMT -> · while ( STMT ) CODE_BLOCK, )
FACTOR -> · CALL_STMT, <=
FACTOR -> · CALL_STMT, *
EXPR -> · TERM EXPR2, !=
CALL_STMT -> · ID ( PARG_LIST ), >
JUST_STMT -> · EXPR < EXPR, )
JUST_STMT -> · EXPR >= EXPR, )
JUST_STMT -> · EXPR <= EXPR, )
IF_STMT -> · if ( STMT ) STMT ;, )
FACTOR -> · ( EXPR ), *
TYPE_SPEC -> · float, ID
TERM -> · FACTOR TERM2 , )
TERM -> · FACTOR TERM2 , !=
CALL_STMT -> · ID ( PARG_LIST ), !=
FACTOR -> · ID, ==
FACTOR -> · ID, <
ITER_STMT -> · for ( STMT ; STMT ; STMT ) CODE_BLOCK, )
EXPR -> · TERM EXPR2, >=
FACTOR -> · CALL_STMT, ==
FACTOR -> · CONST, !=
EXPR -> · TERM EXPR2, )
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · ( EXPR ), <=
ASSIGN_STMT -> · ID = EXPR, )
TERM -> · FACTOR TERM2 , >
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), !=
TERM -> · FACTOR TERM2 , +
FACTOR -> · ID, !=
STMT -> · ITER_STMT, )
FACTOR -> · ( EXPR ), >
FACTOR -> · CONST, )
EXPR -> · TERM EXPR2, >
FACTOR -> · ( EXPR ), /
FACTOR -> · ID, <=
FACTOR -> · ID, >=
CALL_STMT -> · ID ( PARG_LIST ), )
JUST_STMT -> · EXPR == EXPR, )
EXPR -> · TERM EXPR2, <
FACTOR -> · ID, -
JUST_STMT -> · EXPR != EXPR, )
FACTOR -> · ID, +
STMT -> · ASSIGN_STMT, )
TERM -> · FACTOR TERM2 , <
FACTOR -> · CALL_STMT, <
FACTOR -> · CALL_STMT, +
TERM -> · FACTOR TERM2 , <=
TERM -> · FACTOR TERM2 , >=
FACTOR -> · CONST, +
IF_STMT -> · if ( STMT ) STMT ; else IF_STMT, )
CALL_STMT -> · ID ( PARG_LIST ), /
JUST_STMT -> · EXPR > EXPR, )
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, >
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · double, ID
FACTOR -> · CALL_STMT, /
ITER_STMT -> · for ( STMT ; STMT ; STMT ) STMT, )
IF_STMT -> · if ( STMT ) CODE_BLOCK else IF_STMT, )
CODE_BLOCK -> · { STMT_LIST }, )

[node|379]: [begin]
IF_STMT -> if ( STMT ) STMT ; else CODE_BLOCK ·, )

[node|380]: [begin]
IF_STMT -> if ( STMT ) STMT ; else IF_STMT ·, )

[node|381]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, ;

[node|382]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, ;

[node|383]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) CODE_BLOCK ·, )

[node|384]: [begin]
ITER_STMT -> for ( STMT ; STMT ; STMT ) STMT ·, )

[edge|0]:
0 -> 1 : CMPL_UNIT

[edge|1]:
0 -> 2 : double

[edge|2]:
0 -> 3 : int

[edge|3]:
0 -> 4 : void

[edge|4]:
0 -> 5 : float

[edge|5]:
0 -> 6 : TYPE_SPEC

[edge|6]:
0 -> 7 : FUNC_DEF

[edge|7]:
0 -> 8 : INIT_STMT

[edge|8]:
0 -> 9 : FUNC_LIST

[edge|9]:
6 -> 10 : ID

[edge|10]:
7 -> 2 : double

[edge|11]:
7 -> 3 : int

[edge|12]:
7 -> 4 : void

[edge|13]:
7 -> 5 : float

[edge|14]:
7 -> 11 : TYPE_SPEC

[edge|15]:
7 -> 7 : FUNC_DEF

[edge|16]:
7 -> 12 : FUNC_LIST

[edge|17]:
8 -> 13 : ;

[edge|18]:
10 -> 14 : (

[edge|19]:
10 -> 15 : =

[edge|20]:
11 -> 16 : ID

[edge|21]:
13 -> 17 : CMPL_UNIT

[edge|22]:
13 -> 2 : double

[edge|23]:
13 -> 3 : int

[edge|24]:
13 -> 4 : void

[edge|25]:
13 -> 5 : float

[edge|26]:
13 -> 6 : TYPE_SPEC

[edge|27]:
13 -> 7 : FUNC_DEF

[edge|28]:
13 -> 8 : INIT_STMT

[edge|29]:
13 -> 9 : FUNC_LIST

[edge|30]:
14 -> 2 : double

[edge|31]:
14 -> 3 : int

[edge|32]:
14 -> 18 : ARG_LIST

[edge|33]:
14 -> 4 : void

[edge|34]:
14 -> 5 : float

[edge|35]:
14 -> 19 : TYPE_SPEC

[edge|36]:
14 -> 20 : ARGUMENT

[edge|37]:
15 -> 21 : CALL_STMT

[edge|38]:
15 -> 22 : FACTOR

[edge|39]:
15 -> 23 : ID

[edge|40]:
15 -> 24 : (

[edge|41]:
15 -> 25 : TERM

[edge|42]:
15 -> 26 : EXPR

[edge|43]:
15 -> 27 : CONST

[edge|44]:
16 -> 14 : (

[edge|45]:
18 -> 28 : )

[edge|46]:
19 -> 29 : ID

[edge|47]:
20 -> 30 : ,

[edge|48]:
22 -> 31 : *

[edge|49]:
22 -> 32 : TERM2

[edge|50]:
22 -> 33 : /

[edge|51]:
23 -> 34 : (

[edge|52]:
24 -> 35 : CALL_STMT

[edge|53]:
24 -> 36 : FACTOR

[edge|54]:
24 -> 37 : ID

[edge|55]:
24 -> 38 : (

[edge|56]:
24 -> 39 : TERM

[edge|57]:
24 -> 40 : EXPR

[edge|58]:
24 -> 41 : CONST

[edge|59]:
25 -> 42 : +

[edge|60]:
25 -> 43 : -

[edge|61]:
25 -> 44 : EXPR2

[edge|62]:
28 -> 45 : CODE_BLOCK

[edge|63]:
28 -> 46 : {

[edge|64]:
30 -> 2 : double

[edge|65]:
30 -> 3 : int

[edge|66]:
30 -> 47 : ARG_LIST

[edge|67]:
30 -> 4 : void

[edge|68]:
30 -> 5 : float

[edge|69]:
30 -> 19 : TYPE_SPEC

[edge|70]:
30 -> 20 : ARGUMENT

[edge|71]:
31 -> 21 : CALL_STMT

[edge|72]:
31 -> 48 : FACTOR

[edge|73]:
31 -> 23 : ID

[edge|74]:
31 -> 24 : (

[edge|75]:
31 -> 27 : CONST

[edge|76]:
33 -> 21 : CALL_STMT

[edge|77]:
33 -> 49 : FACTOR

[edge|78]:
33 -> 23 : ID

[edge|79]:
33 -> 24 : (

[edge|80]:
33 -> 27 : CONST

[edge|81]:
34 -> 50 : PARG

[edge|82]:
34 -> 51 : ID

[edge|83]:
34 -> 52 : PARG_LIST

[edge|84]:
36 -> 53 : *

[edge|85]:
36 -> 54 : TERM2

[edge|86]:
36 -> 55 : /

[edge|87]:
37 -> 56 : (

[edge|88]:
38 -> 35 : CALL_STMT

[edge|89]:
38 -> 36 : FACTOR

[edge|90]:
38 -> 37 : ID

[edge|91]:
38 -> 38 : (

[edge|92]:
38 -> 39 : TERM

[edge|93]:
38 -> 57 : EXPR

[edge|94]:
38 -> 41 : CONST

[edge|95]:
39 -> 58 : +

[edge|96]:
39 -> 59 : -

[edge|97]:
39 -> 60 : EXPR2

[edge|98]:
40 -> 61 : )

[edge|99]:
42 -> 21 : CALL_STMT

[edge|100]:
42 -> 22 : FACTOR

[edge|101]:
42 -> 23 : ID

[edge|102]:
42 -> 24 : (

[edge|103]:
42 -> 62 : TERM

[edge|104]:
42 -> 27 : CONST

[edge|105]:
43 -> 21 : CALL_STMT

[edge|106]:
43 -> 22 : FACTOR

[edge|107]:
43 -> 23 : ID

[edge|108]:
43 -> 24 : (

[edge|109]:
43 -> 63 : TERM

[edge|110]:
43 -> 27 : CONST

[edge|111]:
46 -> 2 : double

[edge|112]:
46 -> 3 : int

[edge|113]:
46 -> 4 : void

[edge|114]:
46 -> 64 : for

[edge|115]:
46 -> 65 : while

[edge|116]:
46 -> 66 : ID

[edge|117]:
46 -> 67 : if

[edge|118]:
46 -> 5 : float

[edge|119]:
46 -> 68 : TYPE_SPEC

[edge|120]:
46 -> 69 : ITER_STMT

[edge|121]:
46 -> 70 : RTN_STMT

[edge|122]:
46 -> 71 : INIT_STMT

[edge|123]:
46 -> 72 : ASSIGN_STMT

[edge|124]:
46 -> 73 : return

[edge|125]:
46 -> 74 : STMT_LIST

[edge|126]:
46 -> 75 : IF_STMT

[edge|127]:
48 -> 31 : *

[edge|128]:
48 -> 76 : TERM2

[edge|129]:
48 -> 33 : /

[edge|130]:
49 -> 31 : *

[edge|131]:
49 -> 77 : TERM2

[edge|132]:
49 -> 33 : /

[edge|133]:
50 -> 78 : ,

[edge|134]:
52 -> 79 : )

[edge|135]:
53 -> 35 : CALL_STMT

[edge|136]:
53 -> 80 : FACTOR

[edge|137]:
53 -> 37 : ID

[edge|138]:
53 -> 38 : (

[edge|139]:
53 -> 41 : CONST

[edge|140]:
55 -> 35 : CALL_STMT

[edge|141]:
55 -> 81 : FACTOR

[edge|142]:
55 -> 37 : ID

[edge|143]:
55 -> 38 : (

[edge|144]:
55 -> 41 : CONST

[edge|145]:
56 -> 50 : PARG

[edge|146]:
56 -> 51 : ID

[edge|147]:
56 -> 82 : PARG_LIST

[edge|148]:
57 -> 83 : )

[edge|149]:
58 -> 35 : CALL_STMT

[edge|150]:
58 -> 36 : FACTOR

[edge|151]:
58 -> 37 : ID

[edge|152]:
58 -> 38 : (

[edge|153]:
58 -> 84 : TERM

[edge|154]:
58 -> 41 : CONST

[edge|155]:
59 -> 35 : CALL_STMT

[edge|156]:
59 -> 36 : FACTOR

[edge|157]:
59 -> 37 : ID

[edge|158]:
59 -> 38 : (

[edge|159]:
59 -> 85 : TERM

[edge|160]:
59 -> 41 : CONST

[edge|161]:
62 -> 42 : +

[edge|162]:
62 -> 43 : -

[edge|163]:
62 -> 86 : EXPR2

[edge|164]:
63 -> 42 : +

[edge|165]:
63 -> 43 : -

[edge|166]:
63 -> 87 : EXPR2

[edge|167]:
64 -> 88 : (

[edge|168]:
65 -> 89 : (

[edge|169]:
66 -> 90 : =

[edge|170]:
67 -> 91 : (

[edge|171]:
68 -> 92 : ID

[edge|172]:
69 -> 2 : double

[edge|173]:
69 -> 3 : int

[edge|174]:
69 -> 4 : void

[edge|175]:
69 -> 64 : for

[edge|176]:
69 -> 65 : while

[edge|177]:
69 -> 66 : ID

[edge|178]:
69 -> 67 : if

[edge|179]:
69 -> 5 : float

[edge|180]:
69 -> 68 : TYPE_SPEC

[edge|181]:
69 -> 69 : ITER_STMT

[edge|182]:
69 -> 70 : RTN_STMT

[edge|183]:
69 -> 71 : INIT_STMT

[edge|184]:
69 -> 72 : ASSIGN_STMT

[edge|185]:
69 -> 73 : return

[edge|186]:
69 -> 93 : STMT_LIST

[edge|187]:
69 -> 75 : IF_STMT

[edge|188]:
70 -> 94 : ;

[edge|189]:
71 -> 95 : ;

[edge|190]:
72 -> 96 : ;

[edge|191]:
73 -> 21 : CALL_STMT

[edge|192]:
73 -> 22 : FACTOR

[edge|193]:
73 -> 23 : ID

[edge|194]:
73 -> 24 : (

[edge|195]:
73 -> 25 : TERM

[edge|196]:
73 -> 97 : EXPR

[edge|197]:
73 -> 27 : CONST

[edge|198]:
74 -> 98 : }

[edge|199]:
75 -> 2 : double

[edge|200]:
75 -> 3 : int

[edge|201]:
75 -> 4 : void

[edge|202]:
75 -> 64 : for

[edge|203]:
75 -> 65 : while

[edge|204]:
75 -> 66 : ID

[edge|205]:
75 -> 67 : if

[edge|206]:
75 -> 5 : float

[edge|207]:
75 -> 68 : TYPE_SPEC

[edge|208]:
75 -> 69 : ITER_STMT

[edge|209]:
75 -> 70 : RTN_STMT

[edge|210]:
75 -> 71 : INIT_STMT

[edge|211]:
75 -> 72 : ASSIGN_STMT

[edge|212]:
75 -> 73 : return

[edge|213]:
75 -> 99 : STMT_LIST

[edge|214]:
75 -> 75 : IF_STMT

[edge|215]:
78 -> 50 : PARG

[edge|216]:
78 -> 51 : ID

[edge|217]:
78 -> 100 : PARG_LIST

[edge|218]:
80 -> 53 : *

[edge|219]:
80 -> 101 : TERM2

[edge|220]:
80 -> 55 : /

[edge|221]:
81 -> 53 : *

[edge|222]:
81 -> 102 : TERM2

[edge|223]:
81 -> 55 : /

[edge|224]:
82 -> 103 : )

[edge|225]:
84 -> 58 : +

[edge|226]:
84 -> 59 : -

[edge|227]:
84 -> 104 : EXPR2

[edge|228]:
85 -> 58 : +

[edge|229]:
85 -> 59 : -

[edge|230]:
85 -> 105 : EXPR2

[edge|231]:
88 -> 106 : CALL_STMT

[edge|232]:
88 -> 2 : double

[edge|233]:
88 -> 3 : int

[edge|234]:
88 -> 107 : FACTOR

[edge|235]:
88 -> 108 : STMT

[edge|236]:
88 -> 4 : void

[edge|237]:
88 -> 109 : for

[edge|238]:
88 -> 110 : while

[edge|239]:
88 -> 111 : ID

[edge|240]:
88 -> 112 : (

[edge|241]:
88 -> 113 : if

[edge|242]:
88 -> 5 : float

[edge|243]:
88 -> 68 : TYPE_SPEC

[edge|244]:
88 -> 114 : ITER_STMT

[edge|245]:
88 -> 115 : RTN_STMT

[edge|246]:
88 -> 116 : INIT_STMT

[edge|247]:
88 -> 117 : TERM

[edge|248]:
88 -> 118 : ASSIGN_STMT

[edge|249]:
88 -> 73 : return

[edge|250]:
88 -> 119 : JUST_STMT

[edge|251]:
88 -> 120 : IF_STMT

[edge|252]:
88 -> 121 : EXPR

[edge|253]:
88 -> 122 : CONST

[edge|254]:
89 -> 123 : CALL_STMT

[edge|255]:
89 -> 2 : double

[edge|256]:
89 -> 3 : int

[edge|257]:
89 -> 124 : FACTOR

[edge|258]:
89 -> 125 : STMT

[edge|259]:
89 -> 4 : void

[edge|260]:
89 -> 126 : for

[edge|261]:
89 -> 127 : while

[edge|262]:
89 -> 128 : ID

[edge|263]:
89 -> 129 : (

[edge|264]:
89 -> 130 : if

[edge|265]:
89 -> 5 : float

[edge|266]:
89 -> 131 : TYPE_SPEC

[edge|267]:
89 -> 132 : ITER_STMT

[edge|268]:
89 -> 133 : RTN_STMT

[edge|269]:
89 -> 134 : INIT_STMT

[edge|270]:
89 -> 135 : TERM

[edge|271]:
89 -> 136 : ASSIGN_STMT

[edge|272]:
89 -> 137 : return

[edge|273]:
89 -> 138 : JUST_STMT

[edge|274]:
89 -> 139 : IF_STMT

[edge|275]:
89 -> 140 : EXPR

[edge|276]:
89 -> 141 : CONST

[edge|277]:
90 -> 21 : CALL_STMT

[edge|278]:
90 -> 22 : FACTOR

[edge|279]:
90 -> 23 : ID

[edge|280]:
90 -> 24 : (

[edge|281]:
90 -> 25 : TERM

[edge|282]:
90 -> 142 : EXPR

[edge|283]:
90 -> 27 : CONST

[edge|284]:
91 -> 123 : CALL_STMT

[edge|285]:
91 -> 2 : double

[edge|286]:
91 -> 3 : int

[edge|287]:
91 -> 124 : FACTOR

[edge|288]:
91 -> 143 : STMT

[edge|289]:
91 -> 4 : void

[edge|290]:
91 -> 126 : for

[edge|291]:
91 -> 127 : while

[edge|292]:
91 -> 128 : ID

[edge|293]:
91 -> 129 : (

[edge|294]:
91 -> 130 : if

[edge|295]:
91 -> 5 : float

[edge|296]:
91 -> 131 : TYPE_SPEC

[edge|297]:
91 -> 132 : ITER_STMT

[edge|298]:
91 -> 133 : RTN_STMT

[edge|299]:
91 -> 134 : INIT_STMT

[edge|300]:
91 -> 135 : TERM

[edge|301]:
91 -> 136 : ASSIGN_STMT

[edge|302]:
91 -> 137 : return

[edge|303]:
91 -> 138 : JUST_STMT

[edge|304]:
91 -> 139 : IF_STMT

[edge|305]:
91 -> 140 : EXPR

[edge|306]:
91 -> 141 : CONST

[edge|307]:
92 -> 15 : =

[edge|308]:
94 -> 2 : double

[edge|309]:
94 -> 3 : int

[edge|310]:
94 -> 4 : void

[edge|311]:
94 -> 64 : for

[edge|312]:
94 -> 65 : while

[edge|313]:
94 -> 66 : ID

[edge|314]:
94 -> 67 : if

[edge|315]:
94 -> 5 : float

[edge|316]:
94 -> 68 : TYPE_SPEC

[edge|317]:
94 -> 69 : ITER_STMT

[edge|318]:
94 -> 70 : RTN_STMT

[edge|319]:
94 -> 71 : INIT_STMT

[edge|320]:
94 -> 72 : ASSIGN_STMT

[edge|321]:
94 -> 73 : return

[edge|322]:
94 -> 144 : STMT_LIST

[edge|323]:
94 -> 75 : IF_STMT

[edge|324]:
95 -> 2 : double

[edge|325]:
95 -> 3 : int

[edge|326]:
95 -> 4 : void

[edge|327]:
95 -> 64 : for

[edge|328]:
95 -> 65 : while

[edge|329]:
95 -> 66 : ID

[edge|330]:
95 -> 67 : if

[edge|331]:
95 -> 5 : float

[edge|332]:
95 -> 68 : TYPE_SPEC

[edge|333]:
95 -> 69 : ITER_STMT

[edge|334]:
95 -> 70 : RTN_STMT

[edge|335]:
95 -> 71 : INIT_STMT

[edge|336]:
95 -> 72 : ASSIGN_STMT

[edge|337]:
95 -> 73 : return

[edge|338]:
95 -> 145 : STMT_LIST

[edge|339]:
95 -> 75 : IF_STMT

[edge|340]:
96 -> 2 : double

[edge|341]:
96 -> 3 : int

[edge|342]:
96 -> 4 : void

[edge|343]:
96 -> 64 : for

[edge|344]:
96 -> 65 : while

[edge|345]:
96 -> 66 : ID

[edge|346]:
96 -> 67 : if

[edge|347]:
96 -> 5 : float

[edge|348]:
96 -> 68 : TYPE_SPEC

[edge|349]:
96 -> 69 : ITER_STMT

[edge|350]:
96 -> 70 : RTN_STMT

[edge|351]:
96 -> 71 : INIT_STMT

[edge|352]:
96 -> 72 : ASSIGN_STMT

[edge|353]:
96 -> 73 : return

[edge|354]:
96 -> 146 : STMT_LIST

[edge|355]:
96 -> 75 : IF_STMT

[edge|356]:
107 -> 147 : *

[edge|357]:
107 -> 148 : TERM2

[edge|358]:
107 -> 149 : /

[edge|359]:
108 -> 150 : ;

[edge|360]:
109 -> 151 : (

[edge|361]:
110 -> 152 : (

[edge|362]:
111 -> 153 : (

[edge|363]:
111 -> 90 : =

[edge|364]:
112 -> 35 : CALL_STMT

[edge|365]:
112 -> 36 : FACTOR

[edge|366]:
112 -> 37 : ID

[edge|367]:
112 -> 38 : (

[edge|368]:
112 -> 39 : TERM

[edge|369]:
112 -> 154 : EXPR

[edge|370]:
112 -> 41 : CONST

[edge|371]:
113 -> 155 : (

[edge|372]:
117 -> 156 : +

[edge|373]:
117 -> 157 : -

[edge|374]:
117 -> 158 : EXPR2

[edge|375]:
121 -> 159 : >=

[edge|376]:
121 -> 160 : >

[edge|377]:
121 -> 161 : ==

[edge|378]:
121 -> 162 : <

[edge|379]:
121 -> 163 : <=

[edge|380]:
121 -> 164 : !=

[edge|381]:
124 -> 165 : *

[edge|382]:
124 -> 166 : TERM2

[edge|383]:
124 -> 167 : /

[edge|384]:
125 -> 168 : )

[edge|385]:
126 -> 169 : (

[edge|386]:
127 -> 170 : (

[edge|387]:
128 -> 171 : (

[edge|388]:
128 -> 172 : =

[edge|389]:
129 -> 35 : CALL_STMT

[edge|390]:
129 -> 36 : FACTOR

[edge|391]:
129 -> 37 : ID

[edge|392]:
129 -> 38 : (

[edge|393]:
129 -> 39 : TERM

[edge|394]:
129 -> 173 : EXPR

[edge|395]:
129 -> 41 : CONST

[edge|396]:
130 -> 174 : (

[edge|397]:
131 -> 175 : ID

[edge|398]:
135 -> 176 : +

[edge|399]:
135 -> 177 : -

[edge|400]:
135 -> 178 : EXPR2

[edge|401]:
137 -> 35 : CALL_STMT

[edge|402]:
137 -> 36 : FACTOR

[edge|403]:
137 -> 37 : ID

[edge|404]:
137 -> 38 : (

[edge|405]:
137 -> 39 : TERM

[edge|406]:
137 -> 179 : EXPR

[edge|407]:
137 -> 41 : CONST

[edge|408]:
140 -> 180 : >=

[edge|409]:
140 -> 181 : >

[edge|410]:
140 -> 182 : ==

[edge|411]:
140 -> 183 : <

[edge|412]:
140 -> 184 : <=

[edge|413]:
140 -> 185 : !=

[edge|414]:
143 -> 186 : )

[edge|415]:
147 -> 106 : CALL_STMT

[edge|416]:
147 -> 187 : FACTOR

[edge|417]:
147 -> 188 : ID

[edge|418]:
147 -> 112 : (

[edge|419]:
147 -> 122 : CONST

[edge|420]:
149 -> 106 : CALL_STMT

[edge|421]:
149 -> 189 : FACTOR

[edge|422]:
149 -> 188 : ID

[edge|423]:
149 -> 112 : (

[edge|424]:
149 -> 122 : CONST

[edge|425]:
150 -> 106 : CALL_STMT

[edge|426]:
150 -> 2 : double

[edge|427]:
150 -> 3 : int

[edge|428]:
150 -> 107 : FACTOR

[edge|429]:
150 -> 190 : STMT

[edge|430]:
150 -> 4 : void

[edge|431]:
150 -> 109 : for

[edge|432]:
150 -> 110 : while

[edge|433]:
150 -> 111 : ID

[edge|434]:
150 -> 112 : (

[edge|435]:
150 -> 113 : if

[edge|436]:
150 -> 5 : float

[edge|437]:
150 -> 68 : TYPE_SPEC

[edge|438]:
150 -> 114 : ITER_STMT

[edge|439]:
150 -> 115 : RTN_STMT

[edge|440]:
150 -> 116 : INIT_STMT

[edge|441]:
150 -> 117 : TERM

[edge|442]:
150 -> 118 : ASSIGN_STMT

[edge|443]:
150 -> 73 : return

[edge|444]:
150 -> 119 : JUST_STMT

[edge|445]:
150 -> 120 : IF_STMT

[edge|446]:
150 -> 121 : EXPR

[edge|447]:
150 -> 122 : CONST

[edge|448]:
151 -> 106 : CALL_STMT

[edge|449]:
151 -> 2 : double

[edge|450]:
151 -> 3 : int

[edge|451]:
151 -> 107 : FACTOR

[edge|452]:
151 -> 191 : STMT

[edge|453]:
151 -> 4 : void

[edge|454]:
151 -> 109 : for

[edge|455]:
151 -> 110 : while

[edge|456]:
151 -> 111 : ID

[edge|457]:
151 -> 112 : (

[edge|458]:
151 -> 113 : if

[edge|459]:
151 -> 5 : float

[edge|460]:
151 -> 68 : TYPE_SPEC

[edge|461]:
151 -> 114 : ITER_STMT

[edge|462]:
151 -> 115 : RTN_STMT

[edge|463]:
151 -> 116 : INIT_STMT

[edge|464]:
151 -> 117 : TERM

[edge|465]:
151 -> 118 : ASSIGN_STMT

[edge|466]:
151 -> 73 : return

[edge|467]:
151 -> 119 : JUST_STMT

[edge|468]:
151 -> 120 : IF_STMT

[edge|469]:
151 -> 121 : EXPR

[edge|470]:
151 -> 122 : CONST

[edge|471]:
152 -> 123 : CALL_STMT

[edge|472]:
152 -> 2 : double

[edge|473]:
152 -> 3 : int

[edge|474]:
152 -> 124 : FACTOR

[edge|475]:
152 -> 192 : STMT

[edge|476]:
152 -> 4 : void

[edge|477]:
152 -> 126 : for

[edge|478]:
152 -> 127 : while

[edge|479]:
152 -> 128 : ID

[edge|480]:
152 -> 129 : (

[edge|481]:
152 -> 130 : if

[edge|482]:
152 -> 5 : float

[edge|483]:
152 -> 131 : TYPE_SPEC

[edge|484]:
152 -> 132 : ITER_STMT

[edge|485]:
152 -> 133 : RTN_STMT

[edge|486]:
152 -> 134 : INIT_STMT

[edge|487]:
152 -> 135 : TERM

[edge|488]:
152 -> 136 : ASSIGN_STMT

[edge|489]:
152 -> 137 : return

[edge|490]:
152 -> 138 : JUST_STMT

[edge|491]:
152 -> 139 : IF_STMT

[edge|492]:
152 -> 140 : EXPR

[edge|493]:
152 -> 141 : CONST

[edge|494]:
153 -> 50 : PARG

[edge|495]:
153 -> 51 : ID

[edge|496]:
153 -> 193 : PARG_LIST

[edge|497]:
154 -> 194 : )

[edge|498]:
155 -> 123 : CALL_STMT

[edge|499]:
155 -> 2 : double

[edge|500]:
155 -> 3 : int

[edge|501]:
155 -> 124 : FACTOR

[edge|502]:
155 -> 195 : STMT

[edge|503]:
155 -> 4 : void

[edge|504]:
155 -> 126 : for

[edge|505]:
155 -> 127 : while

[edge|506]:
155 -> 128 : ID

[edge|507]:
155 -> 129 : (

[edge|508]:
155 -> 130 : if

[edge|509]:
155 -> 5 : float

[edge|510]:
155 -> 131 : TYPE_SPEC

[edge|511]:
155 -> 132 : ITER_STMT

[edge|512]:
155 -> 133 : RTN_STMT

[edge|513]:
155 -> 134 : INIT_STMT

[edge|514]:
155 -> 135 : TERM

[edge|515]:
155 -> 136 : ASSIGN_STMT

[edge|516]:
155 -> 137 : return

[edge|517]:
155 -> 138 : JUST_STMT

[edge|518]:
155 -> 139 : IF_STMT

[edge|519]:
155 -> 140 : EXPR

[edge|520]:
155 -> 141 : CONST

[edge|521]:
156 -> 106 : CALL_STMT

[edge|522]:
156 -> 107 : FACTOR

[edge|523]:
156 -> 188 : ID

[edge|524]:
156 -> 112 : (

[edge|525]:
156 -> 196 : TERM

[edge|526]:
156 -> 122 : CONST

[edge|527]:
157 -> 106 : CALL_STMT

[edge|528]:
157 -> 107 : FACTOR

[edge|529]:
157 -> 188 : ID

[edge|530]:
157 -> 112 : (

[edge|531]:
157 -> 197 : TERM

[edge|532]:
157 -> 122 : CONST

[edge|533]:
159 -> 21 : CALL_STMT

[edge|534]:
159 -> 22 : FACTOR

[edge|535]:
159 -> 23 : ID

[edge|536]:
159 -> 24 : (

[edge|537]:
159 -> 25 : TERM

[edge|538]:
159 -> 198 : EXPR

[edge|539]:
159 -> 27 : CONST

[edge|540]:
160 -> 21 : CALL_STMT

[edge|541]:
160 -> 22 : FACTOR

[edge|542]:
160 -> 23 : ID

[edge|543]:
160 -> 24 : (

[edge|544]:
160 -> 25 : TERM

[edge|545]:
160 -> 199 : EXPR

[edge|546]:
160 -> 27 : CONST

[edge|547]:
161 -> 21 : CALL_STMT

[edge|548]:
161 -> 22 : FACTOR

[edge|549]:
161 -> 23 : ID

[edge|550]:
161 -> 24 : (

[edge|551]:
161 -> 25 : TERM

[edge|552]:
161 -> 200 : EXPR

[edge|553]:
161 -> 27 : CONST

[edge|554]:
162 -> 21 : CALL_STMT

[edge|555]:
162 -> 22 : FACTOR

[edge|556]:
162 -> 23 : ID

[edge|557]:
162 -> 24 : (

[edge|558]:
162 -> 25 : TERM

[edge|559]:
162 -> 201 : EXPR

[edge|560]:
162 -> 27 : CONST

[edge|561]:
163 -> 21 : CALL_STMT

[edge|562]:
163 -> 22 : FACTOR

[edge|563]:
163 -> 23 : ID

[edge|564]:
163 -> 24 : (

[edge|565]:
163 -> 25 : TERM

[edge|566]:
163 -> 202 : EXPR

[edge|567]:
163 -> 27 : CONST

[edge|568]:
164 -> 21 : CALL_STMT

[edge|569]:
164 -> 22 : FACTOR

[edge|570]:
164 -> 23 : ID

[edge|571]:
164 -> 24 : (

[edge|572]:
164 -> 25 : TERM

[edge|573]:
164 -> 203 : EXPR

[edge|574]:
164 -> 27 : CONST

[edge|575]:
165 -> 123 : CALL_STMT

[edge|576]:
165 -> 204 : FACTOR

[edge|577]:
165 -> 205 : ID

[edge|578]:
165 -> 129 : (

[edge|579]:
165 -> 141 : CONST

[edge|580]:
167 -> 123 : CALL_STMT

[edge|581]:
167 -> 206 : FACTOR

[edge|582]:
167 -> 205 : ID

[edge|583]:
167 -> 129 : (

[edge|584]:
167 -> 141 : CONST

[edge|585]:
168 -> 207 : CALL_STMT

[edge|586]:
168 -> 2 : double

[edge|587]:
168 -> 3 : int

[edge|588]:
168 -> 208 : FACTOR

[edge|589]:
168 -> 209 : CODE_BLOCK

[edge|590]:
168 -> 210 : STMT

[edge|591]:
168 -> 4 : void

[edge|592]:
168 -> 64 : for

[edge|593]:
168 -> 65 : while

[edge|594]:
168 -> 211 : ID

[edge|595]:
168 -> 212 : (

[edge|596]:
168 -> 67 : if

[edge|597]:
168 -> 5 : float

[edge|598]:
168 -> 213 : TYPE_SPEC

[edge|599]:
168 -> 214 : ITER_STMT

[edge|600]:
168 -> 215 : {

[edge|601]:
168 -> 216 : RTN_STMT

[edge|602]:
168 -> 217 : INIT_STMT

[edge|603]:
168 -> 218 : TERM

[edge|604]:
168 -> 219 : ASSIGN_STMT

[edge|605]:
168 -> 220 : return

[edge|606]:
168 -> 221 : JUST_STMT

[edge|607]:
168 -> 222 : IF_STMT

[edge|608]:
168 -> 223 : EXPR

[edge|609]:
168 -> 224 : CONST

[edge|610]:
169 -> 106 : CALL_STMT

[edge|611]:
169 -> 2 : double

[edge|612]:
169 -> 3 : int

[edge|613]:
169 -> 107 : FACTOR

[edge|614]:
169 -> 225 : STMT

[edge|615]:
169 -> 4 : void

[edge|616]:
169 -> 109 : for

[edge|617]:
169 -> 110 : while

[edge|618]:
169 -> 111 : ID

[edge|619]:
169 -> 112 : (

[edge|620]:
169 -> 113 : if

[edge|621]:
169 -> 5 : float

[edge|622]:
169 -> 68 : TYPE_SPEC

[edge|623]:
169 -> 114 : ITER_STMT

[edge|624]:
169 -> 115 : RTN_STMT

[edge|625]:
169 -> 116 : INIT_STMT

[edge|626]:
169 -> 117 : TERM

[edge|627]:
169 -> 118 : ASSIGN_STMT

[edge|628]:
169 -> 73 : return

[edge|629]:
169 -> 119 : JUST_STMT

[edge|630]:
169 -> 120 : IF_STMT

[edge|631]:
169 -> 121 : EXPR

[edge|632]:
169 -> 122 : CONST

[edge|633]:
170 -> 123 : CALL_STMT

[edge|634]:
170 -> 2 : double

[edge|635]:
170 -> 3 : int

[edge|636]:
170 -> 124 : FACTOR

[edge|637]:
170 -> 226 : STMT

[edge|638]:
170 -> 4 : void

[edge|639]:
170 -> 126 : for

[edge|640]:
170 -> 127 : while

[edge|641]:
170 -> 128 : ID

[edge|642]:
170 -> 129 : (

[edge|643]:
170 -> 130 : if

[edge|644]:
170 -> 5 : float

[edge|645]:
170 -> 131 : TYPE_SPEC

[edge|646]:
170 -> 132 : ITER_STMT

[edge|647]:
170 -> 133 : RTN_STMT

[edge|648]:
170 -> 134 : INIT_STMT

[edge|649]:
170 -> 135 : TERM

[edge|650]:
170 -> 136 : ASSIGN_STMT

[edge|651]:
170 -> 137 : return

[edge|652]:
170 -> 138 : JUST_STMT

[edge|653]:
170 -> 139 : IF_STMT

[edge|654]:
170 -> 140 : EXPR

[edge|655]:
170 -> 141 : CONST

[edge|656]:
171 -> 50 : PARG

[edge|657]:
171 -> 51 : ID

[edge|658]:
171 -> 227 : PARG_LIST

[edge|659]:
172 -> 35 : CALL_STMT

[edge|660]:
172 -> 36 : FACTOR

[edge|661]:
172 -> 37 : ID

[edge|662]:
172 -> 38 : (

[edge|663]:
172 -> 39 : TERM

[edge|664]:
172 -> 228 : EXPR

[edge|665]:
172 -> 41 : CONST

[edge|666]:
173 -> 229 : )

[edge|667]:
174 -> 123 : CALL_STMT

[edge|668]:
174 -> 2 : double

[edge|669]:
174 -> 3 : int

[edge|670]:
174 -> 124 : FACTOR

[edge|671]:
174 -> 230 : STMT

[edge|672]:
174 -> 4 : void

[edge|673]:
174 -> 126 : for

[edge|674]:
174 -> 127 : while

[edge|675]:
174 -> 128 : ID

[edge|676]:
174 -> 129 : (

[edge|677]:
174 -> 130 : if

[edge|678]:
174 -> 5 : float

[edge|679]:
174 -> 131 : TYPE_SPEC

[edge|680]:
174 -> 132 : ITER_STMT

[edge|681]:
174 -> 133 : RTN_STMT

[edge|682]:
174 -> 134 : INIT_STMT

[edge|683]:
174 -> 135 : TERM

[edge|684]:
174 -> 136 : ASSIGN_STMT

[edge|685]:
174 -> 137 : return

[edge|686]:
174 -> 138 : JUST_STMT

[edge|687]:
174 -> 139 : IF_STMT

[edge|688]:
174 -> 140 : EXPR

[edge|689]:
174 -> 141 : CONST

[edge|690]:
175 -> 231 : =

[edge|691]:
176 -> 123 : CALL_STMT

[edge|692]:
176 -> 124 : FACTOR

[edge|693]:
176 -> 205 : ID

[edge|694]:
176 -> 129 : (

[edge|695]:
176 -> 232 : TERM

[edge|696]:
176 -> 141 : CONST

[edge|697]:
177 -> 123 : CALL_STMT

[edge|698]:
177 -> 124 : FACTOR

[edge|699]:
177 -> 205 : ID

[edge|700]:
177 -> 129 : (

[edge|701]:
177 -> 233 : TERM

[edge|702]:
177 -> 141 : CONST

[edge|703]:
180 -> 35 : CALL_STMT

[edge|704]:
180 -> 36 : FACTOR

[edge|705]:
180 -> 37 : ID

[edge|706]:
180 -> 38 : (

[edge|707]:
180 -> 39 : TERM

[edge|708]:
180 -> 234 : EXPR

[edge|709]:
180 -> 41 : CONST

[edge|710]:
181 -> 35 : CALL_STMT

[edge|711]:
181 -> 36 : FACTOR

[edge|712]:
181 -> 37 : ID

[edge|713]:
181 -> 38 : (

[edge|714]:
181 -> 39 : TERM

[edge|715]:
181 -> 235 : EXPR

[edge|716]:
181 -> 41 : CONST

[edge|717]:
182 -> 35 : CALL_STMT

[edge|718]:
182 -> 36 : FACTOR

[edge|719]:
182 -> 37 : ID

[edge|720]:
182 -> 38 : (

[edge|721]:
182 -> 39 : TERM

[edge|722]:
182 -> 236 : EXPR

[edge|723]:
182 -> 41 : CONST

[edge|724]:
183 -> 35 : CALL_STMT

[edge|725]:
183 -> 36 : FACTOR

[edge|726]:
183 -> 37 : ID

[edge|727]:
183 -> 38 : (

[edge|728]:
183 -> 39 : TERM

[edge|729]:
183 -> 237 : EXPR

[edge|730]:
183 -> 41 : CONST

[edge|731]:
184 -> 35 : CALL_STMT

[edge|732]:
184 -> 36 : FACTOR

[edge|733]:
184 -> 37 : ID

[edge|734]:
184 -> 38 : (

[edge|735]:
184 -> 39 : TERM

[edge|736]:
184 -> 238 : EXPR

[edge|737]:
184 -> 41 : CONST

[edge|738]:
185 -> 35 : CALL_STMT

[edge|739]:
185 -> 36 : FACTOR

[edge|740]:
185 -> 37 : ID

[edge|741]:
185 -> 38 : (

[edge|742]:
185 -> 39 : TERM

[edge|743]:
185 -> 239 : EXPR

[edge|744]:
185 -> 41 : CONST

[edge|745]:
186 -> 106 : CALL_STMT

[edge|746]:
186 -> 2 : double

[edge|747]:
186 -> 3 : int

[edge|748]:
186 -> 107 : FACTOR

[edge|749]:
186 -> 240 : CODE_BLOCK

[edge|750]:
186 -> 241 : STMT

[edge|751]:
186 -> 4 : void

[edge|752]:
186 -> 109 : for

[edge|753]:
186 -> 110 : while

[edge|754]:
186 -> 111 : ID

[edge|755]:
186 -> 112 : (

[edge|756]:
186 -> 113 : if

[edge|757]:
186 -> 5 : float

[edge|758]:
186 -> 68 : TYPE_SPEC

[edge|759]:
186 -> 114 : ITER_STMT

[edge|760]:
186 -> 242 : {

[edge|761]:
186 -> 115 : RTN_STMT

[edge|762]:
186 -> 116 : INIT_STMT

[edge|763]:
186 -> 117 : TERM

[edge|764]:
186 -> 118 : ASSIGN_STMT

[edge|765]:
186 -> 73 : return

[edge|766]:
186 -> 119 : JUST_STMT

[edge|767]:
186 -> 120 : IF_STMT

[edge|768]:
186 -> 121 : EXPR

[edge|769]:
186 -> 122 : CONST

[edge|770]:
187 -> 147 : *

[edge|771]:
187 -> 243 : TERM2

[edge|772]:
187 -> 149 : /

[edge|773]:
188 -> 153 : (

[edge|774]:
189 -> 147 : *

[edge|775]:
189 -> 244 : TERM2

[edge|776]:
189 -> 149 : /

[edge|777]:
190 -> 245 : ;

[edge|778]:
191 -> 246 : ;

[edge|779]:
192 -> 247 : )

[edge|780]:
193 -> 248 : )

[edge|781]:
195 -> 249 : )

[edge|782]:
196 -> 156 : +

[edge|783]:
196 -> 157 : -

[edge|784]:
196 -> 250 : EXPR2

[edge|785]:
197 -> 156 : +

[edge|786]:
197 -> 157 : -

[edge|787]:
197 -> 251 : EXPR2

[edge|788]:
204 -> 165 : *

[edge|789]:
204 -> 252 : TERM2

[edge|790]:
204 -> 167 : /

[edge|791]:
205 -> 171 : (

[edge|792]:
206 -> 165 : *

[edge|793]:
206 -> 253 : TERM2

[edge|794]:
206 -> 167 : /

[edge|795]:
208 -> 254 : *

[edge|796]:
208 -> 255 : TERM2

[edge|797]:
208 -> 256 : /

[edge|798]:
211 -> 257 : (

[edge|799]:
211 -> 258 : =

[edge|800]:
212 -> 35 : CALL_STMT

[edge|801]:
212 -> 36 : FACTOR

[edge|802]:
212 -> 37 : ID

[edge|803]:
212 -> 38 : (

[edge|804]:
212 -> 39 : TERM

[edge|805]:
212 -> 259 : EXPR

[edge|806]:
212 -> 41 : CONST

[edge|807]:
213 -> 260 : ID

[edge|808]:
215 -> 2 : double

[edge|809]:
215 -> 3 : int

[edge|810]:
215 -> 4 : void

[edge|811]:
215 -> 64 : for

[edge|812]:
215 -> 65 : while

[edge|813]:
215 -> 66 : ID

[edge|814]:
215 -> 67 : if

[edge|815]:
215 -> 5 : float

[edge|816]:
215 -> 68 : TYPE_SPEC

[edge|817]:
215 -> 69 : ITER_STMT

[edge|818]:
215 -> 70 : RTN_STMT

[edge|819]:
215 -> 71 : INIT_STMT

[edge|820]:
215 -> 72 : ASSIGN_STMT

[edge|821]:
215 -> 73 : return

[edge|822]:
215 -> 261 : STMT_LIST

[edge|823]:
215 -> 75 : IF_STMT

[edge|824]:
218 -> 262 : +

[edge|825]:
218 -> 263 : -

[edge|826]:
218 -> 264 : EXPR2

[edge|827]:
220 -> 265 : CALL_STMT

[edge|828]:
220 -> 266 : FACTOR

[edge|829]:
220 -> 267 : ID

[edge|830]:
220 -> 268 : (

[edge|831]:
220 -> 269 : TERM

[edge|832]:
220 -> 270 : EXPR

[edge|833]:
220 -> 271 : CONST

[edge|834]:
223 -> 272 : >=

[edge|835]:
223 -> 273 : >

[edge|836]:
223 -> 274 : ==

[edge|837]:
223 -> 275 : <

[edge|838]:
223 -> 276 : <=

[edge|839]:
223 -> 277 : !=

[edge|840]:
225 -> 278 : ;

[edge|841]:
226 -> 279 : )

[edge|842]:
227 -> 280 : )

[edge|843]:
230 -> 281 : )

[edge|844]:
231 -> 35 : CALL_STMT

[edge|845]:
231 -> 36 : FACTOR

[edge|846]:
231 -> 37 : ID

[edge|847]:
231 -> 38 : (

[edge|848]:
231 -> 39 : TERM

[edge|849]:
231 -> 282 : EXPR

[edge|850]:
231 -> 41 : CONST

[edge|851]:
232 -> 176 : +

[edge|852]:
232 -> 177 : -

[edge|853]:
232 -> 283 : EXPR2

[edge|854]:
233 -> 176 : +

[edge|855]:
233 -> 177 : -

[edge|856]:
233 -> 284 : EXPR2

[edge|857]:
240 -> 285 : else

[edge|858]:
241 -> 286 : ;

[edge|859]:
242 -> 2 : double

[edge|860]:
242 -> 3 : int

[edge|861]:
242 -> 4 : void

[edge|862]:
242 -> 64 : for

[edge|863]:
242 -> 65 : while

[edge|864]:
242 -> 66 : ID

[edge|865]:
242 -> 67 : if

[edge|866]:
242 -> 5 : float

[edge|867]:
242 -> 68 : TYPE_SPEC

[edge|868]:
242 -> 69 : ITER_STMT

[edge|869]:
242 -> 70 : RTN_STMT

[edge|870]:
242 -> 71 : INIT_STMT

[edge|871]:
242 -> 72 : ASSIGN_STMT

[edge|872]:
242 -> 73 : return

[edge|873]:
242 -> 287 : STMT_LIST

[edge|874]:
242 -> 75 : IF_STMT

[edge|875]:
245 -> 123 : CALL_STMT

[edge|876]:
245 -> 2 : double

[edge|877]:
245 -> 3 : int

[edge|878]:
245 -> 124 : FACTOR

[edge|879]:
245 -> 288 : STMT

[edge|880]:
245 -> 4 : void

[edge|881]:
245 -> 126 : for

[edge|882]:
245 -> 127 : while

[edge|883]:
245 -> 128 : ID

[edge|884]:
245 -> 129 : (

[edge|885]:
245 -> 130 : if

[edge|886]:
245 -> 5 : float

[edge|887]:
245 -> 131 : TYPE_SPEC

[edge|888]:
245 -> 132 : ITER_STMT

[edge|889]:
245 -> 133 : RTN_STMT

[edge|890]:
245 -> 134 : INIT_STMT

[edge|891]:
245 -> 135 : TERM

[edge|892]:
245 -> 136 : ASSIGN_STMT

[edge|893]:
245 -> 137 : return

[edge|894]:
245 -> 138 : JUST_STMT

[edge|895]:
245 -> 139 : IF_STMT

[edge|896]:
245 -> 140 : EXPR

[edge|897]:
245 -> 141 : CONST

[edge|898]:
246 -> 106 : CALL_STMT

[edge|899]:
246 -> 2 : double

[edge|900]:
246 -> 3 : int

[edge|901]:
246 -> 107 : FACTOR

[edge|902]:
246 -> 289 : STMT

[edge|903]:
246 -> 4 : void

[edge|904]:
246 -> 109 : for

[edge|905]:
246 -> 110 : while

[edge|906]:
246 -> 111 : ID

[edge|907]:
246 -> 112 : (

[edge|908]:
246 -> 113 : if

[edge|909]:
246 -> 5 : float

[edge|910]:
246 -> 68 : TYPE_SPEC

[edge|911]:
246 -> 114 : ITER_STMT

[edge|912]:
246 -> 115 : RTN_STMT

[edge|913]:
246 -> 116 : INIT_STMT

[edge|914]:
246 -> 117 : TERM

[edge|915]:
246 -> 118 : ASSIGN_STMT

[edge|916]:
246 -> 73 : return

[edge|917]:
246 -> 119 : JUST_STMT

[edge|918]:
246 -> 120 : IF_STMT

[edge|919]:
246 -> 121 : EXPR

[edge|920]:
246 -> 122 : CONST

[edge|921]:
247 -> 106 : CALL_STMT

[edge|922]:
247 -> 2 : double

[edge|923]:
247 -> 3 : int

[edge|924]:
247 -> 107 : FACTOR

[edge|925]:
247 -> 290 : CODE_BLOCK

[edge|926]:
247 -> 291 : STMT

[edge|927]:
247 -> 4 : void

[edge|928]:
247 -> 109 : for

[edge|929]:
247 -> 110 : while

[edge|930]:
247 -> 111 : ID

[edge|931]:
247 -> 112 : (

[edge|932]:
247 -> 113 : if

[edge|933]:
247 -> 5 : float

[edge|934]:
247 -> 68 : TYPE_SPEC

[edge|935]:
247 -> 114 : ITER_STMT

[edge|936]:
247 -> 292 : {

[edge|937]:
247 -> 115 : RTN_STMT

[edge|938]:
247 -> 116 : INIT_STMT

[edge|939]:
247 -> 117 : TERM

[edge|940]:
247 -> 118 : ASSIGN_STMT

[edge|941]:
247 -> 73 : return

[edge|942]:
247 -> 119 : JUST_STMT

[edge|943]:
247 -> 120 : IF_STMT

[edge|944]:
247 -> 121 : EXPR

[edge|945]:
247 -> 122 : CONST

[edge|946]:
249 -> 106 : CALL_STMT

[edge|947]:
249 -> 2 : double

[edge|948]:
249 -> 3 : int

[edge|949]:
249 -> 107 : FACTOR

[edge|950]:
249 -> 293 : CODE_BLOCK

[edge|951]:
249 -> 294 : STMT

[edge|952]:
249 -> 4 : void

[edge|953]:
249 -> 109 : for

[edge|954]:
249 -> 110 : while

[edge|955]:
249 -> 111 : ID

[edge|956]:
249 -> 112 : (

[edge|957]:
249 -> 113 : if

[edge|958]:
249 -> 5 : float

[edge|959]:
249 -> 68 : TYPE_SPEC

[edge|960]:
249 -> 114 : ITER_STMT

[edge|961]:
249 -> 295 : {

[edge|962]:
249 -> 115 : RTN_STMT

[edge|963]:
249 -> 116 : INIT_STMT

[edge|964]:
249 -> 117 : TERM

[edge|965]:
249 -> 118 : ASSIGN_STMT

[edge|966]:
249 -> 73 : return

[edge|967]:
249 -> 119 : JUST_STMT

[edge|968]:
249 -> 120 : IF_STMT

[edge|969]:
249 -> 121 : EXPR

[edge|970]:
249 -> 122 : CONST

[edge|971]:
254 -> 207 : CALL_STMT

[edge|972]:
254 -> 296 : FACTOR

[edge|973]:
254 -> 297 : ID

[edge|974]:
254 -> 212 : (

[edge|975]:
254 -> 224 : CONST

[edge|976]:
256 -> 207 : CALL_STMT

[edge|977]:
256 -> 298 : FACTOR

[edge|978]:
256 -> 297 : ID

[edge|979]:
256 -> 212 : (

[edge|980]:
256 -> 224 : CONST

[edge|981]:
257 -> 50 : PARG

[edge|982]:
257 -> 51 : ID

[edge|983]:
257 -> 299 : PARG_LIST

[edge|984]:
258 -> 265 : CALL_STMT

[edge|985]:
258 -> 266 : FACTOR

[edge|986]:
258 -> 267 : ID

[edge|987]:
258 -> 268 : (

[edge|988]:
258 -> 269 : TERM

[edge|989]:
258 -> 300 : EXPR

[edge|990]:
258 -> 271 : CONST

[edge|991]:
259 -> 301 : )

[edge|992]:
260 -> 302 : =

[edge|993]:
261 -> 303 : }

[edge|994]:
262 -> 207 : CALL_STMT

[edge|995]:
262 -> 208 : FACTOR

[edge|996]:
262 -> 297 : ID

[edge|997]:
262 -> 212 : (

[edge|998]:
262 -> 304 : TERM

[edge|999]:
262 -> 224 : CONST

[edge|1000]:
263 -> 207 : CALL_STMT

[edge|1001]:
263 -> 208 : FACTOR

[edge|1002]:
263 -> 297 : ID

[edge|1003]:
263 -> 212 : (

[edge|1004]:
263 -> 305 : TERM

[edge|1005]:
263 -> 224 : CONST

[edge|1006]:
266 -> 306 : *

[edge|1007]:
266 -> 307 : TERM2

[edge|1008]:
266 -> 308 : /

[edge|1009]:
267 -> 309 : (

[edge|1010]:
268 -> 35 : CALL_STMT

[edge|1011]:
268 -> 36 : FACTOR

[edge|1012]:
268 -> 37 : ID

[edge|1013]:
268 -> 38 : (

[edge|1014]:
268 -> 39 : TERM

[edge|1015]:
268 -> 310 : EXPR

[edge|1016]:
268 -> 41 : CONST

[edge|1017]:
269 -> 311 : +

[edge|1018]:
269 -> 312 : -

[edge|1019]:
269 -> 313 : EXPR2

[edge|1020]:
272 -> 265 : CALL_STMT

[edge|1021]:
272 -> 266 : FACTOR

[edge|1022]:
272 -> 267 : ID

[edge|1023]:
272 -> 268 : (

[edge|1024]:
272 -> 269 : TERM

[edge|1025]:
272 -> 314 : EXPR

[edge|1026]:
272 -> 271 : CONST

[edge|1027]:
273 -> 265 : CALL_STMT

[edge|1028]:
273 -> 266 : FACTOR

[edge|1029]:
273 -> 267 : ID

[edge|1030]:
273 -> 268 : (

[edge|1031]:
273 -> 269 : TERM

[edge|1032]:
273 -> 315 : EXPR

[edge|1033]:
273 -> 271 : CONST

[edge|1034]:
274 -> 265 : CALL_STMT

[edge|1035]:
274 -> 266 : FACTOR

[edge|1036]:
274 -> 267 : ID

[edge|1037]:
274 -> 268 : (

[edge|1038]:
274 -> 269 : TERM

[edge|1039]:
274 -> 316 : EXPR

[edge|1040]:
274 -> 271 : CONST

[edge|1041]:
275 -> 265 : CALL_STMT

[edge|1042]:
275 -> 266 : FACTOR

[edge|1043]:
275 -> 267 : ID

[edge|1044]:
275 -> 268 : (

[edge|1045]:
275 -> 269 : TERM

[edge|1046]:
275 -> 317 : EXPR

[edge|1047]:
275 -> 271 : CONST

[edge|1048]:
276 -> 265 : CALL_STMT

[edge|1049]:
276 -> 266 : FACTOR

[edge|1050]:
276 -> 267 : ID

[edge|1051]:
276 -> 268 : (

[edge|1052]:
276 -> 269 : TERM

[edge|1053]:
276 -> 318 : EXPR

[edge|1054]:
276 -> 271 : CONST

[edge|1055]:
277 -> 265 : CALL_STMT

[edge|1056]:
277 -> 266 : FACTOR

[edge|1057]:
277 -> 267 : ID

[edge|1058]:
277 -> 268 : (

[edge|1059]:
277 -> 269 : TERM

[edge|1060]:
277 -> 319 : EXPR

[edge|1061]:
277 -> 271 : CONST

[edge|1062]:
278 -> 106 : CALL_STMT

[edge|1063]:
278 -> 2 : double

[edge|1064]:
278 -> 3 : int

[edge|1065]:
278 -> 107 : FACTOR

[edge|1066]:
278 -> 320 : STMT

[edge|1067]:
278 -> 4 : void

[edge|1068]:
278 -> 109 : for

[edge|1069]:
278 -> 110 : while

[edge|1070]:
278 -> 111 : ID

[edge|1071]:
278 -> 112 : (

[edge|1072]:
278 -> 113 : if

[edge|1073]:
278 -> 5 : float

[edge|1074]:
278 -> 68 : TYPE_SPEC

[edge|1075]:
278 -> 114 : ITER_STMT

[edge|1076]:
278 -> 115 : RTN_STMT

[edge|1077]:
278 -> 116 : INIT_STMT

[edge|1078]:
278 -> 117 : TERM

[edge|1079]:
278 -> 118 : ASSIGN_STMT

[edge|1080]:
278 -> 73 : return

[edge|1081]:
278 -> 119 : JUST_STMT

[edge|1082]:
278 -> 120 : IF_STMT

[edge|1083]:
278 -> 121 : EXPR

[edge|1084]:
278 -> 122 : CONST

[edge|1085]:
279 -> 123 : CALL_STMT

[edge|1086]:
279 -> 2 : double

[edge|1087]:
279 -> 3 : int

[edge|1088]:
279 -> 124 : FACTOR

[edge|1089]:
279 -> 321 : CODE_BLOCK

[edge|1090]:
279 -> 322 : STMT

[edge|1091]:
279 -> 4 : void

[edge|1092]:
279 -> 126 : for

[edge|1093]:
279 -> 127 : while

[edge|1094]:
279 -> 128 : ID

[edge|1095]:
279 -> 129 : (

[edge|1096]:
279 -> 130 : if

[edge|1097]:
279 -> 5 : float

[edge|1098]:
279 -> 131 : TYPE_SPEC

[edge|1099]:
279 -> 132 : ITER_STMT

[edge|1100]:
279 -> 323 : {

[edge|1101]:
279 -> 133 : RTN_STMT

[edge|1102]:
279 -> 134 : INIT_STMT

[edge|1103]:
279 -> 135 : TERM

[edge|1104]:
279 -> 136 : ASSIGN_STMT

[edge|1105]:
279 -> 137 : return

[edge|1106]:
279 -> 138 : JUST_STMT

[edge|1107]:
279 -> 139 : IF_STMT

[edge|1108]:
279 -> 140 : EXPR

[edge|1109]:
279 -> 141 : CONST

[edge|1110]:
281 -> 106 : CALL_STMT

[edge|1111]:
281 -> 2 : double

[edge|1112]:
281 -> 3 : int

[edge|1113]:
281 -> 107 : FACTOR

[edge|1114]:
281 -> 324 : CODE_BLOCK

[edge|1115]:
281 -> 325 : STMT

[edge|1116]:
281 -> 4 : void

[edge|1117]:
281 -> 109 : for

[edge|1118]:
281 -> 110 : while

[edge|1119]:
281 -> 111 : ID

[edge|1120]:
281 -> 112 : (

[edge|1121]:
281 -> 113 : if

[edge|1122]:
281 -> 5 : float

[edge|1123]:
281 -> 68 : TYPE_SPEC

[edge|1124]:
281 -> 114 : ITER_STMT

[edge|1125]:
281 -> 326 : {

[edge|1126]:
281 -> 115 : RTN_STMT

[edge|1127]:
281 -> 116 : INIT_STMT

[edge|1128]:
281 -> 117 : TERM

[edge|1129]:
281 -> 118 : ASSIGN_STMT

[edge|1130]:
281 -> 73 : return

[edge|1131]:
281 -> 119 : JUST_STMT

[edge|1132]:
281 -> 120 : IF_STMT

[edge|1133]:
281 -> 121 : EXPR

[edge|1134]:
281 -> 122 : CONST

[edge|1135]:
285 -> 327 : CODE_BLOCK

[edge|1136]:
285 -> 67 : if

[edge|1137]:
285 -> 215 : {

[edge|1138]:
285 -> 328 : IF_STMT

[edge|1139]:
286 -> 329 : else

[edge|1140]:
287 -> 330 : }

[edge|1141]:
288 -> 331 : )

[edge|1142]:
289 -> 332 : ;

[edge|1143]:
292 -> 2 : double

[edge|1144]:
292 -> 3 : int

[edge|1145]:
292 -> 4 : void

[edge|1146]:
292 -> 64 : for

[edge|1147]:
292 -> 65 : while

[edge|1148]:
292 -> 66 : ID

[edge|1149]:
292 -> 67 : if

[edge|1150]:
292 -> 5 : float

[edge|1151]:
292 -> 68 : TYPE_SPEC

[edge|1152]:
292 -> 69 : ITER_STMT

[edge|1153]:
292 -> 70 : RTN_STMT

[edge|1154]:
292 -> 71 : INIT_STMT

[edge|1155]:
292 -> 72 : ASSIGN_STMT

[edge|1156]:
292 -> 73 : return

[edge|1157]:
292 -> 333 : STMT_LIST

[edge|1158]:
292 -> 75 : IF_STMT

[edge|1159]:
293 -> 334 : else

[edge|1160]:
294 -> 335 : ;

[edge|1161]:
295 -> 2 : double

[edge|1162]:
295 -> 3 : int

[edge|1163]:
295 -> 4 : void

[edge|1164]:
295 -> 64 : for

[edge|1165]:
295 -> 65 : while

[edge|1166]:
295 -> 66 : ID

[edge|1167]:
295 -> 67 : if

[edge|1168]:
295 -> 5 : float

[edge|1169]:
295 -> 68 : TYPE_SPEC

[edge|1170]:
295 -> 69 : ITER_STMT

[edge|1171]:
295 -> 70 : RTN_STMT

[edge|1172]:
295 -> 71 : INIT_STMT

[edge|1173]:
295 -> 72 : ASSIGN_STMT

[edge|1174]:
295 -> 73 : return

[edge|1175]:
295 -> 336 : STMT_LIST

[edge|1176]:
295 -> 75 : IF_STMT

[edge|1177]:
296 -> 254 : *

[edge|1178]:
296 -> 337 : TERM2

[edge|1179]:
296 -> 256 : /

[edge|1180]:
297 -> 257 : (

[edge|1181]:
298 -> 254 : *

[edge|1182]:
298 -> 338 : TERM2

[edge|1183]:
298 -> 256 : /

[edge|1184]:
299 -> 339 : )

[edge|1185]:
302 -> 265 : CALL_STMT

[edge|1186]:
302 -> 266 : FACTOR

[edge|1187]:
302 -> 267 : ID

[edge|1188]:
302 -> 268 : (

[edge|1189]:
302 -> 269 : TERM

[edge|1190]:
302 -> 340 : EXPR

[edge|1191]:
302 -> 271 : CONST

[edge|1192]:
304 -> 262 : +

[edge|1193]:
304 -> 263 : -

[edge|1194]:
304 -> 341 : EXPR2

[edge|1195]:
305 -> 262 : +

[edge|1196]:
305 -> 263 : -

[edge|1197]:
305 -> 342 : EXPR2

[edge|1198]:
306 -> 265 : CALL_STMT

[edge|1199]:
306 -> 343 : FACTOR

[edge|1200]:
306 -> 267 : ID

[edge|1201]:
306 -> 268 : (

[edge|1202]:
306 -> 271 : CONST

[edge|1203]:
308 -> 265 : CALL_STMT

[edge|1204]:
308 -> 344 : FACTOR

[edge|1205]:
308 -> 267 : ID

[edge|1206]:
308 -> 268 : (

[edge|1207]:
308 -> 271 : CONST

[edge|1208]:
309 -> 50 : PARG

[edge|1209]:
309 -> 51 : ID

[edge|1210]:
309 -> 345 : PARG_LIST

[edge|1211]:
310 -> 346 : )

[edge|1212]:
311 -> 265 : CALL_STMT

[edge|1213]:
311 -> 266 : FACTOR

[edge|1214]:
311 -> 267 : ID

[edge|1215]:
311 -> 268 : (

[edge|1216]:
311 -> 347 : TERM

[edge|1217]:
311 -> 271 : CONST

[edge|1218]:
312 -> 265 : CALL_STMT

[edge|1219]:
312 -> 266 : FACTOR

[edge|1220]:
312 -> 267 : ID

[edge|1221]:
312 -> 268 : (

[edge|1222]:
312 -> 348 : TERM

[edge|1223]:
312 -> 271 : CONST

[edge|1224]:
320 -> 349 : ;

[edge|1225]:
323 -> 2 : double

[edge|1226]:
323 -> 3 : int

[edge|1227]:
323 -> 4 : void

[edge|1228]:
323 -> 64 : for

[edge|1229]:
323 -> 65 : while

[edge|1230]:
323 -> 66 : ID

[edge|1231]:
323 -> 67 : if

[edge|1232]:
323 -> 5 : float

[edge|1233]:
323 -> 68 : TYPE_SPEC

[edge|1234]:
323 -> 69 : ITER_STMT

[edge|1235]:
323 -> 70 : RTN_STMT

[edge|1236]:
323 -> 71 : INIT_STMT

[edge|1237]:
323 -> 72 : ASSIGN_STMT

[edge|1238]:
323 -> 73 : return

[edge|1239]:
323 -> 350 : STMT_LIST

[edge|1240]:
323 -> 75 : IF_STMT

[edge|1241]:
324 -> 351 : else

[edge|1242]:
325 -> 352 : ;

[edge|1243]:
326 -> 2 : double

[edge|1244]:
326 -> 3 : int

[edge|1245]:
326 -> 4 : void

[edge|1246]:
326 -> 64 : for

[edge|1247]:
326 -> 65 : while

[edge|1248]:
326 -> 66 : ID

[edge|1249]:
326 -> 67 : if

[edge|1250]:
326 -> 5 : float

[edge|1251]:
326 -> 68 : TYPE_SPEC

[edge|1252]:
326 -> 69 : ITER_STMT

[edge|1253]:
326 -> 70 : RTN_STMT

[edge|1254]:
326 -> 71 : INIT_STMT

[edge|1255]:
326 -> 72 : ASSIGN_STMT

[edge|1256]:
326 -> 73 : return

[edge|1257]:
326 -> 353 : STMT_LIST

[edge|1258]:
326 -> 75 : IF_STMT

[edge|1259]:
329 -> 354 : CODE_BLOCK

[edge|1260]:
329 -> 67 : if

[edge|1261]:
329 -> 215 : {

[edge|1262]:
329 -> 355 : IF_STMT

[edge|1263]:
331 -> 207 : CALL_STMT

[edge|1264]:
331 -> 2 : double

[edge|1265]:
331 -> 3 : int

[edge|1266]:
331 -> 208 : FACTOR

[edge|1267]:
331 -> 356 : CODE_BLOCK

[edge|1268]:
331 -> 357 : STMT

[edge|1269]:
331 -> 4 : void

[edge|1270]:
331 -> 64 : for

[edge|1271]:
331 -> 65 : while

[edge|1272]:
331 -> 211 : ID

[edge|1273]:
331 -> 212 : (

[edge|1274]:
331 -> 67 : if

[edge|1275]:
331 -> 5 : float

[edge|1276]:
331 -> 213 : TYPE_SPEC

[edge|1277]:
331 -> 214 : ITER_STMT

[edge|1278]:
331 -> 215 : {

[edge|1279]:
331 -> 216 : RTN_STMT

[edge|1280]:
331 -> 217 : INIT_STMT

[edge|1281]:
331 -> 218 : TERM

[edge|1282]:
331 -> 219 : ASSIGN_STMT

[edge|1283]:
331 -> 220 : return

[edge|1284]:
331 -> 221 : JUST_STMT

[edge|1285]:
331 -> 222 : IF_STMT

[edge|1286]:
331 -> 223 : EXPR

[edge|1287]:
331 -> 224 : CONST

[edge|1288]:
332 -> 123 : CALL_STMT

[edge|1289]:
332 -> 2 : double

[edge|1290]:
332 -> 3 : int

[edge|1291]:
332 -> 124 : FACTOR

[edge|1292]:
332 -> 358 : STMT

[edge|1293]:
332 -> 4 : void

[edge|1294]:
332 -> 126 : for

[edge|1295]:
332 -> 127 : while

[edge|1296]:
332 -> 128 : ID

[edge|1297]:
332 -> 129 : (

[edge|1298]:
332 -> 130 : if

[edge|1299]:
332 -> 5 : float

[edge|1300]:
332 -> 131 : TYPE_SPEC

[edge|1301]:
332 -> 132 : ITER_STMT

[edge|1302]:
332 -> 133 : RTN_STMT

[edge|1303]:
332 -> 134 : INIT_STMT

[edge|1304]:
332 -> 135 : TERM

[edge|1305]:
332 -> 136 : ASSIGN_STMT

[edge|1306]:
332 -> 137 : return

[edge|1307]:
332 -> 138 : JUST_STMT

[edge|1308]:
332 -> 139 : IF_STMT

[edge|1309]:
332 -> 140 : EXPR

[edge|1310]:
332 -> 141 : CONST

[edge|1311]:
333 -> 359 : }

[edge|1312]:
334 -> 360 : CODE_BLOCK

[edge|1313]:
334 -> 113 : if

[edge|1314]:
334 -> 292 : {

[edge|1315]:
334 -> 361 : IF_STMT

[edge|1316]:
335 -> 362 : else

[edge|1317]:
336 -> 363 : }

[edge|1318]:
343 -> 306 : *

[edge|1319]:
343 -> 364 : TERM2

[edge|1320]:
343 -> 308 : /

[edge|1321]:
344 -> 306 : *

[edge|1322]:
344 -> 365 : TERM2

[edge|1323]:
344 -> 308 : /

[edge|1324]:
345 -> 366 : )

[edge|1325]:
347 -> 311 : +

[edge|1326]:
347 -> 312 : -

[edge|1327]:
347 -> 367 : EXPR2

[edge|1328]:
348 -> 311 : +

[edge|1329]:
348 -> 312 : -

[edge|1330]:
348 -> 368 : EXPR2

[edge|1331]:
349 -> 123 : CALL_STMT

[edge|1332]:
349 -> 2 : double

[edge|1333]:
349 -> 3 : int

[edge|1334]:
349 -> 124 : FACTOR

[edge|1335]:
349 -> 369 : STMT

[edge|1336]:
349 -> 4 : void

[edge|1337]:
349 -> 126 : for

[edge|1338]:
349 -> 127 : while

[edge|1339]:
349 -> 128 : ID

[edge|1340]:
349 -> 129 : (

[edge|1341]:
349 -> 130 : if

[edge|1342]:
349 -> 5 : float

[edge|1343]:
349 -> 131 : TYPE_SPEC

[edge|1344]:
349 -> 132 : ITER_STMT

[edge|1345]:
349 -> 133 : RTN_STMT

[edge|1346]:
349 -> 134 : INIT_STMT

[edge|1347]:
349 -> 135 : TERM

[edge|1348]:
349 -> 136 : ASSIGN_STMT

[edge|1349]:
349 -> 137 : return

[edge|1350]:
349 -> 138 : JUST_STMT

[edge|1351]:
349 -> 139 : IF_STMT

[edge|1352]:
349 -> 140 : EXPR

[edge|1353]:
349 -> 141 : CONST

[edge|1354]:
350 -> 370 : }

[edge|1355]:
351 -> 371 : CODE_BLOCK

[edge|1356]:
351 -> 130 : if

[edge|1357]:
351 -> 323 : {

[edge|1358]:
351 -> 372 : IF_STMT

[edge|1359]:
352 -> 373 : else

[edge|1360]:
353 -> 374 : }

[edge|1361]:
358 -> 375 : )

[edge|1362]:
362 -> 376 : CODE_BLOCK

[edge|1363]:
362 -> 113 : if

[edge|1364]:
362 -> 292 : {

[edge|1365]:
362 -> 377 : IF_STMT

[edge|1366]:
369 -> 378 : )

[edge|1367]:
373 -> 379 : CODE_BLOCK

[edge|1368]:
373 -> 130 : if

[edge|1369]:
373 -> 323 : {

[edge|1370]:
373 -> 380 : IF_STMT

[edge|1371]:
375 -> 106 : CALL_STMT

[edge|1372]:
375 -> 2 : double

[edge|1373]:
375 -> 3 : int

[edge|1374]:
375 -> 107 : FACTOR

[edge|1375]:
375 -> 381 : CODE_BLOCK

[edge|1376]:
375 -> 382 : STMT

[edge|1377]:
375 -> 4 : void

[edge|1378]:
375 -> 109 : for

[edge|1379]:
375 -> 110 : while

[edge|1380]:
375 -> 111 : ID

[edge|1381]:
375 -> 112 : (

[edge|1382]:
375 -> 113 : if

[edge|1383]:
375 -> 5 : float

[edge|1384]:
375 -> 68 : TYPE_SPEC

[edge|1385]:
375 -> 114 : ITER_STMT

[edge|1386]:
375 -> 292 : {

[edge|1387]:
375 -> 115 : RTN_STMT

[edge|1388]:
375 -> 116 : INIT_STMT

[edge|1389]:
375 -> 117 : TERM

[edge|1390]:
375 -> 118 : ASSIGN_STMT

[edge|1391]:
375 -> 73 : return

[edge|1392]:
375 -> 119 : JUST_STMT

[edge|1393]:
375 -> 120 : IF_STMT

[edge|1394]:
375 -> 121 : EXPR

[edge|1395]:
375 -> 122 : CONST

[edge|1396]:
378 -> 123 : CALL_STMT

[edge|1397]:
378 -> 2 : double

[edge|1398]:
378 -> 3 : int

[edge|1399]:
378 -> 124 : FACTOR

[edge|1400]:
378 -> 383 : CODE_BLOCK

[edge|1401]:
378 -> 384 : STMT

[edge|1402]:
378 -> 4 : void

[edge|1403]:
378 -> 126 : for

[edge|1404]:
378 -> 127 : while

[edge|1405]:
378 -> 128 : ID

[edge|1406]:
378 -> 129 : (

[edge|1407]:
378 -> 130 : if

[edge|1408]:
378 -> 5 : float

[edge|1409]:
378 -> 131 : TYPE_SPEC

[edge|1410]:
378 -> 132 : ITER_STMT

[edge|1411]:
378 -> 323 : {

[edge|1412]:
378 -> 133 : RTN_STMT

[edge|1413]:
378 -> 134 : INIT_STMT

[edge|1414]:
378 -> 135 : TERM

[edge|1415]:
378 -> 136 : ASSIGN_STMT

[edge|1416]:
378 -> 137 : return

[edge|1417]:
378 -> 138 : JUST_STMT

[edge|1418]:
378 -> 139 : IF_STMT

[edge|1419]:
378 -> 140 : EXPR

[edge|1420]:
378 -> 141 : CONST

