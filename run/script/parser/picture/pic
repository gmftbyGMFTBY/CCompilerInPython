[node|0]: [begin]
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, double
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · void, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, void
TYPE_SPEC -> · double, ID
FUNC_LIST -> · FUNC_DEF FUNC_LIST, #
FUNC_LIST -> ·, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, float
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, #
TYPE_SPEC -> · float, ID
CMPL_UNIT -> · FUNC_LIST, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, int

[node|1]: [begin]
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, double
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, void
FUNC_DEF -> TYPE_SPEC · ID ( ARG_LIST ) CODE_BLOCK, float

[node|2]: [begin]
CMPL_UNIT -> FUNC_LIST ·, #

[node|3]: [begin]
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, double
TYPE_SPEC -> · float, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, float
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, int
FUNC_LIST -> FUNC_DEF · FUNC_LIST, #
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · void, ID
FUNC_DEF -> · TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK, void
FUNC_LIST -> · FUNC_DEF FUNC_LIST, #
FUNC_LIST -> ·, #
TYPE_SPEC -> · double, ID

[node|4]: [begin]
TYPE_SPEC -> void ·, ID

[node|5]: [begin]
TYPE_SPEC -> float ·, ID

[node|6]: [begin]
TYPE_SPEC -> double ·, ID

[node|7]: [begin]
TYPE_SPEC -> int ·, ID

[node|8]: [begin]
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, void
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, double
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC ID · ( ARG_LIST ) CODE_BLOCK, float

[node|9]: [begin]
FUNC_LIST -> FUNC_DEF FUNC_LIST ·, #

[node|10]: [begin]
TYPE_SPEC -> · float, ID
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, float
ARGUMENT -> · TYPE_SPEC ID, ,
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, double
ARGUMENT -> · TYPE_SPEC ID, )
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · void, ID
ARG_LIST -> · ARGUMENT , ARG_LIST, )
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, void
ARG_LIST -> · ARGUMENT, )
ARG_LIST -> ·, )
TYPE_SPEC -> · double, ID
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC ID ( · ARG_LIST ) CODE_BLOCK, int

[node|11]: [begin]
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, #
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, double
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, int
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, void
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST · ) CODE_BLOCK, float

[node|12]: [begin]
ARGUMENT -> TYPE_SPEC · ID, )
ARGUMENT -> TYPE_SPEC · ID, ,

[node|13]: [begin]
ARG_LIST -> ARGUMENT · , ARG_LIST, )
ARG_LIST -> ARGUMENT ·, )

[node|14]: [begin]
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, #
CODE_BLOCK -> · { STMT_LIST }, #
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, double
CODE_BLOCK -> · { STMT_LIST }, double
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, void
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, void
CODE_BLOCK -> · { STMT_LIST }, int
CODE_BLOCK -> · { STMT_LIST }, float
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) · CODE_BLOCK, float

[node|15]: [begin]
ARGUMENT -> TYPE_SPEC ID ·, ,
ARGUMENT -> TYPE_SPEC ID ·, )

[node|16]: [begin]
TYPE_SPEC -> · float, ID
ARG_LIST -> ARGUMENT , · ARG_LIST, )
ARGUMENT -> · TYPE_SPEC ID, ,
ARGUMENT -> · TYPE_SPEC ID, )
TYPE_SPEC -> · int, ID
TYPE_SPEC -> · void, ID
ARG_LIST -> · ARGUMENT , ARG_LIST, )
ARG_LIST -> · ARGUMENT, )
ARG_LIST -> ·, )
TYPE_SPEC -> · double, ID

[node|17]: [begin]
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, int
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, double
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, void
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, float
FUNC_DEF -> TYPE_SPEC ID ( ARG_LIST ) CODE_BLOCK ·, #

[node|18]: [begin]
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, }
STMT -> · IF_STMT, return
STMT -> · ASSIGN_STMT, void
STMT -> · INIT_STMT, if
RTN_STMT -> · return EXPR ; , }
STMT -> · INIT_STMT, void
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, double
STMT -> · RTN_STMT, return
STMT_LIST -> ·, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, if
RTN_STMT -> · return EXPR ; , while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, for
STMT -> · ITER_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, void
STMT -> · ITER_STMT, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, return
STMT -> · RTN_STMT, double
IF_STMT -> · if ( EXPR ) STMT, }
STMT -> · ASSIGN_STMT, while
STMT -> · INIT_STMT, int
INIT_STMT -> · TYPE_SPEC ID ;, while
STMT -> · INIT_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, for
STMT -> · IF_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, while
STMT -> · ASSIGN_STMT, float
STMT -> · RTN_STMT, }
INIT_STMT -> · TYPE_SPEC ID ;, }
ITER_STMT -> · while ( EXPR ) STMT, double
STMT -> · IF_STMT, float
STMT -> · ITER_STMT, void
IF_STMT -> · if ( EXPR ) STMT, for
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, ID
ITER_STMT -> · while ( EXPR ) STMT, for
STMT -> · RTN_STMT, int
STMT -> · INIT_STMT, ID
STMT -> · ASSIGN_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, if
STMT -> · IF_STMT, int
IF_STMT -> · if ( EXPR ) STMT, if
STMT -> · ITER_STMT, if
ITER_STMT -> · while ( EXPR ) STMT, if
RTN_STMT -> · return EXPR ; , ID
STMT -> · IF_STMT, double
INIT_STMT -> · TYPE_SPEC ID ;, return
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, void
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, int
STMT -> · ITER_STMT, return
IF_STMT -> · if ( EXPR ) STMT, float
CODE_BLOCK -> { · STMT_LIST }, int
STMT -> · ASSIGN_STMT, double
STMT -> · RTN_STMT, if
RTN_STMT -> · return EXPR ; , double
ASSIGN_STMT -> · ID = EXPR ;, for
RTN_STMT -> · return EXPR ; , void
STMT -> · RTN_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, for
IF_STMT -> · if ( EXPR ) STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, double
STMT -> · INIT_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, void
STMT -> · ASSIGN_STMT, if
CODE_BLOCK -> { · STMT_LIST }, void
STMT -> · ITER_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, void
ASSIGN_STMT -> · ID = EXPR ;, return
STMT -> · ASSIGN_STMT, }
STMT -> · ITER_STMT, while
ITER_STMT -> · while ( EXPR ) STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, double
ITER_STMT -> · while ( EXPR ) STMT, void
ASSIGN_STMT -> · ID = EXPR ;, float
IF_STMT -> · if ( EXPR ) CODE_BLOCK, int
IF_STMT -> · if ( EXPR ) STMT, void
STMT -> · RTN_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, return
RTN_STMT -> · return EXPR ; , float
ASSIGN_STMT -> · ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, for
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, for
STMT -> · ASSIGN_STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, void
ITER_STMT -> · while ( EXPR ) STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, if
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID ;, float
ASSIGN_STMT -> · ID = EXPR ;, void
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, return
CODE_BLOCK -> { · STMT_LIST }, #
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, }
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, while
INIT_STMT -> · TYPE_SPEC ID ;, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, while
ASSIGN_STMT -> · ID = EXPR ;, double
ASSIGN_STMT -> · ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID ;, ID
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, for
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, while
RTN_STMT -> · return EXPR ; , int
TYPE_SPEC -> · void, ID
STMT -> · IF_STMT, if
STMT -> · ITER_STMT, for
INIT_STMT -> · TYPE_SPEC ID ;, void
STMT -> · RTN_STMT, void
IF_STMT -> · if ( EXPR ) CODE_BLOCK, while
RTN_STMT -> · return EXPR ; , for
IF_STMT -> · if ( EXPR ) STMT, double
STMT -> · ITER_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, while
ASSIGN_STMT -> · ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR ;, int
STMT -> · INIT_STMT, return
ASSIGN_STMT -> · ID = EXPR ;, while
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, ID
STMT -> · IF_STMT, void
ITER_STMT -> · while ( EXPR ) STMT, float
STMT -> · ITER_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK, return
STMT -> · IF_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, ID
STMT -> · ASSIGN_STMT, int
IF_STMT -> · if ( EXPR ) STMT, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, int
STMT -> · IF_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, ID
STMT -> · INIT_STMT, }
RTN_STMT -> · return EXPR ; , if
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, double
CODE_BLOCK -> { · STMT_LIST }, double
ITER_STMT -> · while ( EXPR ) STMT, while
IF_STMT -> · if ( EXPR ) STMT, while
STMT -> · RTN_STMT, ID
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, if
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID ;, double
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, float
STMT -> · IF_STMT, while
STMT_LIST -> · STMT STMT_LIST, }
STMT -> · INIT_STMT, for
INIT_STMT -> · TYPE_SPEC ID ;, for
STMT -> · ASSIGN_STMT, for
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, return
STMT -> · INIT_STMT, float
RTN_STMT -> · return EXPR ; , return
CODE_BLOCK -> { · STMT_LIST }, float
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, int
INIT_STMT -> · TYPE_SPEC ID ;, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, return
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) STMT, return
STMT -> · RTN_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, float

[node|19]: [begin]
ARG_LIST -> ARGUMENT , ARG_LIST ·, )

[node|20]: [begin]
STMT -> RTN_STMT ·, float
STMT -> RTN_STMT ·, while
STMT -> RTN_STMT ·, return
STMT -> RTN_STMT ·, }
STMT -> RTN_STMT ·, void
STMT -> RTN_STMT ·, ID
STMT -> RTN_STMT ·, if
STMT -> RTN_STMT ·, for
STMT -> RTN_STMT ·, double
STMT -> RTN_STMT ·, int

[node|21]: [begin]
INIT_STMT -> TYPE_SPEC · ID ;, void
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, ID
INIT_STMT -> TYPE_SPEC · ID ;, int
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, return
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, while
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, double
INIT_STMT -> TYPE_SPEC · ID ;, for
INIT_STMT -> TYPE_SPEC · ID ;, double
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, int
INIT_STMT -> TYPE_SPEC · ID ;, while
INIT_STMT -> TYPE_SPEC · ID ;, return
INIT_STMT -> TYPE_SPEC · ID ;, }
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, for
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, }
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, void
INIT_STMT -> TYPE_SPEC · ID ;, ID
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, if
INIT_STMT -> TYPE_SPEC · ID = EXPR ;, float
INIT_STMT -> TYPE_SPEC · ID ;, float
INIT_STMT -> TYPE_SPEC · ID ;, if

[node|22]: [begin]
STMT -> IF_STMT ·, void
STMT -> IF_STMT ·, int
STMT -> IF_STMT ·, for
STMT -> IF_STMT ·, double
STMT -> IF_STMT ·, return
STMT -> IF_STMT ·, }
STMT -> IF_STMT ·, while
STMT -> IF_STMT ·, ID
STMT -> IF_STMT ·, float
STMT -> IF_STMT ·, if

[node|23]: [begin]
IF_STMT -> if · ( EXPR ) STMT, void
IF_STMT -> if · ( EXPR ) CODE_BLOCK, float
IF_STMT -> if · ( EXPR ) CODE_BLOCK, ID
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> if · ( EXPR ) CODE_BLOCK, for
IF_STMT -> if · ( EXPR ) STMT, for
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, for
IF_STMT -> if · ( EXPR ) CODE_BLOCK, while
IF_STMT -> if · ( EXPR ) CODE_BLOCK, return
IF_STMT -> if · ( EXPR ) STMT, int
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> if · ( EXPR ) STMT, ID
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if · ( EXPR ) CODE_BLOCK, }
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> if · ( EXPR ) STMT, if
IF_STMT -> if · ( EXPR ) CODE_BLOCK, int
IF_STMT -> if · ( EXPR ) STMT, while
IF_STMT -> if · ( EXPR ) STMT, return
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if · ( EXPR ) STMT, float
IF_STMT -> if · ( EXPR ) CODE_BLOCK, void
IF_STMT -> if · ( EXPR ) CODE_BLOCK, if
IF_STMT -> if · ( EXPR ) CODE_BLOCK, double
IF_STMT -> if · ( EXPR ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if · ( EXPR ) STMT, }
IF_STMT -> if · ( EXPR ) STMT, double

[node|24]: [begin]
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, int
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, if
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, for
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, void
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, void
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, while
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, if
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, }
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, int
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, double
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, return
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, float
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, ID
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, return
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, }
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, double
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, ID
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) STMT, while
ITER_STMT -> for · ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, for

[node|25]: [begin]
ASSIGN_STMT -> ID · = EXPR ;, }
ASSIGN_STMT -> ID · = EXPR ;, return
ASSIGN_STMT -> ID · = EXPR ;, while
ASSIGN_STMT -> ID · = EXPR ;, ID
ASSIGN_STMT -> ID · = EXPR ;, float
ASSIGN_STMT -> ID · = EXPR ;, if
ASSIGN_STMT -> ID · = EXPR ;, void
ASSIGN_STMT -> ID · = EXPR ;, int
ASSIGN_STMT -> ID · = EXPR ;, for
ASSIGN_STMT -> ID · = EXPR ;, double

[node|26]: [begin]
STMT -> ITER_STMT ·, return
STMT -> ITER_STMT ·, ID
STMT -> ITER_STMT ·, }
STMT -> ITER_STMT ·, if
STMT -> ITER_STMT ·, float
STMT -> ITER_STMT ·, int
STMT -> ITER_STMT ·, void
STMT -> ITER_STMT ·, double
STMT -> ITER_STMT ·, while
STMT -> ITER_STMT ·, for

[node|27]: [begin]
STMT -> ASSIGN_STMT ·, ID
STMT -> ASSIGN_STMT ·, while
STMT -> ASSIGN_STMT ·, if
STMT -> ASSIGN_STMT ·, float
STMT -> ASSIGN_STMT ·, return
STMT -> ASSIGN_STMT ·, int
STMT -> ASSIGN_STMT ·, void
STMT -> ASSIGN_STMT ·, double
STMT -> ASSIGN_STMT ·, }
STMT -> ASSIGN_STMT ·, for

[node|28]: [begin]
CODE_BLOCK -> { STMT_LIST · }, double
CODE_BLOCK -> { STMT_LIST · }, #
CODE_BLOCK -> { STMT_LIST · }, int
CODE_BLOCK -> { STMT_LIST · }, float
CODE_BLOCK -> { STMT_LIST · }, void

[node|29]: [begin]
ITER_STMT -> while · ( EXPR ) STMT, ID
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, int
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, void
ITER_STMT -> while · ( EXPR ) STMT, }
ITER_STMT -> while · ( EXPR ) STMT, return
ITER_STMT -> while · ( EXPR ) STMT, double
ITER_STMT -> while · ( EXPR ) STMT, while
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, if
ITER_STMT -> while · ( EXPR ) STMT, int
ITER_STMT -> while · ( EXPR ) STMT, for
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, float
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, ID
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, }
ITER_STMT -> while · ( EXPR ) STMT, void
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, return
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, while
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, double
ITER_STMT -> while · ( EXPR ) CODE_BLOCK, for
ITER_STMT -> while · ( EXPR ) STMT, if
ITER_STMT -> while · ( EXPR ) STMT, float

[node|30]: [begin]
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), ;
RTN_STMT -> return · EXPR ;, ID
FACTOR -> · CALL_STMT, +
CALL_STMT -> · ID ( PARG_LIST ), -
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · ID, -
FACTOR -> · ( EXPR ), -
FACTOR -> · ID, /
RTN_STMT -> return · EXPR ;, }
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , +
RTN_STMT -> return · EXPR ;, void
RTN_STMT -> return · EXPR ;, for
FACTOR -> · ( EXPR ), +
RTN_STMT -> return · EXPR ;, while
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
RTN_STMT -> return · EXPR ;, float
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), /
RTN_STMT -> return · EXPR ;, double
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
RTN_STMT -> return · EXPR ;, if
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
RTN_STMT -> return · EXPR ;, int
CALL_STMT -> · ID ( PARG_LIST ), +
RTN_STMT -> return · EXPR ;, return

[node|31]: [begin]
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, }
STMT -> · IF_STMT, return
STMT -> · ASSIGN_STMT, void
STMT -> · INIT_STMT, if
RTN_STMT -> · return EXPR ; , }
STMT -> · INIT_STMT, void
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, double
STMT -> · RTN_STMT, return
STMT_LIST -> ·, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, if
RTN_STMT -> · return EXPR ; , while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, for
STMT -> · ITER_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, void
STMT -> · ITER_STMT, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, return
STMT -> · RTN_STMT, double
IF_STMT -> · if ( EXPR ) STMT, }
STMT -> · ASSIGN_STMT, while
STMT -> · INIT_STMT, int
INIT_STMT -> · TYPE_SPEC ID ;, while
STMT -> · INIT_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, for
STMT -> · IF_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, while
STMT -> · ASSIGN_STMT, float
STMT -> · RTN_STMT, }
INIT_STMT -> · TYPE_SPEC ID ;, }
ITER_STMT -> · while ( EXPR ) STMT, double
STMT -> · IF_STMT, float
STMT -> · ITER_STMT, void
IF_STMT -> · if ( EXPR ) STMT, for
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, ID
ITER_STMT -> · while ( EXPR ) STMT, for
STMT -> · RTN_STMT, int
STMT -> · INIT_STMT, ID
STMT -> · ASSIGN_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, if
STMT -> · IF_STMT, int
IF_STMT -> · if ( EXPR ) STMT, if
STMT -> · ITER_STMT, if
ITER_STMT -> · while ( EXPR ) STMT, if
RTN_STMT -> · return EXPR ; , ID
STMT -> · IF_STMT, double
INIT_STMT -> · TYPE_SPEC ID ;, return
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, void
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, int
STMT -> · ITER_STMT, return
IF_STMT -> · if ( EXPR ) STMT, float
STMT -> · ASSIGN_STMT, double
STMT -> · RTN_STMT, if
RTN_STMT -> · return EXPR ; , double
ASSIGN_STMT -> · ID = EXPR ;, for
RTN_STMT -> · return EXPR ; , void
STMT -> · RTN_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, for
IF_STMT -> · if ( EXPR ) STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, double
STMT -> · INIT_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, void
STMT -> · ASSIGN_STMT, if
STMT -> · ITER_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, void
ASSIGN_STMT -> · ID = EXPR ;, return
STMT -> · ASSIGN_STMT, }
STMT -> · ITER_STMT, while
ITER_STMT -> · while ( EXPR ) STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, double
ITER_STMT -> · while ( EXPR ) STMT, void
ASSIGN_STMT -> · ID = EXPR ;, float
IF_STMT -> · if ( EXPR ) CODE_BLOCK, int
IF_STMT -> · if ( EXPR ) STMT, void
STMT -> · RTN_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, return
RTN_STMT -> · return EXPR ; , float
ASSIGN_STMT -> · ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, for
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, for
STMT -> · ASSIGN_STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, void
ITER_STMT -> · while ( EXPR ) STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, if
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID ;, float
ASSIGN_STMT -> · ID = EXPR ;, void
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, }
STMT_LIST -> STMT · STMT_LIST, }
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, while
INIT_STMT -> · TYPE_SPEC ID ;, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, while
ASSIGN_STMT -> · ID = EXPR ;, double
ASSIGN_STMT -> · ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID ;, ID
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, for
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, while
RTN_STMT -> · return EXPR ; , int
TYPE_SPEC -> · void, ID
STMT -> · IF_STMT, if
STMT -> · ITER_STMT, for
INIT_STMT -> · TYPE_SPEC ID ;, void
STMT -> · RTN_STMT, void
IF_STMT -> · if ( EXPR ) CODE_BLOCK, while
RTN_STMT -> · return EXPR ; , for
IF_STMT -> · if ( EXPR ) STMT, double
STMT -> · ITER_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, while
ASSIGN_STMT -> · ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR ;, int
STMT -> · INIT_STMT, return
ASSIGN_STMT -> · ID = EXPR ;, while
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, ID
STMT -> · IF_STMT, void
ITER_STMT -> · while ( EXPR ) STMT, float
STMT -> · ITER_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK, return
STMT -> · IF_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, ID
STMT -> · ASSIGN_STMT, int
IF_STMT -> · if ( EXPR ) STMT, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, int
STMT -> · IF_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, ID
STMT -> · INIT_STMT, }
RTN_STMT -> · return EXPR ; , if
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, double
ITER_STMT -> · while ( EXPR ) STMT, while
IF_STMT -> · if ( EXPR ) STMT, while
STMT -> · RTN_STMT, ID
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, if
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID ;, double
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, float
STMT -> · IF_STMT, while
STMT_LIST -> · STMT STMT_LIST, }
STMT -> · INIT_STMT, for
INIT_STMT -> · TYPE_SPEC ID ;, for
STMT -> · ASSIGN_STMT, for
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, return
STMT -> · INIT_STMT, float
RTN_STMT -> · return EXPR ; , return
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, int
INIT_STMT -> · TYPE_SPEC ID ;, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, return
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) STMT, return
STMT -> · RTN_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, float

[node|32]: [begin]
STMT -> INIT_STMT ·, void
STMT -> INIT_STMT ·, double
STMT -> INIT_STMT ·, if
STMT -> INIT_STMT ·, for
STMT -> INIT_STMT ·, int
STMT -> INIT_STMT ·, while
STMT -> INIT_STMT ·, return
STMT -> INIT_STMT ·, }
STMT -> INIT_STMT ·, float
STMT -> INIT_STMT ·, ID

[node|33]: [begin]
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, int
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, for
INIT_STMT -> TYPE_SPEC ID · ;, while
INIT_STMT -> TYPE_SPEC ID · ;, return
INIT_STMT -> TYPE_SPEC ID · ;, }
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, void
INIT_STMT -> TYPE_SPEC ID · ;, float
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, if
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, return
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, double
INIT_STMT -> TYPE_SPEC ID · ;, int
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, float
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, ID
INIT_STMT -> TYPE_SPEC ID · ;, double
INIT_STMT -> TYPE_SPEC ID · ;, for
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, while
INIT_STMT -> TYPE_SPEC ID · ;, if
INIT_STMT -> TYPE_SPEC ID · = EXPR ;, }
INIT_STMT -> TYPE_SPEC ID · ;, ID
INIT_STMT -> TYPE_SPEC ID · ;, void

[node|34]: [begin]
IF_STMT -> if ( · EXPR ) STMT, for
IF_STMT -> if ( · EXPR ) CODE_BLOCK, int
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, return
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, -
IF_STMT -> if ( · EXPR ) CODE_BLOCK, while
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> · ( EXPR ), )
FACTOR -> · CONST, )
IF_STMT -> if ( · EXPR ) CODE_BLOCK, ID
IF_STMT -> if ( · EXPR ) CODE_BLOCK, void
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, for
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
IF_STMT -> if ( · EXPR ) STMT, void
FACTOR -> · ID, /
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, if
CALL_STMT -> · ID ( PARG_LIST ), )
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if ( · EXPR ) STMT, while
IF_STMT -> if ( · EXPR ) CODE_BLOCK, return
IF_STMT -> if ( · EXPR ) STMT, }
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ID, )
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), +
IF_STMT -> if ( · EXPR ) STMT, if
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, ID
FACTOR -> · ID, -
FACTOR -> · CALL_STMT, )
IF_STMT -> if ( · EXPR ) CODE_BLOCK, }
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> if ( · EXPR ) STMT, return
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if ( · EXPR ) CODE_BLOCK, double
IF_STMT -> if ( · EXPR ) STMT, double
IF_STMT -> if ( · EXPR ) STMT, ID
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
TERM -> · FACTOR TERM2 , )
CALL_STMT -> · ID ( PARG_LIST ), *
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, while
EXPR -> · TERM EXPR2, )
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, }
TERM -> · FACTOR TERM2 , +
IF_STMT -> if ( · EXPR ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if ( · EXPR ) STMT, int
IF_STMT -> if ( · EXPR ) CODE_BLOCK, for
IF_STMT -> if ( · EXPR ) CODE_BLOCK, float
TERM -> · FACTOR TERM2 , -
IF_STMT -> if ( · EXPR ) CODE_BLOCK, if
IF_STMT -> if ( · EXPR ) STMT, float
FACTOR -> · ( EXPR ), -

[node|35]: [begin]
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, double
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, }
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), ;
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · ID, -
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, if
FACTOR -> · ( EXPR ), -
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, for
FACTOR -> · ID, /
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, return
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, while
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, int
FACTOR -> · CONST, -
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, void
TERM -> · FACTOR TERM2 , +
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, }
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, ID
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, ID
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , -
FACTOR -> · CONST, ;
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, double
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, while
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, return
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, int
CALL_STMT -> · ID ( PARG_LIST ), /
TERM -> · FACTOR TERM2 , ;
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, if
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, float
FACTOR -> · ID, ;
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) CODE_BLOCK, for
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +
ITER_STMT -> for ( · EXPR ; EXPR ; EXPR ) STMT, void

[node|36]: [begin]
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), ;
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · ID, -
ASSIGN_STMT -> ID = · EXPR ;, float
FACTOR -> · ( EXPR ), -
FACTOR -> · ID, /
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
ASSIGN_STMT -> ID = · EXPR ;, void
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
ASSIGN_STMT -> ID = · EXPR ;, }
FACTOR -> · CONST, +
FACTOR -> · CONST, *
EXPR -> · TERM EXPR2, ;
FACTOR -> · CALL_STMT, -
ASSIGN_STMT -> ID = · EXPR ;, ID
TERM -> · FACTOR TERM2 , -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), /
ASSIGN_STMT -> ID = · EXPR ;, while
ASSIGN_STMT -> ID = · EXPR ;, return
ASSIGN_STMT -> ID = · EXPR ;, int
TERM -> · FACTOR TERM2 , ;
ASSIGN_STMT -> ID = · EXPR ;, for
FACTOR -> · ID, ;
ASSIGN_STMT -> ID = · EXPR ;, if
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +
ASSIGN_STMT -> ID = · EXPR ;, double

[node|37]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, double
CODE_BLOCK -> { STMT_LIST } ·, void
CODE_BLOCK -> { STMT_LIST } ·, int
CODE_BLOCK -> { STMT_LIST } ·, float
CODE_BLOCK -> { STMT_LIST } ·, #

[node|38]: [begin]
ITER_STMT -> while ( · EXPR ) STMT, int
TERM -> · FACTOR TERM2 , )
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, -
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, float
FACTOR -> · ( EXPR ), -
EXPR -> · TERM EXPR2, )
FACTOR -> · ID, /
FACTOR -> · CALL_STMT, )
ITER_STMT -> while ( · EXPR ) STMT, }
ITER_STMT -> while ( · EXPR ) STMT, return
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, for
FACTOR -> · CONST, /
ITER_STMT -> while ( · EXPR ) STMT, double
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CONST, -
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, if
ITER_STMT -> while ( · EXPR ) STMT, float
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, void
TERM -> · FACTOR TERM2 , +
ITER_STMT -> while ( · EXPR ) STMT, ID
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, double
FACTOR -> · ( EXPR ), +
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, }
FACTOR -> · ID, +
FACTOR -> · CONST, +
ITER_STMT -> while ( · EXPR ) STMT, for
FACTOR -> · CONST, *
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, ID
ITER_STMT -> while ( · EXPR ) STMT, void
ITER_STMT -> while ( · EXPR ) STMT, if
FACTOR -> · ( EXPR ), )
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , -
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, int
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, return
CALL_STMT -> · ID ( PARG_LIST ), /
ITER_STMT -> while ( · EXPR ) CODE_BLOCK, while
FACTOR -> · ID, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +
ITER_STMT -> while ( · EXPR ) STMT, while

[node|39]: [begin]
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, +
TERM -> FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM -> FACTOR · TERM2, ;
TERM2 -> ·, +
TERM2 -> ·, -
TERM2 -> ·, ;
TERM2 -> · / FACTOR TERM2, ;
TERM -> FACTOR · TERM2, -

[node|40]: [begin]
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, ;
FACTOR -> CALL_STMT ·, -

[node|41]: [begin]
FACTOR -> ID ·, *
FACTOR -> ID ·, -
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), ;
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, ;
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), *

[node|42]: [begin]
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, ;
EXPR -> TERM · EXPR2, ;

[node|43]: [begin]
FACTOR -> CONST ·, *
FACTOR -> CONST ·, +
FACTOR -> CONST ·, /
FACTOR -> CONST ·, ;
FACTOR -> CONST ·, -

[node|44]: [begin]
RTN_STMT -> return EXPR · ;, }
RTN_STMT -> return EXPR · ;, ID
RTN_STMT -> return EXPR · ;, float
RTN_STMT -> return EXPR · ;, while
RTN_STMT -> return EXPR · ;, if
RTN_STMT -> return EXPR · ;, void
RTN_STMT -> return EXPR · ;, for
RTN_STMT -> return EXPR · ;, int
RTN_STMT -> return EXPR · ;, double
RTN_STMT -> return EXPR · ;, return

[node|45]: [begin]
TERM -> · FACTOR TERM2 , )
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, -
FACTOR -> · ( EXPR ), -
EXPR -> · TERM EXPR2, )
FACTOR -> · ID, /
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , +
FACTOR -> ( · EXPR ), *
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> ( · EXPR ), ;
FACTOR -> · ( EXPR ), )
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> ( · EXPR ), /
FACTOR -> · ID, )
FACTOR -> · CALL_STMT, /
FACTOR -> ( · EXPR ), -
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), +

[node|46]: [begin]
STMT_LIST -> STMT STMT_LIST ·, }

[node|47]: [begin]
INIT_STMT -> TYPE_SPEC ID ; ·, if
INIT_STMT -> TYPE_SPEC ID ; ·, void
INIT_STMT -> TYPE_SPEC ID ; ·, for
INIT_STMT -> TYPE_SPEC ID ; ·, int
INIT_STMT -> TYPE_SPEC ID ; ·, double
INIT_STMT -> TYPE_SPEC ID ; ·, return
INIT_STMT -> TYPE_SPEC ID ; ·, }
INIT_STMT -> TYPE_SPEC ID ; ·, while
INIT_STMT -> TYPE_SPEC ID ; ·, ID
INIT_STMT -> TYPE_SPEC ID ; ·, float

[node|48]: [begin]
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), ;
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · ID, -
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, float
FACTOR -> · ( EXPR ), -
FACTOR -> · ID, /
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, for
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, -
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, if
TERM -> · FACTOR TERM2 , +
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, double
FACTOR -> · ( EXPR ), +
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, }
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, ID
EXPR -> · TERM EXPR2, ;
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , -
FACTOR -> · CONST, ;
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, int
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, while
CALL_STMT -> · ID ( PARG_LIST ), /
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, return
TERM -> · FACTOR TERM2 , ;
INIT_STMT -> TYPE_SPEC ID = · EXPR ;, void
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +

[node|49]: [begin]
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, +
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, )
TERM -> FACTOR · TERM2, )
TERM2 -> · * FACTOR TERM2, )
TERM2 -> ·, )
TERM -> FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, +
TERM2 -> ·, -
TERM -> FACTOR · TERM2, -

[node|50]: [begin]
FACTOR -> CALL_STMT ·, +
FACTOR -> CALL_STMT ·, *
FACTOR -> CALL_STMT ·, /
FACTOR -> CALL_STMT ·, )
FACTOR -> CALL_STMT ·, -

[node|51]: [begin]
CALL_STMT -> ID · ( PARG_LIST ), )
CALL_STMT -> ID · ( PARG_LIST ), /
FACTOR -> ID ·, -
FACTOR -> ID ·, *
FACTOR -> ID ·, )
FACTOR -> ID ·, /
CALL_STMT -> ID · ( PARG_LIST ), -
CALL_STMT -> ID · ( PARG_LIST ), +
FACTOR -> ID ·, +
CALL_STMT -> ID · ( PARG_LIST ), *

[node|52]: [begin]
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> · - TERM EXPR2, )
EXPR -> TERM · EXPR2, )
EXPR2 -> ·, )

[node|53]: [begin]
FACTOR -> CONST ·, *
FACTOR -> CONST ·, +
FACTOR -> CONST ·, /
FACTOR -> CONST ·, )
FACTOR -> CONST ·, -

[node|54]: [begin]
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, void
IF_STMT -> if ( EXPR · ) STMT, for
IF_STMT -> if ( EXPR · ) STMT, double
IF_STMT -> if ( EXPR · ) CODE_BLOCK, }
IF_STMT -> if ( EXPR · ) STMT, void
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, double
IF_STMT -> if ( EXPR · ) CODE_BLOCK, if
IF_STMT -> if ( EXPR · ) STMT, ID
IF_STMT -> if ( EXPR · ) CODE_BLOCK, int
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, ID
IF_STMT -> if ( EXPR · ) STMT, int
IF_STMT -> if ( EXPR · ) CODE_BLOCK, ID
IF_STMT -> if ( EXPR · ) CODE_BLOCK, void
IF_STMT -> if ( EXPR · ) STMT, if
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, int
IF_STMT -> if ( EXPR · ) CODE_BLOCK, double
IF_STMT -> if ( EXPR · ) CODE_BLOCK, for
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> if ( EXPR · ) STMT, }
IF_STMT -> if ( EXPR · ) CODE_BLOCK, float
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, }
IF_STMT -> if ( EXPR · ) STMT, while
IF_STMT -> if ( EXPR · ) STMT, return
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, float
IF_STMT -> if ( EXPR · ) CODE_BLOCK, while
IF_STMT -> if ( EXPR · ) CODE_BLOCK, return
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if ( EXPR · ) STMT, float
IF_STMT -> if ( EXPR · ) CODE_BLOCK else CODE_BLOCK, for

[node|55]: [begin]
TERM -> · FACTOR TERM2 , )
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, -
FACTOR -> · ( EXPR ), -
EXPR -> · TERM EXPR2, )
FACTOR -> · ID, /
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , +
FACTOR -> ( · EXPR ), *
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> · ( EXPR ), )
FACTOR -> ( · EXPR ), )
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , -
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> ( · EXPR ), /
FACTOR -> · ID, )
FACTOR -> · CALL_STMT, /
FACTOR -> ( · EXPR ), -
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> ( · EXPR ), +

[node|56]: [begin]
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, double
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, double
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, void
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, for
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, if
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, return
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, int
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, }
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, if
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, ID
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, void
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, }
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, return
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, while
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, ID
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, int
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) STMT, float
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, for
ITER_STMT -> for ( EXPR · ; EXPR ; EXPR ) CODE_BLOCK, while

[node|57]: [begin]
ASSIGN_STMT -> ID = EXPR · ;, if
ASSIGN_STMT -> ID = EXPR · ;, double
ASSIGN_STMT -> ID = EXPR · ;, for
ASSIGN_STMT -> ID = EXPR · ;, ID
ASSIGN_STMT -> ID = EXPR · ;, void
ASSIGN_STMT -> ID = EXPR · ;, float
ASSIGN_STMT -> ID = EXPR · ;, }
ASSIGN_STMT -> ID = EXPR · ;, while
ASSIGN_STMT -> ID = EXPR · ;, return
ASSIGN_STMT -> ID = EXPR · ;, int

[node|58]: [begin]
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, if
ITER_STMT -> while ( EXPR · ) STMT, while
ITER_STMT -> while ( EXPR · ) STMT, }
ITER_STMT -> while ( EXPR · ) STMT, return
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, double
ITER_STMT -> while ( EXPR · ) STMT, float
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, int
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, for
ITER_STMT -> while ( EXPR · ) STMT, int
ITER_STMT -> while ( EXPR · ) STMT, double
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, }
ITER_STMT -> while ( EXPR · ) STMT, for
ITER_STMT -> while ( EXPR · ) STMT, if
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, float
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, return
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, ID
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, while
ITER_STMT -> while ( EXPR · ) STMT, ID
ITER_STMT -> while ( EXPR · ) CODE_BLOCK, void
ITER_STMT -> while ( EXPR · ) STMT, void

[node|59]: [begin]
TERM -> FACTOR TERM2 ·, ;
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, +

[node|60]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · ( EXPR ), ;
FACTOR -> · CALL_STMT, +
FACTOR -> · CALL_STMT, ;
FACTOR -> · ID, -
TERM2 -> * · FACTOR TERM2, -
FACTOR -> · ( EXPR ), -
FACTOR -> · ID, /
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, -
FACTOR -> · ( EXPR ), +
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ID, ;
TERM2 -> * · FACTOR TERM2, ;
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +

[node|61]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), ;
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, -
FACTOR -> · ID, /
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, -
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), /
TERM2 -> / · FACTOR TERM2, ;
TERM2 -> / · FACTOR TERM2, -
TERM2 -> / · FACTOR TERM2, +
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CALL_STMT, *

[node|62]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), /
PARG -> · ID, ,
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), ;
CALL_STMT -> ID ( · PARG_LIST ), -
PARG_LIST -> · PARG, )
CALL_STMT -> ID ( · PARG_LIST ), +
PARG_LIST -> ·, )
CALL_STMT -> ID ( · PARG_LIST ), *
PARG_LIST -> · PARG , PARG_LIST, )

[node|63]: [begin]
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), ;
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · ID, -
FACTOR -> · ( EXPR ), -
FACTOR -> · ID, /
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), /
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, /
EXPR2 -> - · TERM EXPR2, ;
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +

[node|64]: [begin]
EXPR -> TERM EXPR2 ·, ;

[node|65]: [begin]
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), ;
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
CALL_STMT -> · ID ( PARG_LIST ), *
FACTOR -> · ID, -
FACTOR -> · ID, /
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
EXPR2 -> + · TERM EXPR2, ;
TERM -> · FACTOR TERM2 , -
FACTOR -> · CONST, ;
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), /
TERM -> · FACTOR TERM2 , ;
FACTOR -> · ID, ;
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CALL_STMT, *

[node|66]: [begin]
RTN_STMT -> return EXPR ; ·, ID
RTN_STMT -> return EXPR ; ·, while
RTN_STMT -> return EXPR ; ·, float
RTN_STMT -> return EXPR ; ·, return
RTN_STMT -> return EXPR ; ·, if
RTN_STMT -> return EXPR ; ·, void
RTN_STMT -> return EXPR ; ·, for
RTN_STMT -> return EXPR ; ·, int
RTN_STMT -> return EXPR ; ·, double
RTN_STMT -> return EXPR ; ·, }

[node|67]: [begin]
FACTOR -> ( EXPR · ), ;
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), /
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), -

[node|68]: [begin]
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, int
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, void
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, double
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, }
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, while
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, for
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, return
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, ID
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, if
INIT_STMT -> TYPE_SPEC ID = EXPR · ;, float

[node|69]: [begin]
TERM -> FACTOR TERM2 ·, )
TERM -> FACTOR TERM2 ·, -
TERM -> FACTOR TERM2 ·, +

[node|70]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, -
TERM2 -> * · FACTOR TERM2, -
FACTOR -> · ( EXPR ), -
FACTOR -> · ID, /
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CONST, -
FACTOR -> · ( EXPR ), +
TERM2 -> * · FACTOR TERM2, +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> · ( EXPR ), )
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
TERM2 -> * · FACTOR TERM2, )
FACTOR -> · ID, )
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +

[node|71]: [begin]
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, -
FACTOR -> · ID, /
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CONST, -
TERM2 -> / · FACTOR TERM2, )
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> · ( EXPR ), )
FACTOR -> · CONST, )
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), /
TERM2 -> / · FACTOR TERM2, -
TERM2 -> / · FACTOR TERM2, +
FACTOR -> · CALL_STMT, /
FACTOR -> · ID, )
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CALL_STMT, *

[node|72]: [begin]
CALL_STMT -> ID ( · PARG_LIST ), /
PARG -> · ID, ,
PARG -> · ID, )
CALL_STMT -> ID ( · PARG_LIST ), )
CALL_STMT -> ID ( · PARG_LIST ), -
PARG_LIST -> · PARG, )
CALL_STMT -> ID ( · PARG_LIST ), +
PARG_LIST -> ·, )
CALL_STMT -> ID ( · PARG_LIST ), *
PARG_LIST -> · PARG , PARG_LIST, )

[node|73]: [begin]
TERM -> · FACTOR TERM2 , )
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, -
FACTOR -> · ID, /
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> · ( EXPR ), )
FACTOR -> · CONST, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), /
EXPR2 -> - · TERM EXPR2, )
FACTOR -> · CALL_STMT, /
FACTOR -> · ID, )
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CALL_STMT, *

[node|74]: [begin]
EXPR -> TERM EXPR2 ·, )

[node|75]: [begin]
TERM -> · FACTOR TERM2 , )
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, -
EXPR2 -> + · TERM EXPR2, )
FACTOR -> · ID, /
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
FACTOR -> · CONST, *
FACTOR -> · ( EXPR ), )
FACTOR -> · CONST, )
TERM -> · FACTOR TERM2 , -
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · CALL_STMT, /
FACTOR -> · ID, )
FACTOR -> · ID, *
FACTOR -> · ( EXPR ), -
FACTOR -> · CALL_STMT, -
CALL_STMT -> · ID ( PARG_LIST ), +
FACTOR -> · CALL_STMT, *

[node|76]: [begin]
IF_STMT -> if ( EXPR ) · STMT, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, }
IF_STMT -> if ( EXPR ) · STMT, while
STMT -> · IF_STMT, return
STMT -> · ASSIGN_STMT, void
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, }
RTN_STMT -> · return EXPR ; , }
STMT -> · INIT_STMT, if
STMT -> · INIT_STMT, void
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, double
STMT -> · RTN_STMT, return
CODE_BLOCK -> · { STMT_LIST }, if
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, while
INIT_STMT -> · TYPE_SPEC ID ;, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, if
CODE_BLOCK -> · { STMT_LIST }, }
CODE_BLOCK -> · { STMT_LIST }, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, while
RTN_STMT -> · return EXPR ; , while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, for
STMT -> · ITER_STMT, ID
ASSIGN_STMT -> · ID = EXPR ;, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID ;, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, if
TYPE_SPEC -> · double, ID
IF_STMT -> if ( EXPR ) · STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK, float
IF_STMT -> if ( EXPR ) · CODE_BLOCK, ID
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, float
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, return
STMT -> · ITER_STMT, int
STMT -> · RTN_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, for
IF_STMT -> · if ( EXPR ) STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, }
STMT -> · ASSIGN_STMT, while
STMT -> · INIT_STMT, int
INIT_STMT -> · TYPE_SPEC ID ;, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, while
STMT -> · INIT_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, for
RTN_STMT -> · return EXPR ; , int
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, double
STMT -> · IF_STMT, }
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, while
STMT -> · ASSIGN_STMT, float
STMT -> · IF_STMT, if
STMT -> · RTN_STMT, }
INIT_STMT -> · TYPE_SPEC ID ;, }
STMT -> · ITER_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, double
STMT -> · IF_STMT, float
INIT_STMT -> · TYPE_SPEC ID ;, void
STMT -> · RTN_STMT, void
STMT -> · ITER_STMT, void
IF_STMT -> · if ( EXPR ) STMT, for
IF_STMT -> · if ( EXPR ) CODE_BLOCK, while
IF_STMT -> if ( EXPR ) · STMT, ID
RTN_STMT -> · return EXPR ; , for
CODE_BLOCK -> · { STMT_LIST }, return
IF_STMT -> · if ( EXPR ) STMT, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, ID
ITER_STMT -> · while ( EXPR ) STMT, for
STMT -> · ITER_STMT, double
STMT -> · RTN_STMT, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, int
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, void
STMT -> · INIT_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, }
STMT -> · ASSIGN_STMT, ID
IF_STMT -> if ( EXPR ) · STMT, for
IF_STMT -> · if ( EXPR ) CODE_BLOCK, if
STMT -> · IF_STMT, int
IF_STMT -> · if ( EXPR ) STMT, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, while
IF_STMT -> if ( EXPR ) · CODE_BLOCK, while
ASSIGN_STMT -> · ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, float
STMT -> · ITER_STMT, if
ITER_STMT -> · while ( EXPR ) STMT, if
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, double
RTN_STMT -> · return EXPR ; , ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, void
STMT -> · IF_STMT, double
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, }
ASSIGN_STMT -> · ID = EXPR ;, int
INIT_STMT -> · TYPE_SPEC ID ;, return
STMT -> · INIT_STMT, return
ASSIGN_STMT -> · ID = EXPR ;, while
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, ID
STMT -> · IF_STMT, void
CODE_BLOCK -> · { STMT_LIST }, for
ITER_STMT -> · while ( EXPR ) STMT, float
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, void
STMT -> · ITER_STMT, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, int
IF_STMT -> if ( EXPR ) · STMT, if
STMT -> · ITER_STMT, return
IF_STMT -> · if ( EXPR ) STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, if
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, for
STMT -> · ASSIGN_STMT, double
STMT -> · RTN_STMT, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK, return
STMT -> · IF_STMT, ID
CODE_BLOCK -> · { STMT_LIST }, while
RTN_STMT -> · return EXPR ; , double
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, float
ASSIGN_STMT -> · ID = EXPR ;, for
IF_STMT -> · if ( EXPR ) CODE_BLOCK, ID
IF_STMT -> if ( EXPR ) · CODE_BLOCK, float
STMT -> · ASSIGN_STMT, int
STMT -> · RTN_STMT, for
RTN_STMT -> · return EXPR ; , void
IF_STMT -> · if ( EXPR ) STMT, ID
ITER_STMT -> · while ( EXPR ) STMT, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, for
STMT -> · IF_STMT, for
CODE_BLOCK -> · { STMT_LIST }, void
ITER_STMT -> · while ( EXPR ) STMT, ID
IF_STMT -> · if ( EXPR ) STMT, int
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, return
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, double
STMT -> · INIT_STMT, double
STMT -> · INIT_STMT, }
RTN_STMT -> · return EXPR ; , if
CODE_BLOCK -> · { STMT_LIST }, else
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, void
IF_STMT -> if ( EXPR ) · CODE_BLOCK, return
STMT -> · ASSIGN_STMT, if
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, double
STMT -> · ITER_STMT, }
IF_STMT -> if ( EXPR ) · STMT, double
ITER_STMT -> · while ( EXPR ) STMT, while
ASSIGN_STMT -> · ID = EXPR ;, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, void
IF_STMT -> if ( EXPR ) · STMT, void
IF_STMT -> · if ( EXPR ) STMT, while
STMT -> · RTN_STMT, ID
STMT -> · ASSIGN_STMT, }
IF_STMT -> if ( EXPR ) · CODE_BLOCK, double
STMT -> · ITER_STMT, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, if
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, ID
ITER_STMT -> · while ( EXPR ) STMT, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID ;, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, double
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, float
ITER_STMT -> · while ( EXPR ) STMT, void
STMT -> · IF_STMT, while
IF_STMT -> if ( EXPR ) · STMT, return
ASSIGN_STMT -> · ID = EXPR ;, float
CODE_BLOCK -> · { STMT_LIST }, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, int
IF_STMT -> · if ( EXPR ) STMT, void
STMT -> · INIT_STMT, for
STMT -> · RTN_STMT, while
INIT_STMT -> · TYPE_SPEC ID ;, for
CODE_BLOCK -> · { STMT_LIST }, float
STMT -> · ASSIGN_STMT, for
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, return
IF_STMT -> if ( EXPR ) · CODE_BLOCK, }
STMT -> · INIT_STMT, float
IF_STMT -> · if ( EXPR ) CODE_BLOCK, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, return
RTN_STMT -> · return EXPR ; , return
RTN_STMT -> · return EXPR ; , float
IF_STMT -> if ( EXPR ) · CODE_BLOCK, void
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, while
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, int
ASSIGN_STMT -> · ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, for
IF_STMT -> if ( EXPR ) · CODE_BLOCK, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, ID
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID ;, if
STMT -> · ASSIGN_STMT, return
CODE_BLOCK -> · { STMT_LIST }, int
IF_STMT -> if ( EXPR ) · CODE_BLOCK, if
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, void
ITER_STMT -> · while ( EXPR ) STMT, return
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, }
TYPE_SPEC -> · int, ID
IF_STMT -> if ( EXPR ) · CODE_BLOCK else CODE_BLOCK, if
IF_STMT -> if ( EXPR ) · STMT, }
IF_STMT -> · if ( EXPR ) STMT, return
INIT_STMT -> · TYPE_SPEC ID ;, float
STMT -> · RTN_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, return
ASSIGN_STMT -> · ID = EXPR ;, void
IF_STMT -> if ( EXPR ) · CODE_BLOCK, for
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, float

[node|77]: [begin]
FACTOR -> ( EXPR · ), +
FACTOR -> ( EXPR · ), /
FACTOR -> ( EXPR · ), *
FACTOR -> ( EXPR · ), -
FACTOR -> ( EXPR · ), )

[node|78]: [begin]
FACTOR -> · CALL_STMT, ;
FACTOR -> · ( EXPR ), ;
CALL_STMT -> · ID ( PARG_LIST ), -
FACTOR -> · CALL_STMT, +
CALL_STMT -> · ID ( PARG_LIST ), *
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, }
FACTOR -> · ID, -
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, double
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, for
FACTOR -> · ( EXPR ), -
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, for
FACTOR -> · ID, /
FACTOR -> · CONST, /
FACTOR -> · ( EXPR ), /
FACTOR -> · CONST, -
TERM -> · FACTOR TERM2 , +
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, double
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, if
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, int
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
FACTOR -> · CONST, +
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, }
FACTOR -> · CONST, *
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, ID
EXPR -> · TERM EXPR2, ;
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, ID
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , -
FACTOR -> · CONST, ;
CALL_STMT -> · ID ( PARG_LIST ), /
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, int
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, if
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, return
TERM -> · FACTOR TERM2 , ;
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, float
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, while
FACTOR -> · ID, ;
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, return
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, while
FACTOR -> · CALL_STMT, /
CALL_STMT -> · ID ( PARG_LIST ), ;
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) CODE_BLOCK, void
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
ITER_STMT -> for ( EXPR ; · EXPR ; EXPR ) STMT, void
CALL_STMT -> · ID ( PARG_LIST ), +

[node|79]: [begin]
ASSIGN_STMT -> ID = EXPR ; ·, float
ASSIGN_STMT -> ID = EXPR ; ·, }
ASSIGN_STMT -> ID = EXPR ; ·, return
ASSIGN_STMT -> ID = EXPR ; ·, while
ASSIGN_STMT -> ID = EXPR ; ·, int
ASSIGN_STMT -> ID = EXPR ; ·, for
ASSIGN_STMT -> ID = EXPR ; ·, if
ASSIGN_STMT -> ID = EXPR ; ·, double
ASSIGN_STMT -> ID = EXPR ; ·, void
ASSIGN_STMT -> ID = EXPR ; ·, ID

[node|80]: [begin]
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, }
STMT -> · IF_STMT, return
STMT -> · ASSIGN_STMT, void
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, }
STMT -> · INIT_STMT, if
RTN_STMT -> · return EXPR ; , }
STMT -> · INIT_STMT, void
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, double
STMT -> · RTN_STMT, return
CODE_BLOCK -> · { STMT_LIST }, if
ITER_STMT -> while ( EXPR ) · STMT, for
INIT_STMT -> · TYPE_SPEC ID ;, int
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, if
CODE_BLOCK -> · { STMT_LIST }, }
CODE_BLOCK -> · { STMT_LIST }, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, for
ASSIGN_STMT -> · ID = EXPR ;, double
ASSIGN_STMT -> · ID = EXPR ;, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, void
RTN_STMT -> · return EXPR ; , while
STMT -> · ITER_STMT, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID ;, ID
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, float
STMT -> · ITER_STMT, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, return
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, float
STMT -> · RTN_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, for
IF_STMT -> · if ( EXPR ) STMT, }
ITER_STMT -> while ( EXPR ) · STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, }
STMT -> · ASSIGN_STMT, while
STMT -> · INIT_STMT, int
INIT_STMT -> · TYPE_SPEC ID ;, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, while
STMT -> · INIT_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, for
RTN_STMT -> · return EXPR ; , int
STMT -> · IF_STMT, }
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, while
STMT -> · ASSIGN_STMT, float
STMT -> · IF_STMT, if
STMT -> · RTN_STMT, }
ITER_STMT -> while ( EXPR ) · STMT, float
INIT_STMT -> · TYPE_SPEC ID ;, }
STMT -> · ITER_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, double
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, double
STMT -> · IF_STMT, float
INIT_STMT -> · TYPE_SPEC ID ;, void
STMT -> · RTN_STMT, void
STMT -> · ITER_STMT, void
IF_STMT -> · if ( EXPR ) STMT, for
RTN_STMT -> · return EXPR ; , for
CODE_BLOCK -> · { STMT_LIST }, return
IF_STMT -> · if ( EXPR ) CODE_BLOCK, while
IF_STMT -> · if ( EXPR ) STMT, double
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, void
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, ID
STMT -> · ITER_STMT, double
ITER_STMT -> · while ( EXPR ) STMT, for
STMT -> · RTN_STMT, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, int
STMT -> · INIT_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, }
STMT -> · ASSIGN_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, if
STMT -> · IF_STMT, int
IF_STMT -> · if ( EXPR ) STMT, if
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, while
STMT -> · ITER_STMT, if
ASSIGN_STMT -> · ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) STMT, if
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK, void
RTN_STMT -> · return EXPR ; , ID
STMT -> · IF_STMT, double
ASSIGN_STMT -> · ID = EXPR ;, int
INIT_STMT -> · TYPE_SPEC ID ;, return
STMT -> · INIT_STMT, return
ASSIGN_STMT -> · ID = EXPR ;, while
ITER_STMT -> while ( EXPR ) · STMT, void
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, ID
STMT -> · IF_STMT, void
CODE_BLOCK -> · { STMT_LIST }, for
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, void
ITER_STMT -> · while ( EXPR ) STMT, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, int
STMT -> · ITER_STMT, float
STMT -> · ITER_STMT, return
IF_STMT -> · if ( EXPR ) STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, if
STMT -> · ASSIGN_STMT, double
STMT -> · RTN_STMT, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK, return
CODE_BLOCK -> · { STMT_LIST }, while
STMT -> · IF_STMT, ID
RTN_STMT -> · return EXPR ; , double
ASSIGN_STMT -> · ID = EXPR ;, for
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, for
RTN_STMT -> · return EXPR ; , void
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, return
ITER_STMT -> while ( EXPR ) · STMT, double
STMT -> · RTN_STMT, for
STMT -> · ASSIGN_STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK, ID
ITER_STMT -> · while ( EXPR ) STMT, int
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, float
IF_STMT -> · if ( EXPR ) STMT, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, for
STMT -> · IF_STMT, for
CODE_BLOCK -> · { STMT_LIST }, void
IF_STMT -> · if ( EXPR ) STMT, int
ITER_STMT -> · while ( EXPR ) STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, double
STMT -> · INIT_STMT, double
RTN_STMT -> · return EXPR ; , if
STMT -> · INIT_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, void
ITER_STMT -> while ( EXPR ) · STMT, if
STMT -> · ASSIGN_STMT, if
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, double
STMT -> · ITER_STMT, }
ITER_STMT -> · while ( EXPR ) STMT, while
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, void
ASSIGN_STMT -> · ID = EXPR ;, return
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, ID
IF_STMT -> · if ( EXPR ) STMT, while
STMT -> · RTN_STMT, ID
STMT -> · ASSIGN_STMT, }
STMT -> · ITER_STMT, while
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, if
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, ID
ITER_STMT -> · while ( EXPR ) STMT, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID ;, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, double
ITER_STMT -> · while ( EXPR ) STMT, void
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, float
CODE_BLOCK -> · { STMT_LIST }, ID
STMT -> · IF_STMT, while
ASSIGN_STMT -> · ID = EXPR ;, float
IF_STMT -> · if ( EXPR ) CODE_BLOCK, int
IF_STMT -> · if ( EXPR ) STMT, void
STMT -> · INIT_STMT, for
STMT -> · RTN_STMT, while
INIT_STMT -> · TYPE_SPEC ID ;, for
CODE_BLOCK -> · { STMT_LIST }, float
STMT -> · ASSIGN_STMT, for
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, while
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, return
STMT -> · INIT_STMT, float
IF_STMT -> · if ( EXPR ) CODE_BLOCK, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, return
RTN_STMT -> · return EXPR ; , return
RTN_STMT -> · return EXPR ; , float
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, int
ASSIGN_STMT -> · ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, for
ITER_STMT -> while ( EXPR ) · STMT, int
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, if
INIT_STMT -> · TYPE_SPEC ID ;, if
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, for
ITER_STMT -> while ( EXPR ) · STMT, while
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, ID
STMT -> · ASSIGN_STMT, return
ITER_STMT -> while ( EXPR ) · CODE_BLOCK, int
CODE_BLOCK -> · { STMT_LIST }, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, void
ITER_STMT -> · while ( EXPR ) STMT, return
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> while ( EXPR ) · STMT, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( EXPR ) STMT, return
INIT_STMT -> · TYPE_SPEC ID ;, float
ITER_STMT -> while ( EXPR ) · STMT, }
ASSIGN_STMT -> · ID = EXPR ;, void
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, return
STMT -> · RTN_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, float

[node|81]: [begin]
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, +
TERM2 -> * FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> * FACTOR · TERM2, +
TERM2 -> * FACTOR · TERM2, ;
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, +
TERM2 -> ·, -
TERM2 -> ·, ;
TERM2 -> · / FACTOR TERM2, ;

[node|82]: [begin]
TERM2 -> · * FACTOR TERM2, ;
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, -
TERM2 -> / FACTOR · TERM2, ;
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, +
TERM2 -> ·, -
TERM2 -> ·, ;
TERM2 -> · / FACTOR TERM2, ;

[node|83]: [begin]
PARG -> ID ·, ,
PARG -> ID ·, )

[node|84]: [begin]
PARG_LIST -> PARG · , PARG_LIST, )
PARG_LIST -> PARG ·, )

[node|85]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), ;
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), /

[node|86]: [begin]
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, ;
EXPR2 -> - TERM · EXPR2, ;
EXPR2 -> ·, ;

[node|87]: [begin]
EXPR2 -> ·, ;
EXPR2 -> · + TERM EXPR2, ;
EXPR2 -> · - TERM EXPR2, ;
EXPR2 -> + TERM · EXPR2, ;

[node|88]: [begin]
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, ;
FACTOR -> ( EXPR ) ·, /

[node|89]: [begin]
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, }
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, return
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, while
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, ID
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, float
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, if
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, void
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, int
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, for
INIT_STMT -> TYPE_SPEC ID = EXPR ; ·, double

[node|90]: [begin]
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, +
TERM2 -> * FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, )
TERM2 -> · * FACTOR TERM2, )
TERM2 -> * FACTOR · TERM2, +
TERM2 -> ·, )
TERM2 -> · * FACTOR TERM2, -
TERM2 -> * FACTOR · TERM2, )
TERM2 -> ·, +
TERM2 -> ·, -

[node|91]: [begin]
TERM2 -> · / FACTOR TERM2, -
TERM2 -> · / FACTOR TERM2, +
TERM2 -> / FACTOR · TERM2, +
TERM2 -> · * FACTOR TERM2, +
TERM2 -> · / FACTOR TERM2, )
TERM2 -> / FACTOR · TERM2, -
TERM2 -> · * FACTOR TERM2, )
TERM2 -> ·, )
TERM2 -> · * FACTOR TERM2, -
TERM2 -> ·, +
TERM2 -> ·, -
TERM2 -> / FACTOR · TERM2, )

[node|92]: [begin]
CALL_STMT -> ID ( PARG_LIST · ), )
CALL_STMT -> ID ( PARG_LIST · ), -
CALL_STMT -> ID ( PARG_LIST · ), +
CALL_STMT -> ID ( PARG_LIST · ), *
CALL_STMT -> ID ( PARG_LIST · ), /

[node|93]: [begin]
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> ·, )
EXPR2 -> - TERM · EXPR2, )

[node|94]: [begin]
EXPR2 -> · + TERM EXPR2, )
EXPR2 -> · - TERM EXPR2, )
EXPR2 -> + TERM · EXPR2, )
EXPR2 -> ·, )

[node|95]: [begin]
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, ID
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, int
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, void
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, double
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, while
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, }
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, return
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, for
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, return
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, double
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, ID
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, }
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, while
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, int
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, void
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, for
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, if
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, if
IF_STMT -> if ( EXPR ) CODE_BLOCK · else CODE_BLOCK, float
IF_STMT -> if ( EXPR ) CODE_BLOCK ·, float

[node|96]: [begin]
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, }
STMT -> · IF_STMT, return
STMT -> · ASSIGN_STMT, void
CODE_BLOCK -> { · STMT_LIST }, if
STMT -> · INIT_STMT, if
RTN_STMT -> · return EXPR ; , }
STMT -> · INIT_STMT, void
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, double
STMT -> · RTN_STMT, return
STMT_LIST -> ·, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, if
RTN_STMT -> · return EXPR ; , while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, for
STMT -> · ITER_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, void
STMT -> · ITER_STMT, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, return
STMT -> · RTN_STMT, double
IF_STMT -> · if ( EXPR ) STMT, }
STMT -> · ASSIGN_STMT, while
STMT -> · INIT_STMT, int
INIT_STMT -> · TYPE_SPEC ID ;, while
STMT -> · INIT_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, for
STMT -> · IF_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, while
STMT -> · ASSIGN_STMT, float
STMT -> · RTN_STMT, }
INIT_STMT -> · TYPE_SPEC ID ;, }
ITER_STMT -> · while ( EXPR ) STMT, double
STMT -> · IF_STMT, float
STMT -> · ITER_STMT, void
IF_STMT -> · if ( EXPR ) STMT, for
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, ID
ITER_STMT -> · while ( EXPR ) STMT, for
STMT -> · RTN_STMT, int
STMT -> · INIT_STMT, ID
STMT -> · ASSIGN_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, if
STMT -> · IF_STMT, int
IF_STMT -> · if ( EXPR ) STMT, if
STMT -> · ITER_STMT, if
ITER_STMT -> · while ( EXPR ) STMT, if
RTN_STMT -> · return EXPR ; , ID
STMT -> · IF_STMT, double
INIT_STMT -> · TYPE_SPEC ID ;, return
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, void
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, int
STMT -> · ITER_STMT, return
IF_STMT -> · if ( EXPR ) STMT, float
CODE_BLOCK -> { · STMT_LIST }, int
STMT -> · ASSIGN_STMT, double
STMT -> · RTN_STMT, if
RTN_STMT -> · return EXPR ; , double
ASSIGN_STMT -> · ID = EXPR ;, for
RTN_STMT -> · return EXPR ; , void
STMT -> · RTN_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, for
IF_STMT -> · if ( EXPR ) STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, double
STMT -> · INIT_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, void
STMT -> · ASSIGN_STMT, if
CODE_BLOCK -> { · STMT_LIST }, void
CODE_BLOCK -> { · STMT_LIST }, else
STMT -> · ITER_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, void
ASSIGN_STMT -> · ID = EXPR ;, return
STMT -> · ASSIGN_STMT, }
STMT -> · ITER_STMT, while
ITER_STMT -> · while ( EXPR ) STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, double
ITER_STMT -> · while ( EXPR ) STMT, void
ASSIGN_STMT -> · ID = EXPR ;, float
IF_STMT -> · if ( EXPR ) CODE_BLOCK, int
IF_STMT -> · if ( EXPR ) STMT, void
STMT -> · RTN_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, return
RTN_STMT -> · return EXPR ; , float
CODE_BLOCK -> { · STMT_LIST }, return
CODE_BLOCK -> { · STMT_LIST }, for
ASSIGN_STMT -> · ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, for
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, for
STMT -> · ASSIGN_STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, void
ITER_STMT -> · while ( EXPR ) STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, if
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID ;, float
ASSIGN_STMT -> · ID = EXPR ;, void
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, }
CODE_BLOCK -> { · STMT_LIST }, }
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, while
INIT_STMT -> · TYPE_SPEC ID ;, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, while
ASSIGN_STMT -> · ID = EXPR ;, double
ASSIGN_STMT -> · ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID ;, ID
TYPE_SPEC -> · double, ID
CODE_BLOCK -> { · STMT_LIST }, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, for
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, while
RTN_STMT -> · return EXPR ; , int
TYPE_SPEC -> · void, ID
STMT -> · IF_STMT, if
STMT -> · ITER_STMT, for
INIT_STMT -> · TYPE_SPEC ID ;, void
STMT -> · RTN_STMT, void
IF_STMT -> · if ( EXPR ) CODE_BLOCK, while
RTN_STMT -> · return EXPR ; , for
IF_STMT -> · if ( EXPR ) STMT, double
STMT -> · ITER_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, while
ASSIGN_STMT -> · ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR ;, int
STMT -> · INIT_STMT, return
ASSIGN_STMT -> · ID = EXPR ;, while
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, ID
STMT -> · IF_STMT, void
ITER_STMT -> · while ( EXPR ) STMT, float
STMT -> · ITER_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK, return
STMT -> · IF_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, ID
STMT -> · ASSIGN_STMT, int
IF_STMT -> · if ( EXPR ) STMT, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, int
STMT -> · IF_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, ID
STMT -> · INIT_STMT, }
RTN_STMT -> · return EXPR ; , if
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, double
CODE_BLOCK -> { · STMT_LIST }, double
ITER_STMT -> · while ( EXPR ) STMT, while
IF_STMT -> · if ( EXPR ) STMT, while
STMT -> · RTN_STMT, ID
CODE_BLOCK -> { · STMT_LIST }, ID
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, if
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID ;, double
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, float
STMT -> · IF_STMT, while
STMT_LIST -> · STMT STMT_LIST, }
STMT -> · INIT_STMT, for
INIT_STMT -> · TYPE_SPEC ID ;, for
STMT -> · ASSIGN_STMT, for
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, return
STMT -> · INIT_STMT, float
RTN_STMT -> · return EXPR ; , return
CODE_BLOCK -> { · STMT_LIST }, float
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, int
INIT_STMT -> · TYPE_SPEC ID ;, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, return
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) STMT, return
STMT -> · RTN_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, float

[node|97]: [begin]
IF_STMT -> if ( EXPR ) STMT ·, if
IF_STMT -> if ( EXPR ) STMT ·, for
IF_STMT -> if ( EXPR ) STMT ·, }
IF_STMT -> if ( EXPR ) STMT ·, while
IF_STMT -> if ( EXPR ) STMT ·, double
IF_STMT -> if ( EXPR ) STMT ·, int
IF_STMT -> if ( EXPR ) STMT ·, float
IF_STMT -> if ( EXPR ) STMT ·, return
IF_STMT -> if ( EXPR ) STMT ·, void
IF_STMT -> if ( EXPR ) STMT ·, ID

[node|98]: [begin]
FACTOR -> ( EXPR ) ·, *
FACTOR -> ( EXPR ) ·, +
FACTOR -> ( EXPR ) ·, -
FACTOR -> ( EXPR ) ·, )
FACTOR -> ( EXPR ) ·, /

[node|99]: [begin]
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, if
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, }
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, return
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, while
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, void
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, float
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, for
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, int
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, double
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, int
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, }
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, return
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, double
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, while
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, for
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, if
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, ID
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) CODE_BLOCK, float
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, ID
ITER_STMT -> for ( EXPR ; EXPR · ; EXPR ) STMT, void

[node|100]: [begin]
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, if
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, void
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, for
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, int
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, double
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, return
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, }
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, while
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, ID
ITER_STMT -> while ( EXPR ) CODE_BLOCK ·, float

[node|101]: [begin]
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, }
STMT -> · IF_STMT, return
STMT -> · ASSIGN_STMT, void
CODE_BLOCK -> { · STMT_LIST }, if
STMT -> · INIT_STMT, if
RTN_STMT -> · return EXPR ; , }
STMT -> · INIT_STMT, void
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, double
STMT -> · RTN_STMT, return
STMT_LIST -> ·, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, if
RTN_STMT -> · return EXPR ; , while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, for
STMT -> · ITER_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, void
STMT -> · ITER_STMT, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, return
STMT -> · RTN_STMT, double
IF_STMT -> · if ( EXPR ) STMT, }
STMT -> · ASSIGN_STMT, while
STMT -> · INIT_STMT, int
INIT_STMT -> · TYPE_SPEC ID ;, while
STMT -> · INIT_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, for
STMT -> · IF_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, while
STMT -> · ASSIGN_STMT, float
STMT -> · RTN_STMT, }
INIT_STMT -> · TYPE_SPEC ID ;, }
ITER_STMT -> · while ( EXPR ) STMT, double
STMT -> · IF_STMT, float
STMT -> · ITER_STMT, void
IF_STMT -> · if ( EXPR ) STMT, for
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, ID
ITER_STMT -> · while ( EXPR ) STMT, for
STMT -> · RTN_STMT, int
STMT -> · INIT_STMT, ID
STMT -> · ASSIGN_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, if
STMT -> · IF_STMT, int
IF_STMT -> · if ( EXPR ) STMT, if
STMT -> · ITER_STMT, if
ITER_STMT -> · while ( EXPR ) STMT, if
RTN_STMT -> · return EXPR ; , ID
STMT -> · IF_STMT, double
INIT_STMT -> · TYPE_SPEC ID ;, return
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, void
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, int
STMT -> · ITER_STMT, return
IF_STMT -> · if ( EXPR ) STMT, float
CODE_BLOCK -> { · STMT_LIST }, int
STMT -> · ASSIGN_STMT, double
STMT -> · RTN_STMT, if
RTN_STMT -> · return EXPR ; , double
ASSIGN_STMT -> · ID = EXPR ;, for
RTN_STMT -> · return EXPR ; , void
STMT -> · RTN_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, for
IF_STMT -> · if ( EXPR ) STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, double
STMT -> · INIT_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, void
STMT -> · ASSIGN_STMT, if
CODE_BLOCK -> { · STMT_LIST }, void
STMT -> · ITER_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, void
ASSIGN_STMT -> · ID = EXPR ;, return
STMT -> · ASSIGN_STMT, }
STMT -> · ITER_STMT, while
ITER_STMT -> · while ( EXPR ) STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, double
ITER_STMT -> · while ( EXPR ) STMT, void
ASSIGN_STMT -> · ID = EXPR ;, float
IF_STMT -> · if ( EXPR ) CODE_BLOCK, int
IF_STMT -> · if ( EXPR ) STMT, void
STMT -> · RTN_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, return
RTN_STMT -> · return EXPR ; , float
CODE_BLOCK -> { · STMT_LIST }, return
CODE_BLOCK -> { · STMT_LIST }, for
ASSIGN_STMT -> · ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, for
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, for
STMT -> · ASSIGN_STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, void
ITER_STMT -> · while ( EXPR ) STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, if
TYPE_SPEC -> · int, ID
INIT_STMT -> · TYPE_SPEC ID ;, float
ASSIGN_STMT -> · ID = EXPR ;, void
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, }
CODE_BLOCK -> { · STMT_LIST }, }
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, while
INIT_STMT -> · TYPE_SPEC ID ;, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, while
ASSIGN_STMT -> · ID = EXPR ;, double
ASSIGN_STMT -> · ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID ;, ID
TYPE_SPEC -> · double, ID
CODE_BLOCK -> { · STMT_LIST }, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, for
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, while
RTN_STMT -> · return EXPR ; , int
TYPE_SPEC -> · void, ID
STMT -> · IF_STMT, if
STMT -> · ITER_STMT, for
INIT_STMT -> · TYPE_SPEC ID ;, void
STMT -> · RTN_STMT, void
IF_STMT -> · if ( EXPR ) CODE_BLOCK, while
RTN_STMT -> · return EXPR ; , for
IF_STMT -> · if ( EXPR ) STMT, double
STMT -> · ITER_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, while
ASSIGN_STMT -> · ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK, void
ASSIGN_STMT -> · ID = EXPR ;, int
STMT -> · INIT_STMT, return
ASSIGN_STMT -> · ID = EXPR ;, while
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, ID
STMT -> · IF_STMT, void
ITER_STMT -> · while ( EXPR ) STMT, float
STMT -> · ITER_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK, return
STMT -> · IF_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, ID
STMT -> · ASSIGN_STMT, int
IF_STMT -> · if ( EXPR ) STMT, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, int
STMT -> · IF_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, ID
STMT -> · INIT_STMT, }
RTN_STMT -> · return EXPR ; , if
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, double
CODE_BLOCK -> { · STMT_LIST }, double
ITER_STMT -> · while ( EXPR ) STMT, while
IF_STMT -> · if ( EXPR ) STMT, while
STMT -> · RTN_STMT, ID
CODE_BLOCK -> { · STMT_LIST }, ID
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, if
TYPE_SPEC -> · float, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID ;, double
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, float
STMT -> · IF_STMT, while
STMT_LIST -> · STMT STMT_LIST, }
STMT -> · INIT_STMT, for
INIT_STMT -> · TYPE_SPEC ID ;, for
STMT -> · ASSIGN_STMT, for
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, return
STMT -> · INIT_STMT, float
RTN_STMT -> · return EXPR ; , return
CODE_BLOCK -> { · STMT_LIST }, float
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, int
INIT_STMT -> · TYPE_SPEC ID ;, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, return
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, }
IF_STMT -> · if ( EXPR ) STMT, return
STMT -> · RTN_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, float

[node|102]: [begin]
ITER_STMT -> while ( EXPR ) STMT ·, if
ITER_STMT -> while ( EXPR ) STMT ·, void
ITER_STMT -> while ( EXPR ) STMT ·, for
ITER_STMT -> while ( EXPR ) STMT ·, int
ITER_STMT -> while ( EXPR ) STMT ·, double
ITER_STMT -> while ( EXPR ) STMT ·, return
ITER_STMT -> while ( EXPR ) STMT ·, while
ITER_STMT -> while ( EXPR ) STMT ·, }
ITER_STMT -> while ( EXPR ) STMT ·, ID
ITER_STMT -> while ( EXPR ) STMT ·, float

[node|103]: [begin]
TERM2 -> * FACTOR TERM2 ·, +
TERM2 -> * FACTOR TERM2 ·, ;
TERM2 -> * FACTOR TERM2 ·, -

[node|104]: [begin]
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, ;
TERM2 -> / FACTOR TERM2 ·, -

[node|105]: [begin]
PARG -> · ID, ,
PARG -> · ID, )
PARG_LIST -> · PARG, )
PARG_LIST -> ·, )
PARG_LIST -> PARG , · PARG_LIST, )
PARG_LIST -> · PARG , PARG_LIST, )

[node|106]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, ;
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, /

[node|107]: [begin]
EXPR2 -> - TERM EXPR2 ·, ;

[node|108]: [begin]
EXPR2 -> + TERM EXPR2 ·, ;

[node|109]: [begin]
TERM2 -> * FACTOR TERM2 ·, +
TERM2 -> * FACTOR TERM2 ·, -
TERM2 -> * FACTOR TERM2 ·, )

[node|110]: [begin]
TERM2 -> / FACTOR TERM2 ·, +
TERM2 -> / FACTOR TERM2 ·, -
TERM2 -> / FACTOR TERM2 ·, )

[node|111]: [begin]
CALL_STMT -> ID ( PARG_LIST ) ·, )
CALL_STMT -> ID ( PARG_LIST ) ·, -
CALL_STMT -> ID ( PARG_LIST ) ·, +
CALL_STMT -> ID ( PARG_LIST ) ·, *
CALL_STMT -> ID ( PARG_LIST ) ·, /

[node|112]: [begin]
EXPR2 -> - TERM EXPR2 ·, )

[node|113]: [begin]
EXPR2 -> + TERM EXPR2 ·, )

[node|114]: [begin]
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, for
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, int
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, double
CODE_BLOCK -> · { STMT_LIST }, ID
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, if
CODE_BLOCK -> · { STMT_LIST }, for
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, void
CODE_BLOCK -> · { STMT_LIST }, return
CODE_BLOCK -> · { STMT_LIST }, }
CODE_BLOCK -> · { STMT_LIST }, double
CODE_BLOCK -> · { STMT_LIST }, while
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, ID
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, float
CODE_BLOCK -> · { STMT_LIST }, void
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, return
CODE_BLOCK -> · { STMT_LIST }, int
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, }
IF_STMT -> if ( EXPR ) CODE_BLOCK else · CODE_BLOCK, while
CODE_BLOCK -> · { STMT_LIST }, float
CODE_BLOCK -> · { STMT_LIST }, if

[node|115]: [begin]
CODE_BLOCK -> { STMT_LIST · }, for
CODE_BLOCK -> { STMT_LIST · }, double
CODE_BLOCK -> { STMT_LIST · }, if
CODE_BLOCK -> { STMT_LIST · }, int
CODE_BLOCK -> { STMT_LIST · }, return
CODE_BLOCK -> { STMT_LIST · }, }
CODE_BLOCK -> { STMT_LIST · }, while
CODE_BLOCK -> { STMT_LIST · }, float
CODE_BLOCK -> { STMT_LIST · }, else
CODE_BLOCK -> { STMT_LIST · }, void
CODE_BLOCK -> { STMT_LIST · }, ID

[node|116]: [begin]
TERM -> · FACTOR TERM2 , )
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, for
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, float
CALL_STMT -> · ID ( PARG_LIST ), *
CALL_STMT -> · ID ( PARG_LIST ), -
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, ID
FACTOR -> · CALL_STMT, +
FACTOR -> · ID, -
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, void
FACTOR -> · ( EXPR ), -
EXPR -> · TERM EXPR2, )
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, for
FACTOR -> · ID, /
FACTOR -> · CALL_STMT, )
FACTOR -> · CONST, /
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, double
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, return
FACTOR -> · ( EXPR ), /
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, while
CALL_STMT -> · ID ( PARG_LIST ), )
FACTOR -> · CONST, -
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, ID
TERM -> · FACTOR TERM2 , +
FACTOR -> · ( EXPR ), +
FACTOR -> · ID, +
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, int
FACTOR -> · CONST, +
FACTOR -> · CONST, *
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, }
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, if
FACTOR -> · ( EXPR ), )
FACTOR -> · CONST, )
FACTOR -> · CALL_STMT, -
TERM -> · FACTOR TERM2 , -
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, }
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, int
CALL_STMT -> · ID ( PARG_LIST ), /
FACTOR -> · ID, )
FACTOR -> · CALL_STMT, /
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, void
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, float
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, if
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, return
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) STMT, while
ITER_STMT -> for ( EXPR ; EXPR ; · EXPR ) CODE_BLOCK, double
FACTOR -> · ID, *
FACTOR -> · CALL_STMT, *
FACTOR -> · ( EXPR ), *
CALL_STMT -> · ID ( PARG_LIST ), +

[node|117]: [begin]
CODE_BLOCK -> { STMT_LIST · }, for
CODE_BLOCK -> { STMT_LIST · }, double
CODE_BLOCK -> { STMT_LIST · }, if
CODE_BLOCK -> { STMT_LIST · }, int
CODE_BLOCK -> { STMT_LIST · }, return
CODE_BLOCK -> { STMT_LIST · }, }
CODE_BLOCK -> { STMT_LIST · }, while
CODE_BLOCK -> { STMT_LIST · }, float
CODE_BLOCK -> { STMT_LIST · }, void
CODE_BLOCK -> { STMT_LIST · }, ID

[node|118]: [begin]
PARG_LIST -> PARG , PARG_LIST ·, )

[node|119]: [begin]
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, while
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, return
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, }
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, ID
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, float
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, if
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, void
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, int
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, for
IF_STMT -> if ( EXPR ) CODE_BLOCK else CODE_BLOCK ·, double

[node|120]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, double
CODE_BLOCK -> { STMT_LIST } ·, void
CODE_BLOCK -> { STMT_LIST } ·, int
CODE_BLOCK -> { STMT_LIST } ·, }
CODE_BLOCK -> { STMT_LIST } ·, float
CODE_BLOCK -> { STMT_LIST } ·, if
CODE_BLOCK -> { STMT_LIST } ·, return
CODE_BLOCK -> { STMT_LIST } ·, else
CODE_BLOCK -> { STMT_LIST } ·, ID
CODE_BLOCK -> { STMT_LIST } ·, for
CODE_BLOCK -> { STMT_LIST } ·, while

[node|121]: [begin]
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, }
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, while
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, return
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, void
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, float
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, int
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, int
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, float
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, if
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, double
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, return
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, for
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, if
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, }
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, ID
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, for
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, while
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, ID
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) STMT, double
ITER_STMT -> for ( EXPR ; EXPR ; EXPR · ) CODE_BLOCK, void

[node|122]: [begin]
CODE_BLOCK -> { STMT_LIST } ·, double
CODE_BLOCK -> { STMT_LIST } ·, void
CODE_BLOCK -> { STMT_LIST } ·, int
CODE_BLOCK -> { STMT_LIST } ·, }
CODE_BLOCK -> { STMT_LIST } ·, float
CODE_BLOCK -> { STMT_LIST } ·, if
CODE_BLOCK -> { STMT_LIST } ·, return
CODE_BLOCK -> { STMT_LIST } ·, ID
CODE_BLOCK -> { STMT_LIST } ·, for
CODE_BLOCK -> { STMT_LIST } ·, while

[node|123]: [begin]
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, void
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, }
STMT -> · IF_STMT, return
STMT -> · ASSIGN_STMT, void
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, }
STMT -> · INIT_STMT, if
RTN_STMT -> · return EXPR ; , }
STMT -> · INIT_STMT, void
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, double
STMT -> · RTN_STMT, return
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, for
CODE_BLOCK -> · { STMT_LIST }, if
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, while
INIT_STMT -> · TYPE_SPEC ID ;, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, if
CODE_BLOCK -> · { STMT_LIST }, }
CODE_BLOCK -> · { STMT_LIST }, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK, for
ASSIGN_STMT -> · ID = EXPR ;, double
ASSIGN_STMT -> · ID = EXPR ;, if
RTN_STMT -> · return EXPR ; , while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, void
STMT -> · ITER_STMT, ID
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, if
INIT_STMT -> · TYPE_SPEC ID ;, ID
TYPE_SPEC -> · double, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, float
STMT -> · ITER_STMT, int
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, float
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, return
STMT -> · RTN_STMT, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, for
IF_STMT -> · if ( EXPR ) STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, }
STMT -> · ASSIGN_STMT, while
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, }
STMT -> · INIT_STMT, int
INIT_STMT -> · TYPE_SPEC ID ;, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, while
STMT -> · INIT_STMT, while
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, for
RTN_STMT -> · return EXPR ; , int
STMT -> · IF_STMT, }
TYPE_SPEC -> · void, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, while
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, float
STMT -> · ASSIGN_STMT, float
STMT -> · IF_STMT, if
STMT -> · RTN_STMT, }
INIT_STMT -> · TYPE_SPEC ID ;, }
STMT -> · ITER_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, double
STMT -> · IF_STMT, float
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, if
INIT_STMT -> · TYPE_SPEC ID ;, void
STMT -> · RTN_STMT, void
STMT -> · ITER_STMT, void
IF_STMT -> · if ( EXPR ) STMT, for
RTN_STMT -> · return EXPR ; , for
CODE_BLOCK -> · { STMT_LIST }, return
IF_STMT -> · if ( EXPR ) CODE_BLOCK, while
IF_STMT -> · if ( EXPR ) STMT, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, ID
ITER_STMT -> · while ( EXPR ) STMT, for
STMT -> · ITER_STMT, double
STMT -> · RTN_STMT, int
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, while
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, int
STMT -> · INIT_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, }
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, int
STMT -> · ASSIGN_STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK, if
STMT -> · IF_STMT, int
IF_STMT -> · if ( EXPR ) STMT, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, while
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, double
STMT -> · ITER_STMT, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, float
ASSIGN_STMT -> · ID = EXPR ;, ID
ITER_STMT -> · while ( EXPR ) STMT, if
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK, void
RTN_STMT -> · return EXPR ; , ID
STMT -> · IF_STMT, double
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, void
ASSIGN_STMT -> · ID = EXPR ;, int
INIT_STMT -> · TYPE_SPEC ID ;, return
STMT -> · INIT_STMT, return
ASSIGN_STMT -> · ID = EXPR ;, while
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, ID
STMT -> · IF_STMT, void
CODE_BLOCK -> · { STMT_LIST }, for
ITER_STMT -> · while ( EXPR ) STMT, float
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, void
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, int
STMT -> · ITER_STMT, float
STMT -> · ITER_STMT, return
IF_STMT -> · if ( EXPR ) STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, if
STMT -> · ASSIGN_STMT, double
STMT -> · RTN_STMT, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK, return
STMT -> · IF_STMT, ID
CODE_BLOCK -> · { STMT_LIST }, while
RTN_STMT -> · return EXPR ; , double
ASSIGN_STMT -> · ID = EXPR ;, for
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, ID
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, return
RTN_STMT -> · return EXPR ; , void
STMT -> · ASSIGN_STMT, int
IF_STMT -> · if ( EXPR ) CODE_BLOCK, ID
STMT -> · RTN_STMT, for
ITER_STMT -> · while ( EXPR ) STMT, int
IF_STMT -> · if ( EXPR ) STMT, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, int
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, for
CODE_BLOCK -> · { STMT_LIST }, void
STMT -> · IF_STMT, for
IF_STMT -> · if ( EXPR ) STMT, int
ITER_STMT -> · while ( EXPR ) STMT, ID
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, double
STMT -> · INIT_STMT, double
RTN_STMT -> · return EXPR ; , if
STMT -> · INIT_STMT, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, void
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, for
STMT -> · ASSIGN_STMT, if
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, double
STMT -> · ITER_STMT, }
ITER_STMT -> · while ( EXPR ) STMT, while
ASSIGN_STMT -> · ID = EXPR ;, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, void
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, float
IF_STMT -> · if ( EXPR ) STMT, while
STMT -> · RTN_STMT, ID
STMT -> · ASSIGN_STMT, }
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, while
STMT -> · ITER_STMT, while
TYPE_SPEC -> · float, ID
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, if
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, ID
ITER_STMT -> · while ( EXPR ) STMT, }
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, }
INIT_STMT -> · TYPE_SPEC ID ;, double
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, }
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, double
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, float
ITER_STMT -> · while ( EXPR ) STMT, void
STMT -> · IF_STMT, while
CODE_BLOCK -> · { STMT_LIST }, ID
ASSIGN_STMT -> · ID = EXPR ;, float
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, if
IF_STMT -> · if ( EXPR ) CODE_BLOCK, int
IF_STMT -> · if ( EXPR ) STMT, void
STMT -> · INIT_STMT, for
STMT -> · RTN_STMT, while
INIT_STMT -> · TYPE_SPEC ID ;, for
CODE_BLOCK -> · { STMT_LIST }, float
STMT -> · ASSIGN_STMT, for
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, int
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, return
STMT -> · INIT_STMT, float
IF_STMT -> · if ( EXPR ) CODE_BLOCK, double
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, return
RTN_STMT -> · return EXPR ; , return
RTN_STMT -> · return EXPR ; , float
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, int
ASSIGN_STMT -> · ID = EXPR ;, }
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, double
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, ID
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID ;, if
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, for
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, ID
STMT -> · ASSIGN_STMT, return
CODE_BLOCK -> · { STMT_LIST }, int
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, float
ITER_STMT -> · while ( EXPR ) CODE_BLOCK, void
ITER_STMT -> · while ( EXPR ) STMT, return
IF_STMT -> · if ( EXPR ) CODE_BLOCK else CODE_BLOCK, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK, if
INIT_STMT -> · TYPE_SPEC ID = EXPR ;, }
TYPE_SPEC -> · int, ID
IF_STMT -> · if ( EXPR ) STMT, return
INIT_STMT -> · TYPE_SPEC ID ;, float
STMT -> · RTN_STMT, float
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, return
ASSIGN_STMT -> · ID = EXPR ;, void
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · CODE_BLOCK, ID
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) · STMT, return
ITER_STMT -> · for ( EXPR ; EXPR ; EXPR ) STMT, float

[node|124]: [begin]
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, float
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, }
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, while
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, return
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, int
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, if
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, double
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, for
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, ID
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) CODE_BLOCK ·, void

[node|125]: [begin]
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, }
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, ID
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, float
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, while
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, if
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, void
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, for
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, int
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, double
ITER_STMT -> for ( EXPR ; EXPR ; EXPR ) STMT ·, return

[edge|0]:
0 -> 1 : TYPE_SPEC

[edge|1]:
0 -> 2 : FUNC_LIST

[edge|2]:
0 -> 3 : FUNC_DEF

[edge|3]:
0 -> 4 : void

[edge|4]:
0 -> 5 : float

[edge|5]:
0 -> 6 : double

[edge|6]:
0 -> 7 : int

[edge|7]:
1 -> 8 : ID

[edge|8]:
3 -> 1 : TYPE_SPEC

[edge|9]:
3 -> 9 : FUNC_LIST

[edge|10]:
3 -> 3 : FUNC_DEF

[edge|11]:
3 -> 4 : void

[edge|12]:
3 -> 5 : float

[edge|13]:
3 -> 6 : double

[edge|14]:
3 -> 7 : int

[edge|15]:
8 -> 10 : (

[edge|16]:
10 -> 11 : ARG_LIST

[edge|17]:
10 -> 12 : TYPE_SPEC

[edge|18]:
10 -> 13 : ARGUMENT

[edge|19]:
10 -> 4 : void

[edge|20]:
10 -> 5 : float

[edge|21]:
10 -> 6 : double

[edge|22]:
10 -> 7 : int

[edge|23]:
11 -> 14 : )

[edge|24]:
12 -> 15 : ID

[edge|25]:
13 -> 16 : ,

[edge|26]:
14 -> 17 : CODE_BLOCK

[edge|27]:
14 -> 18 : {

[edge|28]:
16 -> 19 : ARG_LIST

[edge|29]:
16 -> 12 : TYPE_SPEC

[edge|30]:
16 -> 13 : ARGUMENT

[edge|31]:
16 -> 4 : void

[edge|32]:
16 -> 5 : float

[edge|33]:
16 -> 6 : double

[edge|34]:
16 -> 7 : int

[edge|35]:
18 -> 20 : RTN_STMT

[edge|36]:
18 -> 21 : TYPE_SPEC

[edge|37]:
18 -> 22 : IF_STMT

[edge|38]:
18 -> 23 : if

[edge|39]:
18 -> 24 : for

[edge|40]:
18 -> 25 : ID

[edge|41]:
18 -> 26 : ITER_STMT

[edge|42]:
18 -> 27 : ASSIGN_STMT

[edge|43]:
18 -> 28 : STMT_LIST

[edge|44]:
18 -> 4 : void

[edge|45]:
18 -> 5 : float

[edge|46]:
18 -> 29 : while

[edge|47]:
18 -> 30 : return

[edge|48]:
18 -> 6 : double

[edge|49]:
18 -> 7 : int

[edge|50]:
18 -> 31 : STMT

[edge|51]:
18 -> 32 : INIT_STMT

[edge|52]:
21 -> 33 : ID

[edge|53]:
23 -> 34 : (

[edge|54]:
24 -> 35 : (

[edge|55]:
25 -> 36 : =

[edge|56]:
28 -> 37 : }

[edge|57]:
29 -> 38 : (

[edge|58]:
30 -> 39 : FACTOR

[edge|59]:
30 -> 40 : CALL_STMT

[edge|60]:
30 -> 41 : ID

[edge|61]:
30 -> 42 : TERM

[edge|62]:
30 -> 43 : CONST

[edge|63]:
30 -> 44 : EXPR

[edge|64]:
30 -> 45 : (

[edge|65]:
31 -> 20 : RTN_STMT

[edge|66]:
31 -> 21 : TYPE_SPEC

[edge|67]:
31 -> 22 : IF_STMT

[edge|68]:
31 -> 23 : if

[edge|69]:
31 -> 24 : for

[edge|70]:
31 -> 25 : ID

[edge|71]:
31 -> 26 : ITER_STMT

[edge|72]:
31 -> 27 : ASSIGN_STMT

[edge|73]:
31 -> 46 : STMT_LIST

[edge|74]:
31 -> 4 : void

[edge|75]:
31 -> 5 : float

[edge|76]:
31 -> 29 : while

[edge|77]:
31 -> 30 : return

[edge|78]:
31 -> 6 : double

[edge|79]:
31 -> 7 : int

[edge|80]:
31 -> 31 : STMT

[edge|81]:
31 -> 32 : INIT_STMT

[edge|82]:
33 -> 47 : ;

[edge|83]:
33 -> 48 : =

[edge|84]:
34 -> 49 : FACTOR

[edge|85]:
34 -> 50 : CALL_STMT

[edge|86]:
34 -> 51 : ID

[edge|87]:
34 -> 52 : TERM

[edge|88]:
34 -> 53 : CONST

[edge|89]:
34 -> 54 : EXPR

[edge|90]:
34 -> 55 : (

[edge|91]:
35 -> 39 : FACTOR

[edge|92]:
35 -> 40 : CALL_STMT

[edge|93]:
35 -> 41 : ID

[edge|94]:
35 -> 42 : TERM

[edge|95]:
35 -> 43 : CONST

[edge|96]:
35 -> 56 : EXPR

[edge|97]:
35 -> 45 : (

[edge|98]:
36 -> 39 : FACTOR

[edge|99]:
36 -> 40 : CALL_STMT

[edge|100]:
36 -> 41 : ID

[edge|101]:
36 -> 42 : TERM

[edge|102]:
36 -> 43 : CONST

[edge|103]:
36 -> 57 : EXPR

[edge|104]:
36 -> 45 : (

[edge|105]:
38 -> 49 : FACTOR

[edge|106]:
38 -> 50 : CALL_STMT

[edge|107]:
38 -> 51 : ID

[edge|108]:
38 -> 52 : TERM

[edge|109]:
38 -> 53 : CONST

[edge|110]:
38 -> 58 : EXPR

[edge|111]:
38 -> 55 : (

[edge|112]:
39 -> 59 : TERM2

[edge|113]:
39 -> 60 : *

[edge|114]:
39 -> 61 : /

[edge|115]:
41 -> 62 : (

[edge|116]:
42 -> 63 : -

[edge|117]:
42 -> 64 : EXPR2

[edge|118]:
42 -> 65 : +

[edge|119]:
44 -> 66 : ;

[edge|120]:
45 -> 49 : FACTOR

[edge|121]:
45 -> 50 : CALL_STMT

[edge|122]:
45 -> 51 : ID

[edge|123]:
45 -> 52 : TERM

[edge|124]:
45 -> 53 : CONST

[edge|125]:
45 -> 67 : EXPR

[edge|126]:
45 -> 55 : (

[edge|127]:
48 -> 39 : FACTOR

[edge|128]:
48 -> 40 : CALL_STMT

[edge|129]:
48 -> 41 : ID

[edge|130]:
48 -> 42 : TERM

[edge|131]:
48 -> 43 : CONST

[edge|132]:
48 -> 68 : EXPR

[edge|133]:
48 -> 45 : (

[edge|134]:
49 -> 69 : TERM2

[edge|135]:
49 -> 70 : *

[edge|136]:
49 -> 71 : /

[edge|137]:
51 -> 72 : (

[edge|138]:
52 -> 73 : -

[edge|139]:
52 -> 74 : EXPR2

[edge|140]:
52 -> 75 : +

[edge|141]:
54 -> 76 : )

[edge|142]:
55 -> 49 : FACTOR

[edge|143]:
55 -> 50 : CALL_STMT

[edge|144]:
55 -> 51 : ID

[edge|145]:
55 -> 52 : TERM

[edge|146]:
55 -> 53 : CONST

[edge|147]:
55 -> 77 : EXPR

[edge|148]:
55 -> 55 : (

[edge|149]:
56 -> 78 : ;

[edge|150]:
57 -> 79 : ;

[edge|151]:
58 -> 80 : )

[edge|152]:
60 -> 81 : FACTOR

[edge|153]:
60 -> 40 : CALL_STMT

[edge|154]:
60 -> 41 : ID

[edge|155]:
60 -> 43 : CONST

[edge|156]:
60 -> 45 : (

[edge|157]:
61 -> 82 : FACTOR

[edge|158]:
61 -> 40 : CALL_STMT

[edge|159]:
61 -> 41 : ID

[edge|160]:
61 -> 43 : CONST

[edge|161]:
61 -> 45 : (

[edge|162]:
62 -> 83 : ID

[edge|163]:
62 -> 84 : PARG

[edge|164]:
62 -> 85 : PARG_LIST

[edge|165]:
63 -> 39 : FACTOR

[edge|166]:
63 -> 40 : CALL_STMT

[edge|167]:
63 -> 41 : ID

[edge|168]:
63 -> 86 : TERM

[edge|169]:
63 -> 43 : CONST

[edge|170]:
63 -> 45 : (

[edge|171]:
65 -> 39 : FACTOR

[edge|172]:
65 -> 40 : CALL_STMT

[edge|173]:
65 -> 41 : ID

[edge|174]:
65 -> 87 : TERM

[edge|175]:
65 -> 43 : CONST

[edge|176]:
65 -> 45 : (

[edge|177]:
67 -> 88 : )

[edge|178]:
68 -> 89 : ;

[edge|179]:
70 -> 90 : FACTOR

[edge|180]:
70 -> 50 : CALL_STMT

[edge|181]:
70 -> 51 : ID

[edge|182]:
70 -> 53 : CONST

[edge|183]:
70 -> 55 : (

[edge|184]:
71 -> 91 : FACTOR

[edge|185]:
71 -> 50 : CALL_STMT

[edge|186]:
71 -> 51 : ID

[edge|187]:
71 -> 53 : CONST

[edge|188]:
71 -> 55 : (

[edge|189]:
72 -> 83 : ID

[edge|190]:
72 -> 84 : PARG

[edge|191]:
72 -> 92 : PARG_LIST

[edge|192]:
73 -> 49 : FACTOR

[edge|193]:
73 -> 50 : CALL_STMT

[edge|194]:
73 -> 51 : ID

[edge|195]:
73 -> 93 : TERM

[edge|196]:
73 -> 53 : CONST

[edge|197]:
73 -> 55 : (

[edge|198]:
75 -> 49 : FACTOR

[edge|199]:
75 -> 50 : CALL_STMT

[edge|200]:
75 -> 51 : ID

[edge|201]:
75 -> 94 : TERM

[edge|202]:
75 -> 53 : CONST

[edge|203]:
75 -> 55 : (

[edge|204]:
76 -> 20 : RTN_STMT

[edge|205]:
76 -> 21 : TYPE_SPEC

[edge|206]:
76 -> 22 : IF_STMT

[edge|207]:
76 -> 23 : if

[edge|208]:
76 -> 24 : for

[edge|209]:
76 -> 25 : ID

[edge|210]:
76 -> 95 : CODE_BLOCK

[edge|211]:
76 -> 96 : {

[edge|212]:
76 -> 26 : ITER_STMT

[edge|213]:
76 -> 27 : ASSIGN_STMT

[edge|214]:
76 -> 4 : void

[edge|215]:
76 -> 5 : float

[edge|216]:
76 -> 29 : while

[edge|217]:
76 -> 30 : return

[edge|218]:
76 -> 6 : double

[edge|219]:
76 -> 7 : int

[edge|220]:
76 -> 97 : STMT

[edge|221]:
76 -> 32 : INIT_STMT

[edge|222]:
77 -> 98 : )

[edge|223]:
78 -> 39 : FACTOR

[edge|224]:
78 -> 40 : CALL_STMT

[edge|225]:
78 -> 41 : ID

[edge|226]:
78 -> 42 : TERM

[edge|227]:
78 -> 43 : CONST

[edge|228]:
78 -> 99 : EXPR

[edge|229]:
78 -> 45 : (

[edge|230]:
80 -> 20 : RTN_STMT

[edge|231]:
80 -> 21 : TYPE_SPEC

[edge|232]:
80 -> 22 : IF_STMT

[edge|233]:
80 -> 23 : if

[edge|234]:
80 -> 24 : for

[edge|235]:
80 -> 25 : ID

[edge|236]:
80 -> 100 : CODE_BLOCK

[edge|237]:
80 -> 101 : {

[edge|238]:
80 -> 26 : ITER_STMT

[edge|239]:
80 -> 27 : ASSIGN_STMT

[edge|240]:
80 -> 4 : void

[edge|241]:
80 -> 5 : float

[edge|242]:
80 -> 29 : while

[edge|243]:
80 -> 30 : return

[edge|244]:
80 -> 6 : double

[edge|245]:
80 -> 7 : int

[edge|246]:
80 -> 102 : STMT

[edge|247]:
80 -> 32 : INIT_STMT

[edge|248]:
81 -> 103 : TERM2

[edge|249]:
81 -> 60 : *

[edge|250]:
81 -> 61 : /

[edge|251]:
82 -> 104 : TERM2

[edge|252]:
82 -> 60 : *

[edge|253]:
82 -> 61 : /

[edge|254]:
84 -> 105 : ,

[edge|255]:
85 -> 106 : )

[edge|256]:
86 -> 63 : -

[edge|257]:
86 -> 107 : EXPR2

[edge|258]:
86 -> 65 : +

[edge|259]:
87 -> 63 : -

[edge|260]:
87 -> 108 : EXPR2

[edge|261]:
87 -> 65 : +

[edge|262]:
90 -> 109 : TERM2

[edge|263]:
90 -> 70 : *

[edge|264]:
90 -> 71 : /

[edge|265]:
91 -> 110 : TERM2

[edge|266]:
91 -> 70 : *

[edge|267]:
91 -> 71 : /

[edge|268]:
92 -> 111 : )

[edge|269]:
93 -> 73 : -

[edge|270]:
93 -> 112 : EXPR2

[edge|271]:
93 -> 75 : +

[edge|272]:
94 -> 73 : -

[edge|273]:
94 -> 113 : EXPR2

[edge|274]:
94 -> 75 : +

[edge|275]:
95 -> 114 : else

[edge|276]:
96 -> 20 : RTN_STMT

[edge|277]:
96 -> 21 : TYPE_SPEC

[edge|278]:
96 -> 22 : IF_STMT

[edge|279]:
96 -> 23 : if

[edge|280]:
96 -> 24 : for

[edge|281]:
96 -> 25 : ID

[edge|282]:
96 -> 26 : ITER_STMT

[edge|283]:
96 -> 27 : ASSIGN_STMT

[edge|284]:
96 -> 115 : STMT_LIST

[edge|285]:
96 -> 4 : void

[edge|286]:
96 -> 5 : float

[edge|287]:
96 -> 29 : while

[edge|288]:
96 -> 30 : return

[edge|289]:
96 -> 6 : double

[edge|290]:
96 -> 7 : int

[edge|291]:
96 -> 31 : STMT

[edge|292]:
96 -> 32 : INIT_STMT

[edge|293]:
99 -> 116 : ;

[edge|294]:
101 -> 20 : RTN_STMT

[edge|295]:
101 -> 21 : TYPE_SPEC

[edge|296]:
101 -> 22 : IF_STMT

[edge|297]:
101 -> 23 : if

[edge|298]:
101 -> 24 : for

[edge|299]:
101 -> 25 : ID

[edge|300]:
101 -> 26 : ITER_STMT

[edge|301]:
101 -> 27 : ASSIGN_STMT

[edge|302]:
101 -> 117 : STMT_LIST

[edge|303]:
101 -> 4 : void

[edge|304]:
101 -> 5 : float

[edge|305]:
101 -> 29 : while

[edge|306]:
101 -> 30 : return

[edge|307]:
101 -> 6 : double

[edge|308]:
101 -> 7 : int

[edge|309]:
101 -> 31 : STMT

[edge|310]:
101 -> 32 : INIT_STMT

[edge|311]:
105 -> 83 : ID

[edge|312]:
105 -> 84 : PARG

[edge|313]:
105 -> 118 : PARG_LIST

[edge|314]:
114 -> 119 : CODE_BLOCK

[edge|315]:
114 -> 101 : {

[edge|316]:
115 -> 120 : }

[edge|317]:
116 -> 49 : FACTOR

[edge|318]:
116 -> 50 : CALL_STMT

[edge|319]:
116 -> 51 : ID

[edge|320]:
116 -> 52 : TERM

[edge|321]:
116 -> 53 : CONST

[edge|322]:
116 -> 121 : EXPR

[edge|323]:
116 -> 55 : (

[edge|324]:
117 -> 122 : }

[edge|325]:
121 -> 123 : )

[edge|326]:
123 -> 20 : RTN_STMT

[edge|327]:
123 -> 21 : TYPE_SPEC

[edge|328]:
123 -> 22 : IF_STMT

[edge|329]:
123 -> 23 : if

[edge|330]:
123 -> 24 : for

[edge|331]:
123 -> 25 : ID

[edge|332]:
123 -> 124 : CODE_BLOCK

[edge|333]:
123 -> 101 : {

[edge|334]:
123 -> 26 : ITER_STMT

[edge|335]:
123 -> 27 : ASSIGN_STMT

[edge|336]:
123 -> 4 : void

[edge|337]:
123 -> 5 : float

[edge|338]:
123 -> 29 : while

[edge|339]:
123 -> 30 : return

[edge|340]:
123 -> 6 : double

[edge|341]:
123 -> 7 : int

[edge|342]:
123 -> 125 : STMT

[edge|343]:
123 -> 32 : INIT_STMT

