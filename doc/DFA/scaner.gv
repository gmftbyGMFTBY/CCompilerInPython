digraph finit_state_machine {
    rankdir=LR;
    size="50,50";
    
    // the number and the string node 1 ~ 100
    node [shape = circle, label = "0\n2", fontsize = 10]; 0;
    node [shape = circle, label = "1", fontsize = 10]; 1;
    node [shape = circle, label = "2", fontsize = 10]; 2;
    node [shape = circle, label = "3", fontsize = 10]; 3;
    node [shape = circle, label = "4", fontsize = 10]; 4;
    node [shape = circle, label = "5", fontsize = 10]; 5;
    node [shape = circle, label = "6", fontsize = 10]; 6;
    // the state that is a number
    node [shape = doublecircle, label = "const_n", fontsize = 10]; 7;    
    node [shape = circle, label = "8", fontsize = 10]; 8;
    node [shape = circle, label = "9", fontsize = 10]; 9;
    node [shape = circle, label = "10", fontsize = 10]; 10;
    node [shape = circle, label = "11", fontsize = 10]; 11;

    node [shape = circle, label = "12", fontsize = 10]; 12;
    node [shape = circle, label = "13", fontsize = 10]; 13;
    node [shape = doublecircle, label = "const_s", fontsize = 10]; 14;
    node [shape = circle, label = "15", fontsize = 10]; 15;
    node [shape = circle, label = "16", fontsize = 10]; 16;
    node [shape = doublecircle, label = "const_s", fontsize = 10]; 17
    
    /*
    // the separate character  200 ~ 300
    // , ; white_space : ( ) [ ] { } 
    node [shape = doublecircle, label = "separate", fontsize = 10]; 200;  // ,
    */
    
    // the operator characer 400 ~ 500
    // ([point - operator *, &], -, +) need to be foucused on
    /*
    node [shape = circle, label = "400", fontsize = 10]; 400;       // +, ++, +=
    node [shape = doublecircle, label = "401", fontsize = 10]; 401;       // +
    node [shape = doublecircle, label = "402", fontsize = 10]; 402;       // ++
    node [shape = doublecircle, label = "403", fontsize = 10]; 403;       // +=
    
    node [shape = circle, label = "404", fontsize = 10]; 404;       // -, --, -=, ->
    node [shape = doublecircle, label = "405", fontsize = 10]; 405;       // -
    node [shape = doublecircle, label = "406", fontsize = 10]; 406;       // --
    node [shape = doublecircle, label = "407", fontsize = 10]; 407;       // -=
    
    node [shape = circle, label = "408", fontsize = 10]; 408;       // *, *=
    node [shape = doublecircle, label = "409", fontsize = 10]; 409;       // *
    node [shape = doublecircle, label = "410", fontsize = 10]; 410;       // *=
    
    node [shape = circle, label = "411", fontsize = 10]; 411;       // /, /=
    node [shape = doublecircle, label = "412", fontsize = 10]; 412;       // /
    node [shape = doublecircle, label = "413", fontsize = 10]; 413;       // /=
    
    node [shape = circle, label = "414", fontsize = 10]; 414;       // %, %=
    node [shape = doublecircle, label = "415", fontsize = 10]; 415;       // %
    node [shape = doublecircle, label = "416", fontsize = 10]; 416;       // %=
    
    node [shape = circle, label = "417", fontsize = 10]; 417;       // =, ==
    node [shape = doublecircle, label = "418", fontsize = 10]; 418;       // =
    node [shape = doublecircle, label = "419", fontsize = 10]; 419;       // ==
    
    node [shape = circle, label = "420", fontsize = 10]; 420;       // !, !=
    node [shape = doublecircle, label = "421", fontsize = 10]; 421;       // !
    node [shape = doublecircle, label = "422", fontsize = 10]; 422;       // !=
    
    node [shape = circle, label = "423", fontsize = 10]; 423;       // <, <=, <<
    node [shape = doublecircle, label = "424", fontsize = 10]; 424;       // <
    node [shape = doublecircle, label = "425", fontsize = 10]; 425;       // <=
    node [shape = doublecircle, label = "426", fontsize = 10]; 426;       // <<
    
    node [shape = circle, label = "427", fontsize = 10]; 427;       // >, >=, >>
    node [shape = doublecircle, label = "428", fontsize = 10]; 428;       // >
    node [shape = doublecircle, label = "429", fontsize = 10]; 429;       // >=
    node [shape = doublecircle, label = "430", fontsize = 10]; 430;       // >>
    
    node [shape = circle, label = "431", fontsize = 10]; 431;       // ~
    
    node [shape = circle, label = "432", fontsize = 10]; 432;       // &, &&, &=
    node [shape = doublecircle, label = "433", fontsize = 10]; 433;       // &
    node [shape = doublecircle, label = "434", fontsize = 10]; 434;       // &&
    node [shape = doublecircle, label = "435", fontsize = 10]; 435;       // &=
    
    node [shape = circle, label = "436", fontsize = 10]; 436;       // |, ||, |=
    node [shape = doublecircle, label = "437", fontsize = 10]; 437;       // |
    node [shape = doublecircle, label = "438", fontsize = 10]; 438;       // ||
    node [shape = doublecircle, label = "439", fontsize = 10]; 439;       // |=

    node [shape = doublecircle, label = "440", fontsize = 10]; 440;       // .
    node [shape = doublecircle, label = "441", fontsize = 10]; 441;       // ?

    node [shape = circle, label = "442", fontsize = 10]; 442;       // ^, ^=
    node [shape = doublecircle, label = "443", fontsize = 10]; 443;       // ^
    node [shape = doublecircle, label = "444", fontsize = 10]; 444;       // ^=
    */ 

    // node [shape = doublecircle, label = "445", fontsize = 10]; 445;       // ->

    // operator edge
    /*
    0       ->      400     [label="+"];
    400     ->      401     [label="other"];
    400     ->      402     [label="+"];
    400     ->      403     [label="="];
    0       ->      404     [label="-"];
    404     ->      405     [label="other"];
    404     ->      406     [label="-"];
    404     ->      407     [label="="];
    404     ->      445     [label=">"];
    0       ->      408     [label="*"];
    408     ->      409     [label="other"];
    408     ->      410     [label="="];
    0       ->      411     [label="/"];
    411     ->      412     [label="other"];
    411     ->      413     [label="="];
    0       ->      414     [label="%"];
    414     ->      415     [label="other"];
    414     ->      416     [label="="];
    0       ->      417     [label="="];
    417     ->      418     [label="other"];
    417     ->      419     [label="="];
    0       ->      420     [label="!"];
    420     ->      421     [label="other"];
    420     ->      422     [label="="];
    0       ->      423     [label="<"];
    423     ->      424     [label="other"];
    423     ->      425     [label="="];
    423     ->      426     [label="<"];
    0       ->      427     [label=">"];
    427     ->      428     [label="other"];
    427     ->      429     [label="="];
    427     ->      430     [label=">"];
    0       ->      431     [label="~"];
    0       ->      432     [label="&"];
    432     ->      433     [label="other"];
    432     ->      434     [label="&"];
    432     ->      435     [label="="];
    0       ->      436     [label="|"];
    436     ->      437     [label="other"];
    436     ->      438     [label="|"];
    436     ->      439     [label="="];
    0       ->      440     [label="."];
    0       ->      441     [label="?"];
    0       ->      442     [label="^"];
    442     ->      443     [label="other"];
    442     ->      444     [label="="];
    */

    /*
    // name node 600 ~ 700
    node [shape = circle, label = "600", fontsize = 10]; 600;             
    node [shape = doublecircle, label = "identifier", fontsize = 10]; 601;             //
    
    // name edge, need to check the saver name in C
    0       ->      600      [label="character,_"];
    600     ->      600      [label="character,digit,_"];
    600     ->      601      [label="other"];
    */

    // the number and the string edge
    0       ->      1       [label="not 0"];
    0       ->      8       [label="0"];
    1       ->      1       [label="digit"];
    1       ->      2       [label="."];
    1       ->      4       [label="e/E"];
    1       ->      7       [label="other_1"];
    2       ->      3       [label="digit"];
    2       ->      7       [label="digit"];
    3       ->      3       [label="digit"];
    3       ->      7       [label="other_1"];
    3       ->      4       [label="e/E"];
    4       ->      6       [label="digit"];
    4       ->      5       [label="+/-"];
    4       ->      7       [label="other_1"];
    5       ->      6       [label="digit"];
    6       ->      6       [label="digit"];
    6       ->      7       [label="other_1"];
    8       ->      1       [label="8,9"];
    8       ->      9       [label="0~7"];
    8       ->      10      [label="xX"];
    8       ->      7       [label="other_1"];
    8       ->      2       [label="."]
    9       ->      9       [label="0~7"];
    9       ->      1       [label="8,9"];
    9       ->      7       [label="other_1"];
    9       ->      2       [label="."];
    10      ->      11      [label="0~9A~Fa~f"];
    11      ->      11      [label="0~9A~Fa~f"];
    11      ->      7       [label="other_1"];

    0       ->      12      [label="s'"];
    12      ->      12      [label="not\nots'"];
    12      ->      13      [label="\\"];
    12      ->      14      [label="s'"]
    13      ->      12      [label="char"];

    0       ->      15      [label="s\""];
    15      ->      15      [label="not\nots\""];
    15      ->      16      [label="\\"];
    15      ->      17      [label="s\""];
    16      ->      15      [label="char"];

    // the separate character edge
    0       ->      200    [label=",;white_space:.()[]{}"];
}
